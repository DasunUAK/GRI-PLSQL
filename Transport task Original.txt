CREATE OR REPLACE PACKAGE BODY Transport_Task_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (transport_task_id              BOOLEAN := FALSE,
   printed_flag                   BOOLEAN := FALSE,
   create_date                    BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   fixed                          BOOLEAN := FALSE);

string_null_                   CONSTANT VARCHAR2(15) := Database_SYS.string_null_;

number_null_                   CONSTANT NUMBER       := -99999999999;

db_true_                       CONSTANT VARCHAR2(4)  := Fnd_Boolean_API.db_true;

db_false_                      CONSTANT VARCHAR2(5)  := Fnd_Boolean_API.db_false;


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Too_Many_Rows___ (
   transport_task_id_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   transport_task_id_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ transport_task_tab%ROWTYPE );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ transport_task_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   transport_task_id_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   transport_task_id_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   transport_task_id_ IN NUMBER) RETURN transport_task_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   transport_task_id_ IN NUMBER) RETURN transport_task_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   transport_task_id_ IN NUMBER ) RETURN transport_task_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   transport_task_id_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN transport_task_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN transport_task_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN transport_task_tab%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN transport_task_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN transport_task_tab%ROWTYPE,
   newrec_ IN transport_task_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     transport_task_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY TRANSPORT_TASK_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     transport_task_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     transport_task_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY transport_task_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY transport_task_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN transport_task_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN transport_task_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN transport_task_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY transport_task_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Next_Transport_Task_Id___ RETURN NUMBER;

PROCEDURE Check_And_Delete___ (
   remrec_ IN TRANSPORT_TASK_TAB%ROWTYPE );

PROCEDURE Get_Whse_Cons_Level_Flags___ (
   single_warehouse_id_          OUT VARCHAR2,
   single_bay_id_                OUT VARCHAR2,
   single_tier_id_               OUT VARCHAR2,
   single_row_id_                OUT VARCHAR2,
   single_bin_id_                OUT VARCHAR2,
   warehouse_structure_level_db_ IN  VARCHAR2 );

PROCEDURE Get_Part_Cons_Level_Flags___ (
   single_part_no_          OUT VARCHAR2,
   single_configuration_id_ OUT VARCHAR2,
   part_cons_level_db_      IN  VARCHAR2 );

PROCEDURE Get_Ref_Cons_Level_Flags___ (
   single_ref_type_   OUT VARCHAR2,
   single_ref1_       OUT VARCHAR2,
   single_ref2_       OUT VARCHAR2,
   single_ref3_       OUT VARCHAR2,
   single_ref4_       OUT VARCHAR2,
   ref_cons_level_db_ IN  VARCHAR2 );

FUNCTION Has_Line_In_Status___(
   transport_task_id_        IN NUMBER,
   transport_task_status_db_ IN VARCHAR2   ) RETURN BOOLEAN;

PROCEDURE Validate_Identified_Serials___(
   part_tracking_session_id_       IN NUMBER,
   number_of_serials_to_identify_  IN NUMBER );

PROCEDURE Execute___ (
   transport_task_id_        IN NUMBER,
   part_tracking_session_id_ IN NUMBER,
   only_status_picked_       IN BOOLEAN );

PROCEDURE Increase_Qty_On_Unexecuted___ (
   contract_                  IN VARCHAR2,
   part_no_                   IN VARCHAR2,
   configuration_id_          IN VARCHAR2,
   location_no_               IN VARCHAR2,
   lot_batch_no_              IN VARCHAR2,
   serial_no_                 IN VARCHAR2,
   eng_chg_level_             IN VARCHAR2,
   waiv_dev_rej_no_           IN VARCHAR2,
   activity_seq_              IN NUMBER,
   additional_quantity_       IN NUMBER,
   additional_catch_quantity_ IN NUMBER,
   order_ref1_                IN VARCHAR2,
   order_ref2_                IN VARCHAR2,
   order_ref3_                IN VARCHAR2,
   order_ref4_                IN VARCHAR2,
   order_type_db_             IN VARCHAR2 );

FUNCTION Check_Only_Printing___ (
   newrec_ IN  transport_task_tab%ROWTYPE,
   oldrec_ IN  transport_task_tab%ROWTYPE ) RETURN BOOLEAN;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rowkey_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE
   IS
      rec_ transport_task_tab%ROWTYPE;
   BEGIN
      SELECT transport_task_id
         INTO  rec_.transport_task_id
         FROM  transport_task_tab
         WHERE rowkey = rowkey_;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rec_.transport_task_id, 'Get_Key_By_Rowkey');
   END Base;

BEGIN
   RETURN Base(rowkey_);
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      transport_task_id_ IN NUMBER )
   IS
   BEGIN
      IF (NOT Check_Exist___(transport_task_id_)) THEN
         Raise_Record_Not_Exist___(transport_task_id_);
      END IF;
   END Base;

BEGIN
   Base(transport_task_id_);
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Check_Exist___(transport_task_id_);
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Printed_Flag (
   transport_task_id_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ transport_task_tab.printed_flag%TYPE;
   BEGIN
      IF (transport_task_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT printed_flag
         INTO  temp_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get_Printed_Flag');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Get_Printed_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Fixed (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ transport_task_tab.fixed%TYPE;
   BEGIN
      IF (transport_task_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT fixed
         INTO  temp_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN Fnd_Boolean_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get_Fixed');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Get_Fixed;


--@IgnoreMissingSysinit
FUNCTION Get_Fixed_Db (
   transport_task_id_ IN NUMBER ) RETURN transport_task_tab.fixed%TYPE
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN transport_task_tab.fixed%TYPE
   IS
      temp_ transport_task_tab.fixed%TYPE;
   BEGIN
      IF (transport_task_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT fixed
         INTO  temp_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get_Fixed_Db');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Get_Fixed_Db;


--@IgnoreMissingSysinit
FUNCTION Get (
   transport_task_id_ IN NUMBER ) RETURN Public_Rec
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN Public_Rec
   IS
      temp_ Public_Rec;
   BEGIN
      IF (transport_task_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT transport_task_id,
             rowid, rowversion, rowkey,
             printed_flag, 
             fixed
         INTO  temp_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      rowkey_ transport_task_tab.rowkey%TYPE;
   BEGIN
      IF (transport_task_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rowkey
         INTO  rowkey_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN rowkey_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get_Objkey');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2 )
   IS
      dummy_ transport_task_tab%ROWTYPE;
   BEGIN
      dummy_ := Lock_By_Id___(objid_, objversion_);
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   Base(info_, objid_, objversion_);
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   transport_task_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'New__');
   Base(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   transport_task_tab%ROWTYPE;
      newrec_   transport_task_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Modify__');
   Base(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ transport_task_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Remove__');
   Base(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Raise_Too_Many_Rows___ (
   transport_task_id_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      transport_task_id_ IN NUMBER,
      methodname_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Too_Many_Rows(Transport_Task_API.lu_name_, NULL, methodname_);
   END Base;

BEGIN
   Base(transport_task_id_, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      transport_task_id_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(Transport_Task_API.lu_name_);
   END Base;

BEGIN
   Base(transport_task_id_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ transport_task_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Exist(Transport_Task_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Exist___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      name_ IN VARCHAR2,
      value_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Item_Format(Transport_Task_API.lu_name_, name_, value_);
   END Base;

BEGIN
   Base(name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ transport_task_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Modified(Transport_Task_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      transport_task_id_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Locked(Transport_Task_API.lu_name_);
   END Base;

BEGIN
   Base(transport_task_id_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      transport_task_id_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Removed(Transport_Task_API.lu_name_);
   END Base;

BEGIN
   Base(transport_task_id_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_      IN VARCHAR2,
      objversion_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        transport_task_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      SELECT *
         INTO  rec_
         FROM  transport_task_tab
         WHERE rowid = objid_
         AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Error_SYS.Record_Locked(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      WHEN no_data_found THEN
         BEGIN
            SELECT 1
               INTO  dummy_
               FROM  transport_task_tab
               WHERE rowid = objid_;
            Raise_Record_Modified___(rec_);
         EXCEPTION
            WHEN no_data_found THEN
               Error_SYS.Record_Removed(lu_name_);
            WHEN too_many_rows THEN
               Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
         END;
   END Base;

BEGIN
   RETURN Base(objid_, objversion_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   transport_task_id_ IN NUMBER) RETURN transport_task_tab%ROWTYPE
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER) RETURN transport_task_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        transport_task_tab%ROWTYPE;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  transport_task_tab
            WHERE transport_task_id = transport_task_id_
            FOR UPDATE;
         RETURN rec_;
      EXCEPTION
         WHEN no_data_found THEN
            Raise_Record_Removed___(transport_task_id_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(transport_task_id_, 'Lock_By_Keys___');
      END;
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   transport_task_id_ IN NUMBER) RETURN transport_task_tab%ROWTYPE
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER) RETURN transport_task_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        transport_task_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  transport_task_tab
            WHERE transport_task_id = transport_task_id_
            FOR UPDATE NOWAIT;
         RETURN rec_;
      EXCEPTION
         WHEN row_locked THEN
            Error_SYS.Record_Locked(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(transport_task_id_, 'Lock_By_Keys___');
         WHEN no_data_found THEN
            BEGIN
               SELECT 1
                  INTO  dummy_
                  FROM  transport_task_tab
                  WHERE transport_task_id = transport_task_id_;
               Raise_Record_Modified___(rec_);
            EXCEPTION
               WHEN no_data_found THEN
                  Raise_Record_Removed___(transport_task_id_);
               WHEN too_many_rows THEN
                  Raise_Too_Many_Rows___(transport_task_id_, 'Lock_By_Keys___');
            END;
      END;
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_ IN VARCHAR2 ) RETURN transport_task_tab%ROWTYPE
   IS
      lu_rec_ transport_task_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  transport_task_tab
         WHERE rowid = objid_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Error_SYS.Record_Removed(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
   END Base;

BEGIN
   RETURN Base(objid_);
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   transport_task_id_ IN NUMBER ) RETURN transport_task_tab%ROWTYPE
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN transport_task_tab%ROWTYPE
   IS
      lu_rec_ transport_task_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN lu_rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get_Object_By_Keys___');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
   BEGIN
      SELECT 1
         INTO  dummy_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
      RETURN TRUE;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Check_Exist___');
   END Base;

BEGIN
   RETURN Base(transport_task_id_);
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objversion_
         FROM  transport_task_tab
         WHERE rowid = objid_;
   EXCEPTION
      WHEN no_data_found THEN
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
   END Base;

BEGIN
   Base(objid_, objversion_);
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Base (
      objid_      IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      transport_task_id_ IN NUMBER )
   IS
   BEGIN
      SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objid_, objversion_
         FROM  transport_task_tab
         WHERE transport_task_id = transport_task_id_;
   EXCEPTION
      WHEN no_data_found THEN
         objid_      := NULL;
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(transport_task_id_, 'Get_Id_Version_By_Keys___');
   END Base;

BEGIN
   Base(objid_, objversion_, transport_task_id_);
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY transport_task_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('TRANSPORT_TASK_ID') THEN
            newrec_.transport_task_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.transport_task_id := TRUE;
         WHEN ('PRINTED_FLAG') THEN
            newrec_.printed_flag := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.printed_flag := TRUE;
         WHEN ('CREATE_DATE') THEN
            newrec_.create_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.create_date := TRUE;
         WHEN ('NOTE_TEXT') THEN
            newrec_.note_text := value_;
            indrec_.note_text := TRUE;
         WHEN ('FIXED') THEN
            newrec_.fixed := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.fixed IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.fixed := TRUE;
         WHEN ('FIXED_DB') THEN
            newrec_.fixed := value_;
            indrec_.fixed := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN transport_task_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN transport_task_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.transport_task_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', rec_.transport_task_id, attr_);
      END IF;
      IF (rec_.printed_flag IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('PRINTED_FLAG', rec_.printed_flag, attr_);
      END IF;
      IF (rec_.create_date IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CREATE_DATE', rec_.create_date, attr_);
      END IF;
      IF (rec_.note_text IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      END IF;
      IF (rec_.fixed IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('FIXED', Fnd_Boolean_API.Decode(rec_.fixed), attr_);
         Client_SYS.Add_To_Attr('FIXED_DB', rec_.fixed, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack___;


FUNCTION Pack___ (
   rec_ IN transport_task_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN transport_task_tab%ROWTYPE,
      indrec_ IN Indicator_Rec ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (indrec_.transport_task_id) THEN
         Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', rec_.transport_task_id, attr_);
      END IF;
      IF (indrec_.printed_flag) THEN
         Client_SYS.Add_To_Attr('PRINTED_FLAG', rec_.printed_flag, attr_);
      END IF;
      IF (indrec_.create_date) THEN
         Client_SYS.Add_To_Attr('CREATE_DATE', rec_.create_date, attr_);
      END IF;
      IF (indrec_.note_text) THEN
         Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      END IF;
      IF (indrec_.fixed) THEN
         Client_SYS.Add_To_Attr('FIXED', Fnd_Boolean_API.Decode(rec_.fixed), attr_);
         Client_SYS.Add_To_Attr('FIXED_DB', rec_.fixed, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_, indrec_);
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN transport_task_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN transport_task_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', rec_.transport_task_id, attr_);
      Client_SYS.Add_To_Attr('PRINTED_FLAG', rec_.printed_flag, attr_);
      Client_SYS.Add_To_Attr('CREATE_DATE', rec_.create_date, attr_);
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      Client_SYS.Add_To_Attr('FIXED', rec_.fixed, attr_);
      Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack_Table___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   
   PROCEDURE Base (
      indrec_ IN OUT NOCOPY Indicator_Rec )
   IS
      empty_indrec_ Indicator_Rec;
   BEGIN
      indrec_ := empty_indrec_;
   END Base;

BEGIN
   Base(indrec_);
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN transport_task_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      rec_ IN transport_task_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.transport_task_id := rec_.transport_task_id IS NOT NULL;
      indrec_.printed_flag := rec_.printed_flag IS NOT NULL;
      indrec_.create_date := rec_.create_date IS NOT NULL;
      indrec_.note_text := rec_.note_text IS NOT NULL;
      indrec_.fixed := rec_.fixed IS NOT NULL;
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN transport_task_tab%ROWTYPE,
   newrec_ IN transport_task_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      oldrec_ IN transport_task_tab%ROWTYPE,
      newrec_ IN transport_task_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.transport_task_id := Validate_SYS.Is_Changed(oldrec_.transport_task_id, newrec_.transport_task_id);
      indrec_.printed_flag := Validate_SYS.Is_Changed(oldrec_.printed_flag, newrec_.printed_flag);
      indrec_.create_date := Validate_SYS.Is_Changed(oldrec_.create_date, newrec_.create_date);
      indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
      indrec_.fixed := Validate_SYS.Is_Changed(oldrec_.fixed, newrec_.fixed);
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(oldrec_, newrec_);
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     transport_task_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     transport_task_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.fixed IS NOT NULL)
      AND (indrec_.fixed)
      AND (Validate_SYS.Is_Changed(oldrec_.fixed, newrec_.fixed)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.fixed);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'FIXED', newrec_.fixed);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE )
   IS
      attr_    VARCHAR2(32000);
      indrec_  Indicator_Rec;
   BEGIN
      Prepare_Insert___(attr_);
      Unpack___(newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE )
   IS
      objid_         VARCHAR2(20);
      objversion_    VARCHAR2(100);
      attr_          VARCHAR2(32000);
      indrec_        Indicator_Rec;
      emptyrec_      transport_task_tab%ROWTYPE;
   BEGIN
      indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END New___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     transport_task_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY transport_task_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     transport_task_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY transport_task_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE transport_task_tab
            SET ROW = newrec_
            WHERE transport_task_id = newrec_.transport_task_id;
      ELSE
         UPDATE transport_task_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'TRANSPORT_TASK_RK') THEN
               Error_SYS.Rowkey_Exist(Transport_Task_API.lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY transport_task_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      newrec_         IN OUT NOCOPY transport_task_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      objid_      VARCHAR2(20);
      objversion_ VARCHAR2(100);
      attr_       VARCHAR2(32000);
      indrec_     Indicator_rec;
      oldrec_     transport_task_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(newrec_.transport_task_id);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(newrec_.transport_task_id);
      END IF;
      indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Base;

BEGIN
   Base(newrec_, lock_mode_wait_);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN transport_task_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.transport_task_id||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

BEGIN
   Base(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN transport_task_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.transport_task_id||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  transport_task_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  transport_task_tab
            WHERE transport_task_id = remrec_.transport_task_id;
      END IF;
   END Base;

BEGIN
   Base(objid_, remrec_);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN transport_task_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN transport_task_tab%ROWTYPE )
   IS
   BEGIN
      Delete___(NULL, remrec_);
   END Base;

BEGIN
   Base(remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY transport_task_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      remrec_         IN OUT NOCOPY transport_task_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      oldrec_     transport_task_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(remrec_.transport_task_id);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(remrec_.transport_task_id);
      END IF;
      Check_Delete___(oldrec_);
      Delete___(NULL, oldrec_);
   END Base;

BEGIN
   Base(remrec_, lock_mode_wait_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_To_Contract (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      to_contract_ transport_task_line_tab.to_contract%TYPE;
      
      CURSOR get_to_contract IS
         SELECT to_contract
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN  get_to_contract;
      FETCH get_to_contract INTO to_contract_;
      CLOSE get_to_contract;
      
      RETURN to_contract_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Contract;


PROCEDURE Set_Printed__ (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      objid_      TRANSPORT_TASK.objid%TYPE;
      objversion_ TRANSPORT_TASK.objversion%TYPE;
      newrec_     TRANSPORT_TASK_TAB%ROWTYPE;
      oldrec_     TRANSPORT_TASK_TAB%ROWTYPE;
      attr_       VARCHAR2(2000);
      indrec_     Indicator_Rec;
   BEGIN
      oldrec_ := Lock_By_Keys___(transport_task_id_);
      IF (oldrec_.printed_flag != 1) OR (oldrec_.printed_flag IS NULL) THEN
         newrec_ := oldrec_;
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('PRINTED_FLAG', 1, attr_);
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE); -- By keys.
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Set_Printed__');
   Core(transport_task_id_);
END Set_Printed__;


--@IgnoreMissingSysinit
FUNCTION Get_Part_No__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      part_no_ transport_task_line_tab.part_no%TYPE;
      
      CURSOR get_part_no IS
         SELECT NVL(part_no, Inventory_Part_Loc_Pallet_API.Get_Part_No(pallet_id)) part_no
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      FOR rec_ IN get_part_no LOOP 
         IF part_no_ IS NULL THEN
            part_no_ := rec_.part_no;
         ELSE
            IF (rec_.part_no != part_no_) THEN
               part_no_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
      
      RETURN part_no_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Part_No__;


--@IgnoreMissingSysinit
FUNCTION Get_Configuration_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      part_no_          transport_task_line_tab.part_no%TYPE;
      configuration_id_ transport_task_line_tab.configuration_id%TYPE;
      
      CURSOR get_configuration_id IS
         SELECT NVL(part_no         , Inventory_Part_Loc_Pallet_API.Get_Part_No         (pallet_id)) part_no,
                NVL(configuration_id, Inventory_Part_Loc_Pallet_API.Get_configuration_id(pallet_id)) configuration_id
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      FOR rec_ IN get_configuration_id LOOP
   
         IF (configuration_id_ IS NULL) THEN
            part_no_          := rec_.part_no;
            configuration_id_ := rec_.configuration_id;
         ELSE
            IF ((rec_.part_no != part_no_) OR (rec_.configuration_id != configuration_id_)) THEN
               configuration_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
      
      RETURN configuration_id_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Configuration_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Ref1__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      order_ref1_ transport_task_line_tab.order_ref1%TYPE;
      
      CURSOR get_order_ref1 IS
         SELECT DISTINCT(order_ref1)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_order_ref1;
      LOOP 
         FETCH get_order_ref1 INTO order_ref1_;
         IF get_order_ref1%ROWCOUNT > 1 THEN
            order_ref1_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_order_ref1%NOTFOUND;
      END LOOP;
      CLOSE get_order_ref1;
      
      RETURN order_ref1_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Order_Ref1__;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Ref2__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      order_ref2_ transport_task_line_tab.order_ref2%TYPE;
      
      CURSOR get_order_ref2 IS
         SELECT DISTINCT(order_ref2)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_order_ref2;
      LOOP 
         FETCH get_order_ref2 INTO order_ref2_;
         IF get_order_ref2%ROWCOUNT > 1 THEN
            order_ref2_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_order_ref2%NOTFOUND;
      END LOOP;
      CLOSE get_order_ref2;
      
      RETURN order_ref2_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Order_Ref2__;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Ref3__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      order_ref3_ transport_task_line_tab.order_ref3%TYPE;
      
      CURSOR get_order_ref3 IS
         SELECT DISTINCT(order_ref3)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_order_ref3;
      LOOP 
         FETCH get_order_ref3 INTO order_ref3_;
         IF get_order_ref3%ROWCOUNT > 1 THEN
            order_ref3_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_order_ref3%NOTFOUND;
      END LOOP;
      CLOSE get_order_ref3;
      
      RETURN order_ref3_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Order_Ref3__;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Ref4__ (
   transport_task_id_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN NUMBER  
   IS
      order_ref4_ transport_task_line_tab.order_ref4%TYPE;
      
      CURSOR get_order_ref4 IS
         SELECT DISTINCT(order_ref4)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_order_ref4;
      LOOP 
         FETCH get_order_ref4 INTO order_ref4_;
         IF get_order_ref4%ROWCOUNT > 1 THEN
            order_ref4_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_order_ref4%NOTFOUND;
      END LOOP;
      CLOSE get_order_ref4;
      
      RETURN order_ref4_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Order_Ref4__;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Type__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
   BEGIN
      RETURN Order_Type_API.Decode(Get_Order_Type_Db__(transport_task_id_));
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Order_Type__;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Type_Db__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      order_type_ transport_task_line_tab.order_type%TYPE;
      
      CURSOR get_order_type IS
         SELECT DISTINCT(order_type)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_order_type;
      LOOP 
         FETCH get_order_type INTO order_type_;
         IF get_order_type%ROWCOUNT > 1 THEN
            order_type_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_order_type%NOTFOUND;
      END LOOP;
      CLOSE get_order_type;
      
      RETURN (order_type_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Order_Type_Db__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Contract__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      from_contract_ transport_task_line_tab.from_contract%TYPE;
      
      CURSOR get_from_contract IS
         SELECT NVL(from_contract, Inventory_Part_Loc_Pallet_API.Get_Site(pallet_id)) from_contract
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN  get_from_contract;
      FETCH get_from_contract INTO from_contract_;
      CLOSE get_from_contract;
      
      RETURN from_contract_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Contract__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Location_No__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      from_location_no_ transport_task_line_tab.from_location_no%TYPE;
      
      CURSOR get_from_location_no IS
         SELECT NVL(from_location_no, Inventory_Part_Loc_Pallet_API.Get_Location_No(pallet_id)) from_location_no
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      FOR rec_ IN get_from_location_no LOOP 
         IF (from_location_no_ IS NULL) THEN
            from_location_no_ := rec_.from_location_no;
         ELSE
            IF (rec_.from_location_no != from_location_no_) THEN
               from_location_no_ := NULL;
               EXIT;
            END IF;
         END IF;      
      END LOOP;
      
      RETURN from_location_no_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Location_No__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Location_No__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      to_location_no_ transport_task_line_tab.to_location_no%TYPE;
      
      CURSOR get_to_location_no IS
         SELECT DISTINCT(to_location_no)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_to_location_no;
      LOOP 
         FETCH get_to_location_no INTO to_location_no_;
         IF get_to_location_no%ROWCOUNT > 1 THEN
            to_location_no_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_to_location_no%NOTFOUND;
      END LOOP;
      CLOSE get_to_location_no;
      
      RETURN to_location_no_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Location_No__;


--@IgnoreMissingSysinit
FUNCTION Get_Destination__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
   BEGIN   
      RETURN Inventory_Part_Destination_API.Decode(Get_Destination_Db__(transport_task_id_));
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Destination__;


--@IgnoreMissingSysinit
FUNCTION Get_Destination_Db__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      destination_ transport_task_line_tab.destination%TYPE;
      
      CURSOR get_destination IS
         SELECT destination
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      FOR rec_ IN get_destination LOOP
         IF (destination_ IS NULL) THEN
            destination_ := rec_.destination;
         ELSE
            IF (destination_ != rec_.destination) THEN
               destination_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
      
      RETURN (destination_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Destination_Db__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Warehouse_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      from_warehouse_id_ VARCHAR2(15);
   
      CURSOR get_from_warehouse_id IS
         SELECT wbb.warehouse_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.from_contract     = wbb.contract
            AND ttl.from_location_no  = wbb.location_no;
   BEGIN
      FOR rec_ IN get_from_warehouse_id LOOP
         IF (from_warehouse_id_ IS NULL) THEN
            from_warehouse_id_ := rec_.warehouse_id;
         ELSE
            IF (from_warehouse_id_ != rec_.warehouse_id) THEN
               from_warehouse_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (from_warehouse_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Warehouse_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Bay_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      from_bay_id_ VARCHAR2(5);
   
      CURSOR get_from_bay_id IS
         SELECT wbb.bay_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.from_contract     = wbb.contract
            AND ttl.from_location_no  = wbb.location_no;
   BEGIN
      FOR rec_ IN get_from_bay_id LOOP
         IF (from_bay_id_ IS NULL) THEN
            from_bay_id_ := rec_.bay_id;
         ELSE
            IF (from_bay_id_ != rec_.bay_id) THEN
               from_bay_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (from_bay_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Bay_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Tier_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      from_tier_id_ VARCHAR2(5);
   
      CURSOR get_from_tier_id IS
         SELECT wbb.tier_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.from_contract     = wbb.contract
            AND ttl.from_location_no  = wbb.location_no;
   BEGIN
      FOR rec_ IN get_from_tier_id LOOP
         IF (from_tier_id_ IS NULL) THEN
            from_tier_id_ := rec_.tier_id;
         ELSE
            IF (from_tier_id_ != rec_.tier_id) THEN
               from_tier_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (from_tier_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Tier_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Row_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      from_row_id_ VARCHAR2(5);
   
      CURSOR get_from_row_id IS
         SELECT wbb.row_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.from_contract     = wbb.contract
            AND ttl.from_location_no  = wbb.location_no;
   BEGIN
      FOR rec_ IN get_from_row_id LOOP
         IF (from_row_id_ IS NULL) THEN
            from_row_id_ := rec_.row_id;
         ELSE
            IF (from_row_id_ != rec_.row_id) THEN
               from_row_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (from_row_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Row_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Bin_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      from_bin_id_ VARCHAR2(5);
   
      CURSOR get_from_bin_id IS
         SELECT wbb.bin_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.from_contract     = wbb.contract
            AND ttl.from_location_no  = wbb.location_no;
   BEGIN
      FOR rec_ IN get_from_bin_id LOOP
         IF (from_bin_id_ IS NULL) THEN
            from_bin_id_ := rec_.bin_id;
         ELSE
            IF (from_bin_id_ != rec_.bin_id) THEN
               from_bin_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (from_bin_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Bin_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Warehouse_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_warehouse_id_ VARCHAR2(15);
   
      CURSOR get_to_warehouse_id IS
         SELECT wbb.warehouse_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_to_warehouse_id LOOP
         IF (to_warehouse_id_ IS NULL) THEN
            to_warehouse_id_ := rec_.warehouse_id;
         ELSE
            IF (to_warehouse_id_ != rec_.warehouse_id) THEN
               to_warehouse_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (to_warehouse_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Warehouse_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Bay_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_bay_id_ VARCHAR2(5);
   
      CURSOR get_to_bay_id IS
         SELECT wbb.bay_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_to_bay_id LOOP
         IF (to_bay_id_ IS NULL) THEN
            to_bay_id_ := rec_.bay_id;
         ELSE
            IF (to_bay_id_ != rec_.bay_id) THEN
               to_bay_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (to_bay_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Bay_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Tier_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_tier_id_ VARCHAR2(5);
   
      CURSOR get_to_tier_id IS
         SELECT wbb.tier_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_to_tier_id LOOP
         IF (to_tier_id_ IS NULL) THEN
            to_tier_id_ := rec_.tier_id;
         ELSE
            IF (to_tier_id_ != rec_.tier_id) THEN
               to_tier_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (to_tier_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Tier_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Row_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_row_id_ VARCHAR2(5);
   
      CURSOR get_to_row_id IS
         SELECT wbb.row_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_to_row_id LOOP
         IF (to_row_id_ IS NULL) THEN
            to_row_id_ := rec_.row_id;
         ELSE
            IF (to_row_id_ != rec_.row_id) THEN
               to_row_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (to_row_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Row_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Bin_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_bin_id_ VARCHAR2(5);
   
      CURSOR get_to_bin_id IS
         SELECT wbb.bin_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_to_bin_id LOOP
         IF (to_bin_id_ IS NULL) THEN
            to_bin_id_ := rec_.bin_id;
         ELSE
            IF (to_bin_id_ != rec_.bin_id) THEN
               to_bin_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (to_bin_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Bin_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Location_Group__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      from_contract_       transport_task_line_tab.from_contract%TYPE;
      from_location_no_    transport_task_line_tab.from_location_no%TYPE;
      from_location_group_ VARCHAR2(5);
   
      CURSOR get_from_location IS
         SELECT NVL(from_contract   , Inventory_Part_Loc_Pallet_API.Get_Site(pallet_id))        from_contract,
                NVL(from_location_no, Inventory_Part_Loc_Pallet_API.Get_Location_No(pallet_id)) from_location_no
           FROM transport_task_line_tab
          WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN  get_from_location;
      FETCH get_from_location INTO from_contract_, from_location_no_;
      CLOSE get_from_location;
   
      from_location_group_ := Inventory_Location_API.Get_Location_Group(from_contract_, from_location_no_);
   
      RETURN (from_location_group_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Location_Group__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Location_Group__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_location_group_ VARCHAR2(5);
   
      CURSOR get_to_location_group IS
         SELECT wbb.location_group
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_to_location_group LOOP
         IF (to_location_group_ IS NULL) THEN
            to_location_group_ := rec_.location_group;
         ELSE
            IF (to_location_group_ != rec_.location_group) THEN
               to_location_group_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (to_location_group_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Location_Group__;


--@IgnoreMissingSysinit
FUNCTION Get_From_Location_Type__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN (Inventory_Location_Group_API.Get_Inventory_Location_Type(Get_From_Location_Group__(transport_task_id_)));
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_From_Location_Type__;


--@IgnoreMissingSysinit
FUNCTION Get_To_Location_Type__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      to_location_type_ VARCHAR2(20);
   
      CURSOR get_to_location_type IS
         SELECT ilg.inventory_location_type
           FROM transport_task_line_tab      ttl,
                warehouse_bay_bin_tab        wbb,
                inventory_location_group_tab ilg
          WHERE ttl.transport_task_id = transport_task_id_
            AND ttl.to_contract       = wbb.contract
            AND ttl.to_location_no    = wbb.location_no
            AND ilg.location_group    = wbb.location_group;
   BEGIN
      FOR rec_ IN get_to_location_type LOOP
         IF (to_location_type_ IS NULL) THEN
            to_location_type_ := rec_.inventory_location_type;
         ELSE
            IF (to_location_type_ != rec_.inventory_location_type) THEN
               to_location_type_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (Inventory_Location_Type_API.Decode(to_location_type_));
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_To_Location_Type__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Location_No__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2 
   IS
      forward_to_location_no_ transport_task_line_tab.forward_to_location_no%TYPE;
      
      CURSOR get_forward_to_location_no IS
         SELECT DISTINCT(forward_to_location_no)
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
      OPEN get_forward_to_location_no;
      LOOP 
         FETCH get_forward_to_location_no INTO forward_to_location_no_;
         IF get_forward_to_location_no%ROWCOUNT > 1 THEN
            forward_to_location_no_ := NULL;
            EXIT;
         END IF;
         EXIT WHEN get_forward_to_location_no%NOTFOUND;
      END LOOP;
      CLOSE get_forward_to_location_no;
      
      RETURN forward_to_location_no_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Location_No__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Warehouse_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_warehouse_id_ VARCHAR2(15);
   
      CURSOR get_forward_to_warehouse_id IS
         SELECT wbb.warehouse_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id       = transport_task_id_
            AND ttl.to_contract             = wbb.contract
            AND ttl.forward_to_location_no  = wbb.location_no;
   BEGIN
      FOR rec_ IN get_forward_to_warehouse_id LOOP
         IF (forward_to_warehouse_id_ IS NULL) THEN
            forward_to_warehouse_id_ := rec_.warehouse_id;
         ELSE
            IF (forward_to_warehouse_id_ != rec_.warehouse_id) THEN
               forward_to_warehouse_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (forward_to_warehouse_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Warehouse_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Bay_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_bay_id_ VARCHAR2(5);
   
      CURSOR get_forward_to_bay_id IS
         SELECT wbb.bay_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id        = transport_task_id_
            AND ttl.to_contract              = wbb.contract
            AND ttl.forward_to_location_no   = wbb.location_no;
   BEGIN
      FOR rec_ IN get_forward_to_bay_id LOOP
         IF (forward_to_bay_id_ IS NULL) THEN
            forward_to_bay_id_ := rec_.bay_id;
         ELSE
            IF (forward_to_bay_id_ != rec_.bay_id) THEN
               forward_to_bay_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (forward_to_bay_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Bay_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Tier_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_tier_id_ VARCHAR2(5);
   
      CURSOR get_forward_to_tier_id IS
         SELECT wbb.tier_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id        = transport_task_id_
            AND ttl.to_contract              = wbb.contract
            AND ttl.forward_to_location_no   = wbb.location_no;
   BEGIN
      FOR rec_ IN get_forward_to_tier_id LOOP
         IF (forward_to_tier_id_ IS NULL) THEN
            forward_to_tier_id_ := rec_.tier_id;
         ELSE
            IF (forward_to_tier_id_ != rec_.tier_id) THEN
               forward_to_tier_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (forward_to_tier_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Tier_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Row_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_row_id_ VARCHAR2(5);
   
      CURSOR get_forward_to_row_id IS
         SELECT wbb.row_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id        = transport_task_id_
            AND ttl.to_contract              = wbb.contract
            AND ttl.forward_to_location_no   = wbb.location_no;
   BEGIN
      FOR rec_ IN get_forward_to_row_id LOOP
         IF (forward_to_row_id_ IS NULL) THEN
            forward_to_row_id_ := rec_.row_id;
         ELSE
            IF (forward_to_row_id_ != rec_.row_id) THEN
               forward_to_row_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (forward_to_row_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Row_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Bin_Id__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_bin_id_ VARCHAR2(5);
   
      CURSOR get_forward_to_bin_id IS
         SELECT wbb.bin_id
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id         = transport_task_id_
            AND ttl.to_contract               = wbb.contract
            AND ttl.forward_to_location_no    = wbb.location_no;
   BEGIN
      FOR rec_ IN get_forward_to_bin_id LOOP
         IF (forward_to_bin_id_ IS NULL) THEN
            forward_to_bin_id_ := rec_.bin_id;
         ELSE
            IF (forward_to_bin_id_ != rec_.bin_id) THEN
               forward_to_bin_id_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (forward_to_bin_id_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Bin_Id__;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Location_Grp__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_location_group_ VARCHAR2(5);
   
      CURSOR get_forward_to_location_group IS
         SELECT wbb.location_group
           FROM transport_task_line_tab ttl,
                warehouse_bay_bin_tab   wbb
          WHERE ttl.transport_task_id      = transport_task_id_
            AND ttl.to_contract            = wbb.contract
            AND ttl.forward_to_location_no = wbb.location_no;
   BEGIN
      FOR rec_ IN get_forward_to_location_group LOOP
         IF (forward_to_location_group_ IS NULL) THEN
            forward_to_location_group_ := rec_.location_group;
         ELSE
            IF (forward_to_location_group_ != rec_.location_group) THEN
               forward_to_location_group_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (forward_to_location_group_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Location_Grp__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_All (
   transport_task_id_        IN NUMBER,
   part_tracking_session_id_ IN NUMBER DEFAULT NULL )
IS
   
   PROCEDURE Core (
      transport_task_id_        IN NUMBER,
      part_tracking_session_id_ IN NUMBER DEFAULT NULL )
   IS
   BEGIN
      
      Execute___(transport_task_id_,
                 part_tracking_session_id_,
                 only_status_picked_ => FALSE);
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Execute_All');
   Core(transport_task_id_, part_tracking_session_id_);
END Execute_All;


PROCEDURE Execute_Picked (
   transport_task_id_        IN NUMBER,
   part_tracking_session_id_ IN NUMBER DEFAULT NULL )
IS
   
   PROCEDURE Core (
      transport_task_id_        IN NUMBER,
      part_tracking_session_id_ IN NUMBER DEFAULT NULL )
   IS
   BEGIN
      
      Execute___(transport_task_id_,
                 part_tracking_session_id_,
                 only_status_picked_ => TRUE);
      
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Execute_Picked');
   Core(transport_task_id_, part_tracking_session_id_);
END Execute_Picked;


PROCEDURE New_Or_Add_Nopall_To_Existing (
   transport_task_id_          OUT NUMBER,
   quantity_added_             OUT NUMBER,
   part_no_                    IN  VARCHAR2,
   configuration_id_           IN  VARCHAR2,
   from_contract_              IN  VARCHAR2,
   from_location_no_           IN  VARCHAR2,
   to_contract_                IN  VARCHAR2,
   to_location_no_             IN  VARCHAR2,
   destination_                IN  VARCHAR2,
   order_type_                 IN  VARCHAR2,
   order_ref1_                 IN  VARCHAR2,
   order_ref2_                 IN  VARCHAR2,
   order_ref3_                 IN  VARCHAR2,
   order_ref4_                 IN  VARCHAR2,
   lot_batch_no_               IN  VARCHAR2,
   serial_no_                  IN  VARCHAR2,
   eng_chg_level_              IN  VARCHAR2,
   waiv_dev_rej_no_            IN  VARCHAR2,
   activity_seq_               IN  NUMBER,
   quantity_to_add_            IN  NUMBER,
   requested_date_finished_    IN  DATE     DEFAULT NULL,
   note_text_                  IN  VARCHAR2 DEFAULT NULL,
   allow_deviating_avail_ctrl_ IN  VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE )
IS
   
   PROCEDURE Core (
      transport_task_id_          OUT NUMBER,
      quantity_added_             OUT NUMBER,
      part_no_                    IN  VARCHAR2,
      configuration_id_           IN  VARCHAR2,
      from_contract_              IN  VARCHAR2,
      from_location_no_           IN  VARCHAR2,
      to_contract_                IN  VARCHAR2,
      to_location_no_             IN  VARCHAR2,
      destination_                IN  VARCHAR2,
      order_type_                 IN  VARCHAR2,
      order_ref1_                 IN  VARCHAR2,
      order_ref2_                 IN  VARCHAR2,
      order_ref3_                 IN  VARCHAR2,
      order_ref4_                 IN  VARCHAR2,
      lot_batch_no_               IN  VARCHAR2,
      serial_no_                  IN  VARCHAR2,
      eng_chg_level_              IN  VARCHAR2,
      waiv_dev_rej_no_            IN  VARCHAR2,
      activity_seq_               IN  NUMBER,
      quantity_to_add_            IN  NUMBER,
      requested_date_finished_    IN  DATE     DEFAULT NULL,
      note_text_                  IN  VARCHAR2 DEFAULT NULL,
      allow_deviating_avail_ctrl_ IN  VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE )
   IS
      serial_no_tab_         Part_Serial_Catalog_API.Serial_No_Tab;
      local_quantity_to_add_ NUMBER;
      dummy_tab_             Part_Serial_Catalog_API.Serial_No_Tab;
   BEGIN
   
      IF (serial_no_ = '*') THEN
         local_quantity_to_add_ := quantity_to_add_;
      ELSE
         serial_no_tab_(1).serial_no := serial_no_;
         local_quantity_to_add_ := NULL;
      END IF;
   
      New_Or_Add_To_Existing(transport_task_id_,
                             quantity_added_,
                             dummy_tab_,
                             part_no_,
                             configuration_id_,
                             from_contract_,
                             from_location_no_,
                             to_contract_,
                             to_location_no_,
                             destination_,
                             order_type_,
                             order_ref1_,
                             order_ref2_,
                             order_ref3_,
                             order_ref4_,
                             lot_batch_no_,
                             serial_no_tab_,
                             eng_chg_level_,
                             waiv_dev_rej_no_,
                             activity_seq_,
                             local_quantity_to_add_,
                             NULL,
                             requested_date_finished_,
                             note_text_,
                             allow_deviating_avail_ctrl_);
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'New_Or_Add_Nopall_To_Existing');
   Core(transport_task_id_, quantity_added_, part_no_, configuration_id_, from_contract_, from_location_no_, to_contract_, to_location_no_, destination_, order_type_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, quantity_to_add_, requested_date_finished_, note_text_, allow_deviating_avail_ctrl_);
END New_Or_Add_Nopall_To_Existing;


PROCEDURE New_Or_Add_Pallet_To_Existing (
   transport_task_id_          OUT NUMBER,
   quantity_added_             OUT NUMBER,
   to_contract_                IN  VARCHAR2,
   to_location_no_             IN  VARCHAR2,
   destination_                IN  VARCHAR2,
   order_type_                 IN  VARCHAR2,
   order_ref1_                 IN  VARCHAR2,
   order_ref2_                 IN  VARCHAR2,
   order_ref3_                 IN  VARCHAR2,
   order_ref4_                 IN  VARCHAR2,
   pallet_id_                  IN  VARCHAR2,
   requested_date_finished_    IN  DATE     DEFAULT NULL,
   note_text_                  IN  VARCHAR2 DEFAULT NULL,
   allow_deviating_avail_ctrl_ IN  VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE )
IS
   
   PROCEDURE Core (
      transport_task_id_          OUT NUMBER,
      quantity_added_             OUT NUMBER,
      to_contract_                IN  VARCHAR2,
      to_location_no_             IN  VARCHAR2,
      destination_                IN  VARCHAR2,
      order_type_                 IN  VARCHAR2,
      order_ref1_                 IN  VARCHAR2,
      order_ref2_                 IN  VARCHAR2,
      order_ref3_                 IN  VARCHAR2,
      order_ref4_                 IN  VARCHAR2,
      pallet_id_                  IN  VARCHAR2,
      requested_date_finished_    IN  DATE     DEFAULT NULL,
      note_text_                  IN  VARCHAR2 DEFAULT NULL,
      allow_deviating_avail_ctrl_ IN  VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE )
   IS
      dummy_tab_ Part_Serial_Catalog_API.Serial_No_Tab;
      empty_tab_ Part_Serial_Catalog_API.Serial_No_Tab;
   BEGIN
      
      New_Or_Add_To_Existing(transport_task_id_       => transport_task_id_,
                             quantity_added_          => quantity_added_,
                             serials_added_           => dummy_tab_,
                             part_no_                 => NULL,
                             configuration_id_        => NULL,
                             from_contract_           => NULL,
                             from_location_no_        => NULL,
                             to_contract_             => to_contract_,
                             to_location_no_          => to_location_no_,
                             destination_             => destination_,
                             order_type_              => order_type_,
                             order_ref1_              => order_ref1_,
                             order_ref2_              => order_ref2_,
                             order_ref3_              => order_ref3_,
                             order_ref4_              => order_ref4_,
                             lot_batch_no_            => NULL,
                             serial_no_tab_           => empty_tab_,
                             eng_chg_level_           => NULL,
                             waiv_dev_rej_no_         => NULL,
                             activity_seq_            => NULL,
                             quantity_to_add_         => NULL,
                             pallet_id_               => pallet_id_,
                             requested_date_finished_ => requested_date_finished_,
                             note_text_               => note_text_,
                             allow_deviating_avail_ctrl_ =>  allow_deviating_avail_ctrl_);
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'New_Or_Add_Pallet_To_Existing');
   Core(transport_task_id_, quantity_added_, to_contract_, to_location_no_, destination_, order_type_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, pallet_id_, requested_date_finished_, note_text_, allow_deviating_avail_ctrl_);
END New_Or_Add_Pallet_To_Existing;


PROCEDURE New_Or_Add_To_Existing (
   transport_task_id_             OUT NUMBER,
   quantity_added_                OUT NUMBER,
   serials_added_                 OUT Part_Serial_Catalog_API.Serial_No_Tab,
   part_no_                    IN     VARCHAR2,
   configuration_id_           IN     VARCHAR2,
   from_contract_              IN     VARCHAR2,
   from_location_no_           IN     VARCHAR2,
   to_contract_                IN     VARCHAR2,
   to_location_no_             IN     VARCHAR2,
   destination_                IN     VARCHAR2,
   order_type_                 IN     VARCHAR2,
   order_ref1_                 IN     VARCHAR2,
   order_ref2_                 IN     VARCHAR2,
   order_ref3_                 IN     VARCHAR2,
   order_ref4_                 IN     VARCHAR2,
   lot_batch_no_               IN     VARCHAR2,
   serial_no_tab_              IN     Part_Serial_Catalog_API.Serial_No_Tab,
   eng_chg_level_              IN     VARCHAR2,
   waiv_dev_rej_no_            IN     VARCHAR2,
   activity_seq_               IN     NUMBER,
   quantity_to_add_            IN     NUMBER,
   pallet_id_                  IN     VARCHAR2,
   requested_date_finished_    IN     DATE     DEFAULT NULL,
   note_text_                  IN     VARCHAR2 DEFAULT NULL,
   allow_deviating_avail_ctrl_ IN     VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE,
   putaway_event_id_           IN     NUMBER   DEFAULT NULL )
IS
   
   PROCEDURE Core (
      transport_task_id_             OUT NUMBER,
      quantity_added_                OUT NUMBER,
      serials_added_                 OUT Part_Serial_Catalog_API.Serial_No_Tab,
      part_no_                    IN     VARCHAR2,
      configuration_id_           IN     VARCHAR2,
      from_contract_              IN     VARCHAR2,
      from_location_no_           IN     VARCHAR2,
      to_contract_                IN     VARCHAR2,
      to_location_no_             IN     VARCHAR2,
      destination_                IN     VARCHAR2,
      order_type_                 IN     VARCHAR2,
      order_ref1_                 IN     VARCHAR2,
      order_ref2_                 IN     VARCHAR2,
      order_ref3_                 IN     VARCHAR2,
      order_ref4_                 IN     VARCHAR2,
      lot_batch_no_               IN     VARCHAR2,
      serial_no_tab_              IN     Part_Serial_Catalog_API.Serial_No_Tab,
      eng_chg_level_              IN     VARCHAR2,
      waiv_dev_rej_no_            IN     VARCHAR2,
      activity_seq_               IN     NUMBER,
      quantity_to_add_            IN     NUMBER,
      pallet_id_                  IN     VARCHAR2,
      requested_date_finished_    IN     DATE     DEFAULT NULL,
      note_text_                  IN     VARCHAR2 DEFAULT NULL,
      allow_deviating_avail_ctrl_ IN     VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE,
      putaway_event_id_           IN     NUMBER   DEFAULT NULL )
   IS
      found_transport_task_id_   NUMBER;
      current_transport_task_id_ NUMBER := -999999999;
      destination_db_            VARCHAR2(200);
      order_type_db_             VARCHAR2(200);
      newrec_                    TRANSPORT_TASK_TAB%ROWTYPE;
      objid_                     TRANSPORT_TASK.objid%TYPE;
      objversion_                TRANSPORT_TASK.objversion%TYPE;
      attr_                      VARCHAR2(2000);
      rowtype_                   transport_task_line_tab.ROWTYPE%TYPE;
      local_from_contract_       transport_task_line_tab.from_contract%TYPE;
      local_from_location_no_    transport_task_line_tab.from_location_no%TYPE;
      local_part_no_             transport_task_line_tab.part_no%TYPE;
      local_configuration_id_    transport_task_line_tab.configuration_id%TYPE;
      local_serial_no_           transport_task_line_tab.serial_no%TYPE := '*';
      keys_and_qty_rec_          Inventory_Part_In_Stock_API.Keys_And_Qty_Rec;
      from_contract_rec_         Site_Invent_Info_API.Public_Rec;
      single_from_warehouse_id_  VARCHAR2(5);
      single_from_bay_id_        VARCHAR2(5);
      single_from_tier_id_       VARCHAR2(5);
      single_from_row_id_        VARCHAR2(5);
      single_from_bin_id_        VARCHAR2(5);
      single_to_warehouse_id_    VARCHAR2(5);
      single_to_bay_id_          VARCHAR2(5);
      single_to_tier_id_         VARCHAR2(5);
      single_to_row_id_          VARCHAR2(5);
      single_to_bin_id_          VARCHAR2(5);
      single_ref_type_           VARCHAR2(5);
      single_ref1_               VARCHAR2(5);
      single_ref2_               VARCHAR2(5);
      single_ref3_               VARCHAR2(5);
      single_ref4_               VARCHAR2(5);
      single_part_no_            VARCHAR2(5);
      single_configuration_id_   VARCHAR2(5);
      local_to_location_no_      VARCHAR2(35);
      forward_to_location_no_    VARCHAR2(35);
      row_single_to_warehouse_id_    VARCHAR2(5);
      curr_single_from_warehouse_id_ VARCHAR2(5);
      curr_single_from_bay_id_       VARCHAR2(5);
      curr_single_from_tier_id_      VARCHAR2(5);
      curr_single_from_row_id_       VARCHAR2(5);
      curr_single_from_bin_id_       VARCHAR2(5);
      curr_single_to_warehouse_id_   VARCHAR2(5);
      curr_single_to_bay_id_         VARCHAR2(5);
      curr_single_to_tier_id_        VARCHAR2(5);
      curr_single_to_row_id_         VARCHAR2(5);
      curr_single_to_bin_id_         VARCHAR2(5);
      row_single_from_warehouse_id_  VARCHAR2(5);
      row_single_from_bay_id_        VARCHAR2(5);
      row_single_from_tier_id_       VARCHAR2(5);
      row_single_from_row_id_        VARCHAR2(5);
      row_single_from_bin_id_        VARCHAR2(5);
       row_single_to_bay_id_         VARCHAR2(5);
      row_single_to_tier_id_         VARCHAR2(5);
      row_single_to_row_id_          VARCHAR2(5);
      row_single_to_bin_id_          VARCHAR2(5);
      from_location_group_       warehouse_bay_bin_tab.location_group%TYPE;
      from_warehouse_id_         warehouse_bay_bin_tab.warehouse_id%TYPE;
      from_bay_id_               warehouse_bay_bin_tab.bay_id%TYPE;
      from_tier_id_              warehouse_bay_bin_tab.tier_id%TYPE;
      from_row_id_               warehouse_bay_bin_tab.row_id%TYPE;
      from_bin_id_               warehouse_bay_bin_tab.bin_id%TYPE;
      to_warehouse_id_           warehouse_bay_bin_tab.warehouse_id%TYPE;
      to_bay_id_                 warehouse_bay_bin_tab.bay_id%TYPE;
      to_tier_id_                warehouse_bay_bin_tab.tier_id%TYPE;
      to_row_id_                 warehouse_bay_bin_tab.row_id%TYPE;
      to_bin_id_                 warehouse_bay_bin_tab.bin_id%TYPE;
      row_from_location_group_   warehouse_bay_bin_tab.location_group%TYPE;
      row_from_warehouse_id_     warehouse_bay_bin_tab.warehouse_id%TYPE;
      row_from_bay_id_           warehouse_bay_bin_tab.bay_id%TYPE;
      row_from_tier_id_          warehouse_bay_bin_tab.tier_id%TYPE;
      row_from_row_id_           warehouse_bay_bin_tab.row_id%TYPE;
      row_from_bin_id_           warehouse_bay_bin_tab.bin_id%TYPE;
      row_to_warehouse_id_       warehouse_bay_bin_tab.warehouse_id%TYPE;
      row_to_bay_id_             warehouse_bay_bin_tab.bay_id%TYPE;
      row_to_tier_id_            warehouse_bay_bin_tab.tier_id%TYPE;
      row_to_row_id_             warehouse_bay_bin_tab.row_id%TYPE;
      row_to_bin_id_             warehouse_bay_bin_tab.bin_id%TYPE;
      indrec_                    Indicator_Rec;
   
      CURSOR get_task_id IS
         SELECT ttl.transport_task_id,
                ttl.from_contract,
                ttl.from_location_no,
                ttl.to_contract,
                ttl.to_location_no,
                ttl.forward_to_location_no
           FROM TRANSPORT_TASK_TAB                  tt,
                transport_task_line_tab ttl
         WHERE tt.transport_task_id                = ttl.transport_task_id
           AND ((ttl.part_no                       = local_part_no_         ) OR (single_part_no_            = db_false_))
           AND ((ttl.configuration_id              = local_configuration_id_) OR (single_configuration_id_   = db_false_))
           AND ((NVL(ttl.order_ref4, number_null_) = NVL(order_ref4_   , number_null_)) OR (single_ref4_     = db_false_))
           AND ((NVL(ttl.order_ref3, string_null_) = NVL(order_ref3_   , string_null_)) OR (single_ref3_     = db_false_))
           AND ((NVL(ttl.order_ref2, string_null_) = NVL(order_ref2_   , string_null_)) OR (single_ref2_     = db_false_))
           AND ((NVL(ttl.order_ref1, string_null_) = NVL(order_ref1_   , string_null_)) OR (single_ref1_     = db_false_))
           AND ((NVL(ttl.order_type, string_null_) = NVL(order_type_db_, string_null_)) OR (single_ref_type_ = db_false_))
           AND tt.printed_flag                     = 0
           AND tt.fixed                            = db_false_
           AND ttl.destination                     = destination_db_
           AND ttl.to_contract                     = to_contract_
           AND ttl.from_contract                   = local_from_contract_
           AND ttl.transport_task_status           = Transport_Task_Status_API.db_created
           AND ttl.ROWTYPE                         = rowtype_
         ORDER BY ttl.transport_task_id;
   BEGIN
      local_to_location_no_ := to_location_no_;
      
      IF (serial_no_tab_.COUNT > 0) THEN
         local_serial_no_ := serial_no_tab_(serial_no_tab_.FIRST).serial_no;
      END IF;
      
      order_type_db_  := Order_Type_API.Encode(order_type_);
      destination_db_ := Inventory_Part_Destination_API.Encode(destination_);
      
      Transport_Task_Manager_API.Set_Transport_Locations(forward_to_location_no_,
                                                         local_to_location_no_,
                                                         from_contract_,
                                                         from_location_no_,
                                                         to_contract_,
                                                         part_no_,
                                                         configuration_id_,
                                                         order_type_db_,
                                                         order_ref1_,
                                                         order_ref2_,
                                                         order_ref3_,
                                                         order_ref4_,
                                                         lot_batch_no_         => lot_batch_no_,
                                                         serial_no_            => local_serial_no_,
                                                         eng_chg_level_        => eng_chg_level_,
                                                         waiv_dev_rej_no_      => waiv_dev_rej_no_,
                                                         quantity_             => quantity_to_add_,
                                                         activity_seq_         => activity_seq_,
                                                         allways_use_drop_off_ => TRUE,
                                                         putaway_event_id_     => putaway_event_id_);
                                                         
      IF (pallet_id_ IS NULL) THEN
         rowtype_                := 'TransportTaskLineNopall';
         local_from_contract_    := from_contract_;
         local_from_location_no_ := from_location_no_;
         local_part_no_          := part_no_;
         local_configuration_id_ := configuration_id_;
      ELSE
         rowtype_                := 'TransportTaskLinePallet';
         keys_and_qty_rec_       := Inventory_Part_Loc_Pallet_API.Get_Keys_And_Quantity(pallet_id_);
         local_from_contract_    := keys_and_qty_rec_.contract;
         local_from_location_no_ := keys_and_qty_rec_.location_no;
         local_part_no_          := keys_and_qty_rec_.part_no;
         local_configuration_id_ := keys_and_qty_rec_.configuration_id;
      END IF;
   
      Warehouse_Bay_Bin_API.Get_Location_Strings(from_warehouse_id_,
                                                 from_bay_id_,
                                                 from_tier_id_,
                                                 from_row_id_,
                                                 from_bin_id_,
                                                 local_from_contract_,
                                                 local_from_location_no_);
   
      Warehouse_Bay_Bin_API.Get_Location_Strings(to_warehouse_id_,
                                                 to_bay_id_,
                                                 to_tier_id_,
                                                 to_row_id_,
                                                 to_bin_id_,
                                                 to_contract_,
                                                 local_to_location_no_);
   
      from_location_group_ := Warehouse_Bay_Bin_API.Get_Location_Group(local_from_contract_,
                                                                       from_warehouse_id_,
                                                                       from_bay_id_,
                                                                       from_tier_id_,
                                                                       from_row_id_,
                                                                       from_bin_id_);
   
      from_contract_rec_ := Site_Invent_Info_API.Get(local_from_contract_);
   
      Get_Whse_Cons_Level_Flags___(single_from_warehouse_id_,
                                   single_from_bay_id_,
                                   single_from_tier_id_,
                                   single_from_row_id_,
                                   single_from_bin_id_,
                                   Warehouse_API.Get_Transport_From_Whse_Lvl_Db(from_contract_, from_warehouse_id_));
   
      Get_Whse_Cons_Level_Flags___(single_to_warehouse_id_,
                                   single_to_bay_id_,
                                   single_to_tier_id_,
                                   single_to_row_id_,
                                   single_to_bin_id_,
                                   Warehouse_API.Get_Transport_To_Whse_Lvl_Db(to_contract_, to_warehouse_id_));
   
      Get_Part_Cons_Level_Flags___(single_part_no_,
                                   single_configuration_id_,
                                   from_contract_rec_.transport_part_cons_level);
   
      Get_Ref_Cons_Level_Flags___(single_ref_type_,
                                  single_ref1_,
                                  single_ref2_,
                                  single_ref3_,
                                  single_ref4_,
                                  from_contract_rec_.transport_ref_cons_level);
                                    
      FOR rec_ IN get_task_id LOOP
         Warehouse_Bay_Bin_API.Get_Location_Strings(row_from_warehouse_id_,
                                                    row_from_bay_id_,
                                                    row_from_tier_id_,
                                                    row_from_row_id_,
                                                    row_from_bin_id_,
                                                    rec_.from_contract,
                                                    rec_.from_location_no);
         
         Warehouse_Bay_Bin_API.Get_Location_Strings(row_to_warehouse_id_,
                                                    row_to_bay_id_,
                                                    row_to_tier_id_,
                                                    row_to_row_id_,
                                                    row_to_bin_id_,
                                                    rec_.to_contract,
                                                    rec_.to_location_no);
            
         Get_Whse_Cons_Level_Flags___(row_single_from_warehouse_id_,
                                      row_single_from_bay_id_,
                                      row_single_from_tier_id_,
                                      row_single_from_row_id_,
                                      row_single_from_bin_id_,
                                      Warehouse_API.Get_Transport_From_Whse_Lvl_Db(rec_.from_contract, row_from_warehouse_id_));
   
         Get_Whse_Cons_Level_Flags___(row_single_to_warehouse_id_,
                                      row_single_to_bay_id_,
                                      row_single_to_tier_id_,
                                      row_single_to_row_id_,
                                      row_single_to_bin_id_,
                                      Warehouse_API.Get_Transport_To_Whse_Lvl_Db(rec_.to_contract, row_to_warehouse_id_));
   
         -- Take the most restricted setting from either existing row or new transport request and use as current
         curr_single_from_warehouse_id_ := CASE single_from_warehouse_id_ WHEN db_true_ THEN db_true_ ELSE row_single_from_warehouse_id_ END;
         curr_single_from_bay_id_       := CASE single_from_bay_id_       WHEN db_true_ THEN db_true_ ELSE row_single_from_bay_id_       END;
         curr_single_from_row_id_       := CASE single_from_row_id_       WHEN db_true_ THEN db_true_ ELSE row_single_from_row_id_       END;
         curr_single_from_tier_id_      := CASE single_from_tier_id_      WHEN db_true_ THEN db_true_ ELSE row_single_from_tier_id_      END;
         curr_single_from_bin_id_       := CASE single_from_bin_id_       WHEN db_true_ THEN db_true_ ELSE row_single_from_bin_id_       END;
         curr_single_to_warehouse_id_   := CASE single_to_warehouse_id_   WHEN db_true_ THEN db_true_ ELSE row_single_to_warehouse_id_   END;
         curr_single_to_bay_id_         := CASE single_to_bay_id_         WHEN db_true_ THEN db_true_ ELSE row_single_to_bay_id_         END;
         curr_single_to_row_id_         := CASE single_to_row_id_         WHEN db_true_ THEN db_true_ ELSE row_single_to_row_id_         END;
         curr_single_to_tier_id_        := CASE single_to_tier_id_        WHEN db_true_ THEN db_true_ ELSE row_single_to_tier_id_        END;
         curr_single_to_bin_id_         := CASE single_to_bin_id_         WHEN db_true_ THEN db_true_ ELSE row_single_to_bin_id_         END;
   
         row_from_location_group_ := Warehouse_Bay_Bin_API.Get_Location_Group(rec_.from_contract,
                                                                              row_from_warehouse_id_,
                                                                              row_from_bay_id_,
                                                                              row_from_tier_id_,
                                                                              row_from_row_id_,
                                                                              row_from_bin_id_);
   
         IF (((row_from_warehouse_id_  = from_warehouse_id_) OR (curr_single_from_warehouse_id_ = db_false_)) AND
             ((row_from_bay_id_        = from_bay_id_      ) OR (curr_single_from_bay_id_       = db_false_)) AND
             ((row_from_tier_id_       = from_tier_id_     ) OR (curr_single_from_tier_id_      = db_false_)) AND
             ((row_from_row_id_        = from_row_id_      ) OR (curr_single_from_row_id_       = db_false_)) AND
             ((row_from_bin_id_        = from_bin_id_      ) OR (curr_single_from_bin_id_       = db_false_)) AND
             ((row_to_warehouse_id_    = to_warehouse_id_  ) OR (curr_single_to_warehouse_id_   = db_false_)) AND
             ((row_to_bay_id_          = to_bay_id_        ) OR (curr_single_to_bay_id_         = db_false_)) AND
             ((row_to_tier_id_         = to_tier_id_       ) OR (curr_single_to_tier_id_        = db_false_)) AND
             ((row_to_row_id_          = to_row_id_        ) OR (curr_single_to_row_id_         = db_false_)) AND
             ((row_to_bin_id_          = to_bin_id_        ) OR (curr_single_to_bin_id_         = db_false_)) AND
             (row_from_location_group_ = from_location_group_)) THEN
   
            IF (rec_.transport_task_id != current_transport_task_id_) THEN
               IF (NOT Transport_Task_Manager_API.Warehouse_Task_Is_Started_(rec_.transport_task_id)) THEN
                  IF (NOT Has_Picked_Or_Executed_Line(rec_.transport_task_id)) THEN
                     IF ((pallet_id_ IS NULL) OR (from_contract_rec_.transport_max_pallets IS NULL) OR
                         (Transport_Task_Line_API.Count_Lines(rec_.transport_task_id) < from_contract_rec_.transport_max_pallets)) THEN
                        found_transport_task_id_ := rec_.transport_task_id;
                        EXIT;
                     END IF;
                  END IF;
               END IF;
               current_transport_task_id_ := rec_.transport_task_id;
            END IF;
         END IF;
      END LOOP;
   
      IF (found_transport_task_id_ IS NULL) THEN
         -- Add new transport task
         IF (note_text_ IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('NOTE_TEXT', note_text_, attr_);
         END IF;
   
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
   
         found_transport_task_id_ := newrec_.transport_task_id;
      END IF;
   
      IF (pallet_id_ IS NULL) THEN
         Transport_Task_Line_Nopall_API.New_Or_Add_To_Existing_(quantity_added_             => quantity_added_,
                                                                serials_added_              => serials_added_,
                                                                transport_task_id_          => found_transport_task_id_,
                                                                part_no_                    => local_part_no_,
                                                                configuration_id_           => local_configuration_id_,
                                                                from_contract_              => local_from_contract_,
                                                                from_location_no_           => local_from_location_no_,
                                                                to_contract_                => to_contract_,
                                                                to_location_no_             => local_to_location_no_,
                                                                forward_to_location_no_     => forward_to_location_no_,
                                                                destination_db_             => destination_db_,
                                                                order_type_db_              => order_type_db_,
                                                                order_ref1_                 => order_ref1_,
                                                                order_ref2_                 => order_ref2_,
                                                                order_ref3_                 => order_ref3_,
                                                                order_ref4_                 => order_ref4_,
                                                                lot_batch_no_               => lot_batch_no_,
                                                                serial_no_tab_              => serial_no_tab_,
                                                                eng_chg_level_              => eng_chg_level_,
                                                                waiv_dev_rej_no_            => waiv_dev_rej_no_,
                                                                activity_seq_               => activity_seq_,
                                                                quantity_to_add_            => quantity_to_add_,
                                                                catch_quantity_to_add_      => NULL,
                                                                requested_date_finished_    => requested_date_finished_,
                                                                allow_deviating_avail_ctrl_ => allow_deviating_avail_ctrl_);
      ELSE
         Transport_Task_Line_Pallet_API.New_(quantity_added_,
                                             found_transport_task_id_,
                                             pallet_id_,
                                             to_contract_,
                                             local_to_location_no_,
                                             forward_to_location_no_,
                                             destination_db_,
                                             order_type_db_,
                                             order_ref1_,
                                             order_ref2_,
                                             order_ref3_,
                                             order_ref4_,
                                             requested_date_finished_,
                                             allow_deviating_avail_ctrl_);
      END IF;
   
      transport_task_id_ := found_transport_task_id_;
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'New_Or_Add_To_Existing');
   Core(transport_task_id_, quantity_added_, serials_added_, part_no_, configuration_id_, from_contract_, from_location_no_, to_contract_, to_location_no_, destination_, order_type_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, lot_batch_no_, serial_no_tab_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, quantity_to_add_, pallet_id_, requested_date_finished_, note_text_, allow_deviating_avail_ctrl_, putaway_event_id_);
END New_Or_Add_To_Existing;


--@IgnoreMissingSysinit
FUNCTION Is_Pallet_Storage_Booked (
   contract_    IN VARCHAR2,
   location_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      contract_    IN VARCHAR2,
      location_no_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_                    NUMBER;
      pallet_storage_is_booked_ BOOLEAN := FALSE;
   
      CURSOR exist_control IS
         SELECT 1
           FROM transport_task_line_tab
          WHERE to_location_no        = location_no_
            AND to_contract           = contract_
            AND transport_task_status != Transport_Task_Status_API.db_executed;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         pallet_storage_is_booked_ := TRUE;
      END IF;
      CLOSE exist_control;
   
      RETURN (pallet_storage_is_booked_);
   END Core;

BEGIN
   RETURN Core(contract_, location_no_);
END Is_Pallet_Storage_Booked;


--@IgnoreMissingSysinit
FUNCTION Get_Task_Id_Created_For_Pallet (
   pallet_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      pallet_id_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_  TRANSPORT_TASK_TAB.transport_task_id%TYPE;
   
      CURSOR get_attr IS
         SELECT transport_task_id
         FROM   transport_task_line_tab
         WHERE  pallet_id             = pallet_id_
            AND transport_task_status != Transport_Task_Status_API.db_executed;
   BEGIN
     OPEN get_attr;
     FETCH get_attr INTO temp_;
     CLOSE get_attr;
     RETURN temp_;
   END Core;

BEGIN
   RETURN Core(pallet_id_);
END Get_Task_Id_Created_For_Pallet;


--@IgnoreMissingSysinit
FUNCTION Has_Pallet_Lines (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      dummy_   NUMBER ;
      has_pallet_lines_ VARCHAR2(5) := db_false_;
      CURSOR pallet_lines_exists IS 
         SELECT 1
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_
         AND ROWTYPE = 'TransportTaskLinePallet';
   BEGIN
      OPEN pallet_lines_exists;
      FETCH pallet_lines_exists INTO dummy_;
      IF(pallet_lines_exists%FOUND) THEN
         has_pallet_lines_ := db_true_;
      END IF;
      CLOSE pallet_lines_exists;
      RETURN has_pallet_lines_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Has_Pallet_Lines;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Inbound (
   part_no_          IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   to_contract_      IN VARCHAR2,
   to_location_no_   IN VARCHAR2,
   lot_batch_no_     IN VARCHAR2 DEFAULT NULL,
   serial_no_        IN VARCHAR2 DEFAULT NULL,
   eng_chg_level_    IN VARCHAR2 DEFAULT NULL,
   waiv_dev_rej_no_  IN VARCHAR2 DEFAULT NULL ) RETURN NUMBER
IS
   
   FUNCTION Core (
      part_no_          IN VARCHAR2,
      configuration_id_ IN VARCHAR2,
      to_contract_      IN VARCHAR2,
      to_location_no_   IN VARCHAR2,
      lot_batch_no_     IN VARCHAR2 DEFAULT NULL,
      serial_no_        IN VARCHAR2 DEFAULT NULL,
      eng_chg_level_    IN VARCHAR2 DEFAULT NULL,
      waiv_dev_rej_no_  IN VARCHAR2 DEFAULT NULL ) RETURN NUMBER
   IS
      qty_inbound_nopall_ NUMBER;
      qty_inbound_pallet_ NUMBER;
   BEGIN
      qty_inbound_nopall_ := Transport_Task_Line_Nopall_API.Get_Qty_Inbound_(part_no_,
                                                                             configuration_id_,
                                                                             to_contract_,
                                                                             to_location_no_,
                                                                             lot_batch_no_,
                                                                             serial_no_,
                                                                             eng_chg_level_,
                                                                             waiv_dev_rej_no_,
                                                                             NULL);
   
      qty_inbound_pallet_ := Transport_Task_Line_Pallet_API.Get_Qty_Inbound_(part_no_,
                                                                             configuration_id_,
                                                                             to_contract_,
                                                                             to_location_no_,
                                                                             lot_batch_no_,
                                                                             serial_no_,
                                                                             eng_chg_level_,
                                                                             waiv_dev_rej_no_,
                                                                             NULL);
      RETURN (qty_inbound_nopall_ + qty_inbound_pallet_);
   END Core;

BEGIN
   RETURN Core(part_no_, configuration_id_, to_contract_, to_location_no_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_);
END Get_Qty_Inbound;


--@IgnoreMissingSysinit
FUNCTION Inbound_Task_Exist (
   part_no_     IN VARCHAR2,
   contract_    IN VARCHAR2,
   location_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      part_no_     IN VARCHAR2,
      contract_    IN VARCHAR2,
      location_no_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_              NUMBER;
      inbound_task_exist_ BOOLEAN := FALSE;
      
      CURSOR exist_control IS
         SELECT 1
         FROM  transport_task_line_tab
         WHERE part_no               = part_no_
         AND  ((forward_to_location_no = location_no_) OR (to_location_no = location_no_ AND forward_to_location_no IS NULL))
         AND   to_location_no        = location_no_
         AND   to_contract           = contract_
         AND transport_task_status != Transport_Task_Status_API.db_executed;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         inbound_task_exist_ := TRUE;
      END IF;
      CLOSE exist_control;
   
      RETURN inbound_task_exist_;
   END Core;

BEGIN
   RETURN Core(part_no_, contract_, location_no_);
END Inbound_Task_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Unexecuted_Tasks (
   part_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      part_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_         NUMBER;
      return_value_ VARCHAR2(5);
   
      CURSOR get_tasks IS
         SELECT 1 
         FROM transport_task_line_tab
         WHERE part_no = part_no_
           AND transport_task_status != Transport_Task_Status_API.db_executed;
   BEGIN
       OPEN get_tasks;
       FETCH get_tasks INTO temp_;
       IF get_tasks%FOUND THEN
          return_value_ := db_true_;
       ELSE
          return_value_ := db_false_;
       END IF;
       CLOSE get_tasks;
   
       RETURN return_value_;
   END Core;

BEGIN
   RETURN Core(part_no_);
END Check_Unexecuted_Tasks;


--@IgnoreMissingSysinit
FUNCTION Is_Inter_Site (
   transport_task_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      dummy_         NUMBER;
      is_inter_site_ VARCHAR2(5) := db_false_;
   
      CURSOR inter_site_line_exists IS
         SELECT 1
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_
           AND to_contract != NVL(from_contract, Inventory_Part_Loc_Pallet_API.Get_Site(pallet_id));
   BEGIN
      OPEN  inter_site_line_exists;
      FETCH inter_site_line_exists INTO dummy_;
      IF (inter_site_line_exists%FOUND) THEN
         is_inter_site_ := db_true_;
      END IF;
      CLOSE inter_site_line_exists;
   
      RETURN (is_inter_site_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Is_Inter_Site;


--@IgnoreMissingSysinit
FUNCTION Get_No_Of_Unidentified_Serials (
   transport_task_id_  IN NUMBER,
   only_status_picked_ IN VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE ) RETURN NUMBER
IS
   
   FUNCTION Core (
      transport_task_id_  IN NUMBER,
      only_status_picked_ IN VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE ) RETURN NUMBER
   IS
      no_of_unidentified_serials_ NUMBER := 0;
   
      CURSOR get_no_of_unidentified_serials IS
         SELECT part_no, NVL(quantity,0) quantity, transport_task_status
           FROM transport_task_line_tab
          WHERE transport_task_id      = transport_task_id_
            AND ROWTYPE                = 'TransportTaskLineNopall'
            AND serial_no              = '*'
            AND from_contract         != to_contract
            AND transport_task_status != Transport_Task_Status_API.DB_EXECUTED;
   BEGIN   
      FOR rec_ IN get_no_of_unidentified_serials LOOP
         IF ((rec_.transport_task_status = Transport_Task_Status_API.DB_PICKED) OR
             (only_status_picked_        = Fnd_Boolean_API.DB_FALSE)) THEN
            IF (Part_Catalog_API.Serial_Tracked_Only_Rece_Issue(rec_.part_no)) THEN
               no_of_unidentified_serials_ := no_of_unidentified_serials_ + rec_.quantity;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (no_of_unidentified_serials_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_, only_status_picked_);
END Get_No_Of_Unidentified_Serials;


FUNCTION Get_Booked_Carrying_Capacity (
   contract_     IN VARCHAR2,
   warehouse_id_ IN VARCHAR2,
   bay_id_       IN VARCHAR2,
   tier_id_      IN VARCHAR2,
   row_id_       IN VARCHAR2,
   bin_id_       IN VARCHAR2 ) RETURN NUMBER
IS
   
   FUNCTION Core (
      contract_     IN VARCHAR2,
      warehouse_id_ IN VARCHAR2,
      bay_id_       IN VARCHAR2,
      tier_id_      IN VARCHAR2,
      row_id_       IN VARCHAR2,
      bin_id_       IN VARCHAR2 ) RETURN NUMBER
   IS
      booked_carrying_capacity_      NUMBER := 0;
      carrying_capacity_requirement_ NUMBER;
      location_no_tab_               Inventory_Part_In_Stock_API.Inventory_Location_Table;
   
      CURSOR get_booked_quantities IS
         SELECT ttl.part_no       part_no,
                SUM(ttl.quantity) booked_quantity
         FROM  transport_task_line_tab ttl
         WHERE ttl.to_contract           = contract_
         AND   ttl.transport_task_status != Transport_Task_Status_API.db_executed
         AND EXISTS (SELECT 1 FROM inventory_location_tmp il
                     WHERE (ttl.to_location_no         = il.location_no OR
                            ttl.forward_to_location_no = il.location_no))
         GROUP BY ttl.part_no;
   
      TYPE Booked_Quantity_Tab IS TABLE OF get_booked_quantities%ROWTYPE INDEX BY BINARY_INTEGER;
      booked_quantity_tab_ Booked_Quantity_Tab;
   BEGIN
      location_no_tab_ := Warehouse_Bay_Bin_API.Get_Location_Numbers(contract_,
                                                                     warehouse_id_,
                                                                     bay_id_,
                                                                     tier_id_,
                                                                     row_id_,
                                                                     bin_id_);
      Inventory_Part_In_Stock_API.Clear_Inventory_Location_Tmp;
      Inventory_Part_In_Stock_API.Fill_Inventory_Location_Tmp(location_no_tab_);
   
      OPEN get_booked_quantities;
      FETCH get_booked_quantities BULK COLLECT INTO booked_quantity_tab_;
      CLOSE get_booked_quantities;
   
      Inventory_Part_In_Stock_API.Clear_Inventory_Location_Tmp;
   
      IF (booked_quantity_tab_.COUNT > 0) THEN
         FOR i IN booked_quantity_tab_.FIRST..booked_quantity_tab_.LAST LOOP
   
            carrying_capacity_requirement_ := Inventory_Part_API.Get_Storage_Weight_Requirement(contract_,
                                                                                                booked_quantity_tab_(i).part_no);
            IF (carrying_capacity_requirement_ IS NULL) THEN
               booked_carrying_capacity_ := Inventory_Putaway_Manager_API.positive_infinity_;
               EXIT;
            ELSE
               booked_carrying_capacity_ := booked_carrying_capacity_ +
                                            (carrying_capacity_requirement_ * booked_quantity_tab_(i).booked_quantity);
            END IF;
         END LOOP;
      END IF;
   
      RETURN (booked_carrying_capacity_);
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Get_Booked_Carrying_Capacity');
   RETURN Core(contract_, warehouse_id_, bay_id_, tier_id_, row_id_, bin_id_);
END Get_Booked_Carrying_Capacity;


FUNCTION Get_Booked_Volume_Capacity (
   contract_     IN VARCHAR2,
   warehouse_id_ IN VARCHAR2,
   bay_id_       IN VARCHAR2,
   tier_id_      IN VARCHAR2,
   row_id_       IN VARCHAR2,
   bin_id_       IN VARCHAR2 ) RETURN NUMBER
IS
   
   FUNCTION Core (
      contract_     IN VARCHAR2,
      warehouse_id_ IN VARCHAR2,
      bay_id_       IN VARCHAR2,
      tier_id_      IN VARCHAR2,
      row_id_       IN VARCHAR2,
      bin_id_       IN VARCHAR2 ) RETURN NUMBER
   IS
      booked_volume_capacity_      NUMBER := 0;
      volume_capacity_requirement_ NUMBER;
      location_no_tab_             Inventory_Part_In_Stock_API.Inventory_Location_Table;
   
      CURSOR get_booked_quantities IS
         SELECT ttl.part_no       part_no,
                SUM(ttl.quantity) booked_quantity
         FROM  transport_task_line_tab ttl
         WHERE ttl.to_contract           = contract_
         AND   ttl.transport_task_status != Transport_Task_Status_API.db_executed
         AND EXISTS (SELECT 1 FROM inventory_location_tmp il
                     WHERE (ttl.to_location_no         = il.location_no OR
                            ttl.forward_to_location_no = il.location_no))
         GROUP BY ttl.part_no;
   
      TYPE Booked_Quantity_Tab IS TABLE OF get_booked_quantities%ROWTYPE INDEX BY BINARY_INTEGER;
      booked_quantity_tab_ Booked_Quantity_Tab;
   BEGIN
   
      location_no_tab_ := Warehouse_Bay_Bin_API.Get_Location_Numbers(contract_,
                                                                     warehouse_id_,
                                                                     bay_id_,
                                                                     tier_id_,
                                                                     row_id_,
                                                                     bin_id_);
      Inventory_Part_In_Stock_API.Clear_Inventory_Location_Tmp;
      Inventory_Part_In_Stock_API.Fill_Inventory_Location_Tmp(location_no_tab_);
   
      OPEN get_booked_quantities;
      FETCH get_booked_quantities BULK COLLECT INTO booked_quantity_tab_;
      CLOSE get_booked_quantities;
   
      Inventory_Part_In_Stock_API.Clear_Inventory_Location_Tmp;
   
      IF (booked_quantity_tab_.COUNT > 0) THEN
         FOR i IN booked_quantity_tab_.FIRST..booked_quantity_tab_.LAST LOOP
   
            volume_capacity_requirement_ := Inventory_Part_API.Get_Storage_Volume_Requirement(contract_,
                                                                                              booked_quantity_tab_(i).part_no);
            IF (volume_capacity_requirement_ IS NULL) THEN
               booked_volume_capacity_ := Inventory_Putaway_Manager_API.positive_infinity_;
               EXIT;
            ELSE
               booked_volume_capacity_ := booked_volume_capacity_ +
                                            (volume_capacity_requirement_ * booked_quantity_tab_(i).booked_quantity);
            END IF;
         END LOOP;
      END IF;
   
      RETURN (booked_volume_capacity_);
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Get_Booked_Volume_Capacity');
   RETURN Core(contract_, warehouse_id_, bay_id_, tier_id_, row_id_, bin_id_);
END Get_Booked_Volume_Capacity;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Outbound (
   from_contract_    IN VARCHAR2,
   part_no_          IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   from_location_no_ IN VARCHAR2,
   lot_batch_no_     IN VARCHAR2,
   serial_no_        IN VARCHAR2,
   eng_chg_level_    IN VARCHAR2,
   waiv_dev_rej_no_  IN VARCHAR2,
   activity_seq_     IN NUMBER,
   order_ref1_       IN VARCHAR2,
   order_ref2_       IN VARCHAR2,
   order_ref3_       IN VARCHAR2,
   order_ref4_       IN NUMBER,
   order_type_db_    IN VARCHAR2 ) RETURN NUMBER
IS
   
   FUNCTION Core (
      from_contract_    IN VARCHAR2,
      part_no_          IN VARCHAR2,
      configuration_id_ IN VARCHAR2,
      from_location_no_ IN VARCHAR2,
      lot_batch_no_     IN VARCHAR2,
      serial_no_        IN VARCHAR2,
      eng_chg_level_    IN VARCHAR2,
      waiv_dev_rej_no_  IN VARCHAR2,
      activity_seq_     IN NUMBER,
      order_ref1_       IN VARCHAR2,
      order_ref2_       IN VARCHAR2,
      order_ref3_       IN VARCHAR2,
      order_ref4_       IN NUMBER,
      order_type_db_    IN VARCHAR2 ) RETURN NUMBER
   IS
      qty_outbound_nopall_ NUMBER;
      qty_outbound_pallet_ NUMBER;
   BEGIN
      qty_outbound_nopall_ := Transport_Task_Line_Nopall_API.Get_Qty_Outbound_(part_no_,
                                                                               configuration_id_,
                                                                               from_contract_,
                                                                               from_location_no_,
                                                                               lot_batch_no_,
                                                                               serial_no_,
                                                                               eng_chg_level_,
                                                                               waiv_dev_rej_no_,
                                                                               NULL,
                                                                               order_ref1_,
                                                                               order_ref2_,
                                                                               order_ref3_,
                                                                               order_ref4_,
                                                                               order_type_db_);
   
      qty_outbound_pallet_ := Transport_Task_Line_Pallet_API.Get_Qty_Outbound_(part_no_,
                                                                               configuration_id_,
                                                                               from_contract_,
                                                                               from_location_no_,
                                                                               lot_batch_no_,
                                                                               serial_no_,
                                                                               eng_chg_level_,
                                                                               waiv_dev_rej_no_,
                                                                               NULL,
                                                                               order_ref1_,
                                                                               order_ref2_,
                                                                               order_ref3_,
                                                                               order_ref4_,
                                                                               order_type_db_);
      RETURN (qty_outbound_nopall_ + qty_outbound_pallet_);
   END Core;

BEGIN
   RETURN Core(from_contract_, part_no_, configuration_id_, from_location_no_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, order_type_db_);
END Get_Qty_Outbound;


--@IgnoreMissingSysinit
FUNCTION Other_Parts_Are_Inbound (
   contract_    IN VARCHAR2,
   part_no_     IN VARCHAR2,
   location_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      contract_    IN VARCHAR2,
      part_no_     IN VARCHAR2,
      location_no_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_                   NUMBER;
      other_parts_are_inbound_ BOOLEAN := FALSE;
      
      CURSOR exist_control IS
         SELECT 1
         FROM  transport_task_line_tab
         WHERE part_no              != part_no_
         AND   to_location_no        = location_no_
         AND   to_contract           = contract_
         AND   transport_task_status != Transport_Task_Status_API.db_executed;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         other_parts_are_inbound_ := TRUE;
      END IF;
      CLOSE exist_control;
   
      RETURN (other_parts_are_inbound_);
   END Core;

BEGIN
   RETURN Core(contract_, part_no_, location_no_);
END Other_Parts_Are_Inbound;


--@IgnoreMissingSysinit
FUNCTION Any_Parts_Are_Inbound (
   contract_                 IN VARCHAR2,
   location_no_              IN VARCHAR2,
   ignore_transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      contract_                 IN VARCHAR2,
      location_no_              IN VARCHAR2,
      ignore_transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_                 NUMBER;
      any_parts_are_inbound_ BOOLEAN := FALSE;
      
      CURSOR exist_control IS
         SELECT 1
         FROM  transport_task_line_tab
         WHERE (to_location_no         = location_no_ OR 
                forward_to_location_no = location_no_)
          AND   to_contract            = contract_
          AND   transport_task_status != Transport_Task_Status_API.db_executed
          AND  (transport_task_id     != ignore_transport_task_id_ OR ignore_transport_task_id_ IS NULL);
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         any_parts_are_inbound_ := TRUE;
      END IF;
      CLOSE exist_control;
   
      RETURN (any_parts_are_inbound_);
   END Core;

BEGIN
   RETURN Core(contract_, location_no_, ignore_transport_task_id_);
END Any_Parts_Are_Inbound;


--@IgnoreMissingSysinit
FUNCTION Other_Conditions_Are_Inbound (
   condition_code_ IN VARCHAR2,
   contract_       IN VARCHAR2,
   location_no_    IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      condition_code_ IN VARCHAR2,
      contract_       IN VARCHAR2,
      location_no_    IN VARCHAR2 ) RETURN BOOLEAN
   IS
      other_conditions_are_inbound_ BOOLEAN := FALSE;
   BEGIN
      IF (Transport_Task_Line_Nopall_API.Other_Conditions_Are_Inbound(condition_code_, contract_, location_no_)) THEN
         other_conditions_are_inbound_ := TRUE;
      ELSE
         IF (Transport_Task_Line_Pallet_API.Other_Conditions_Are_Inbound(condition_code_, contract_, location_no_)) THEN
            other_conditions_are_inbound_ := TRUE;
         END IF;
      END IF;
   
      RETURN (other_conditions_are_inbound_);
   END Core;

BEGIN
   RETURN Core(condition_code_, contract_, location_no_);
END Other_Conditions_Are_Inbound;


--@IgnoreMissingSysinit
FUNCTION Other_Lots_Are_Inbound (
   contract_       IN VARCHAR2,
   part_no_        IN VARCHAR2,
   lot_batch_no_   IN VARCHAR2,
   location_no_    IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      contract_       IN VARCHAR2,
      part_no_        IN VARCHAR2,
      lot_batch_no_   IN VARCHAR2,
      location_no_    IN VARCHAR2 ) RETURN BOOLEAN
   IS
      other_lots_are_inbound_ BOOLEAN := FALSE;
   BEGIN
      IF (Transport_Task_Line_Nopall_API.Other_Lots_Are_Inbound(contract_, part_no_, lot_batch_no_, location_no_)) THEN
         other_lots_are_inbound_ := TRUE;
      ELSE
         IF (Transport_Task_Line_Pallet_API.Other_Lots_Are_Inbound(contract_, part_no_, lot_batch_no_, location_no_)) THEN
            other_lots_are_inbound_ := TRUE;
         END IF;
      END IF;
   
      RETURN (other_lots_are_inbound_);
   END Core;

BEGIN
   RETURN Core(contract_, part_no_, lot_batch_no_, location_no_);
END Other_Lots_Are_Inbound;


PROCEDURE Remove (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      remrec_ TRANSPORT_TASK_TAB%ROWTYPE;
   BEGIN
   
      remrec_ := Lock_By_Keys___(transport_task_id_);
      Check_And_Delete___(remrec_);
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Remove');
   Core(transport_task_id_);
END Remove;


PROCEDURE Remove_Unexecuted_Tasks (
   order_ref1_         IN VARCHAR2,
   order_ref2_         IN VARCHAR2,
   order_ref3_         IN VARCHAR2,
   order_ref4_         IN VARCHAR2,
   order_type_db_      IN VARCHAR2,
   remove_reservation_ IN BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Core (
      order_ref1_         IN VARCHAR2,
      order_ref2_         IN VARCHAR2,
      order_ref3_         IN VARCHAR2,
      order_ref4_         IN VARCHAR2,
      order_type_db_      IN VARCHAR2,
      remove_reservation_ IN BOOLEAN DEFAULT TRUE )
   IS
      CURSOR get_unexecuted_lines IS
         SELECT transport_task_id, line_no, ROWTYPE
           FROM transport_task_line_tab
          WHERE order_ref1             = order_ref1_
            AND (order_ref2            = order_ref2_ OR order_ref2_ IS NULL)
            AND (order_ref3            = order_ref3_ OR order_ref3_ IS NULL)
            AND (order_ref4            = order_ref4_ OR order_ref4_ IS NULL)
            AND  order_type            = order_type_db_
            AND transport_task_status != Transport_Task_Status_API.db_executed
         ORDER BY transport_task_id, line_no;
   BEGIN
   
      FOR line_rec_ IN get_unexecuted_lines LOOP
         IF (line_rec_.ROWTYPE = 'TransportTaskLinePallet') THEN
            Transport_Task_Line_Pallet_API.Remove(line_rec_.transport_task_id, line_rec_.line_no);
         ELSE
            Transport_Task_Line_Nopall_API.Remove(line_rec_.transport_task_id, line_rec_.line_no, remove_reservation_);
         END IF;
      END LOOP;
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Remove_Unexecuted_Tasks');
   Core(order_ref1_, order_ref2_, order_ref3_, order_ref4_, order_type_db_, remove_reservation_);
END Remove_Unexecuted_Tasks;


PROCEDURE Reduce_Qty_On_Unexecuted_Tasks (
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   configuration_id_ IN VARCHAR2,
   location_no_      IN VARCHAR2,
   lot_batch_no_     IN VARCHAR2,
   serial_no_        IN VARCHAR2,
   eng_chg_level_    IN VARCHAR2,
   waiv_dev_rej_no_  IN VARCHAR2,
   activity_seq_     IN NUMBER,
   quantity_         IN NUMBER,
   catch_quantity_   IN NUMBER,
   order_ref1_       IN VARCHAR2,
   order_ref2_       IN VARCHAR2,
   order_ref3_       IN VARCHAR2,
   order_ref4_       IN VARCHAR2,
   order_type_db_    IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      contract_         IN VARCHAR2,
      part_no_          IN VARCHAR2,
      configuration_id_ IN VARCHAR2,
      location_no_      IN VARCHAR2,
      lot_batch_no_     IN VARCHAR2,
      serial_no_        IN VARCHAR2,
      eng_chg_level_    IN VARCHAR2,
      waiv_dev_rej_no_  IN VARCHAR2,
      activity_seq_     IN NUMBER,
      quantity_         IN NUMBER,
      catch_quantity_   IN NUMBER,
      order_ref1_       IN VARCHAR2,
      order_ref2_       IN VARCHAR2,
      order_ref3_       IN VARCHAR2,
      order_ref4_       IN VARCHAR2,
      order_type_db_    IN VARCHAR2 )
   IS
      qty_reduced_             NUMBER;
      qty_to_be_reduced_       NUMBER;
      catch_qty_reduced_       NUMBER;
      catch_qty_to_be_reduced_ NUMBER;
      is_pallet_location_      NUMBER;
   
      CURSOR get_unexecuted_lines (rowtype_ IN VARCHAR2) IS
         SELECT transport_task_id, line_no
           FROM transport_task_line_tab
          WHERE  order_ref1            = order_ref1_
            AND  order_ref2            = order_ref2_
            AND  order_ref3            = order_ref3_
            AND (order_ref4            = order_ref4_ OR order_ref4_ IS NULL)
            AND  order_type            = order_type_db_
            AND  part_no               = part_no_
            AND  configuration_id      = configuration_id_
            AND  from_contract         = contract_
            AND  from_location_no      = location_no_
            AND  lot_batch_no          = lot_batch_no_
            AND  serial_no             = serial_no_
            AND  eng_chg_level         = eng_chg_level_
            AND  waiv_dev_rej_no       = waiv_dev_rej_no_
            AND  activity_seq          = activity_seq_
            AND  ROWTYPE               = rowtype_
            AND  transport_task_status != Transport_Task_Status_API.db_executed
         FOR UPDATE;
   BEGIN
      is_pallet_location_      := Inventory_Location_API.Is_Pallet_Location(contract_, location_no_);
      qty_to_be_reduced_       := quantity_;
      catch_qty_to_be_reduced_ := catch_quantity_;
   
      IF (is_pallet_location_ = 1) THEN
         FOR line_rec_ IN get_unexecuted_lines('TransportTaskLinePallet') LOOP
            Transport_Task_Line_Pallet_API.Reduce_Quantity(qty_reduced_,
                                                           line_rec_.transport_task_id,
                                                           line_rec_.line_no,
                                                           qty_to_be_reduced_);
   
            qty_to_be_reduced_ := qty_to_be_reduced_ - qty_reduced_;
            EXIT WHEN qty_to_be_reduced_ = 0;
         END LOOP;
      ELSE
         FOR line_rec_ IN get_unexecuted_lines('TransportTaskLineNopall') LOOP
            Transport_Task_Line_Nopall_API.Reduce_Quantity(qty_reduced_,
                                                           catch_qty_reduced_,
                                                           line_rec_.transport_task_id,
                                                           line_rec_.line_no,
                                                           qty_to_be_reduced_,
                                                           catch_qty_to_be_reduced_);
   
            qty_to_be_reduced_       := qty_to_be_reduced_       - qty_reduced_;
            catch_qty_to_be_reduced_ := catch_qty_to_be_reduced_ - catch_qty_reduced_;
            EXIT WHEN qty_to_be_reduced_ = 0;
         END LOOP;
      END IF;
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Reduce_Qty_On_Unexecuted_Tasks');
   Core(contract_, part_no_, configuration_id_, location_no_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, quantity_, catch_quantity_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, order_type_db_);
END Reduce_Qty_On_Unexecuted_Tasks;


--@IgnoreMissingSysinit
FUNCTION Is_Fixed (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      is_fixed_ BOOLEAN := FALSE;
      rec_      TRANSPORT_TASK_TAB%ROWTYPE;
   BEGIN
      rec_ := Get_Object_By_Keys___(transport_task_id_);
   
      IF (rec_.fixed = db_true_) THEN
         is_fixed_ := TRUE;
      END IF;
   
      RETURN (is_fixed_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Is_Fixed;


PROCEDURE Lock_By_Keys_Wait (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      dummy_ TRANSPORT_TASK_TAB%ROWTYPE;
   BEGIN
   
      dummy_ := Lock_By_Keys___(transport_task_id_);
   
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Lock_By_Keys_Wait');
   Core(transport_task_id_);
END Lock_By_Keys_Wait;


PROCEDURE New (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      newrec_     TRANSPORT_TASK_TAB%ROWTYPE;
      objid_      TRANSPORT_TASK.objid%TYPE;
      objversion_ TRANSPORT_TASK.objversion%TYPE;
      attr_       VARCHAR2(2000);
      indrec_     Indicator_Rec;
   BEGIN
   
      Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', transport_task_id_, attr_);
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'New');
   Core(transport_task_id_);
END New;


--@IgnoreMissingSysinit
FUNCTION Check_Exist (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN(Check_Exist___(transport_task_id_));
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Check_Exist;


PROCEDURE Set_As_Fixed (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      objid_      TRANSPORT_TASK.objid%TYPE;
      objversion_ TRANSPORT_TASK.objversion%TYPE;
      newrec_     TRANSPORT_TASK_TAB%ROWTYPE;
      oldrec_     TRANSPORT_TASK_TAB%ROWTYPE;
      attr_       VARCHAR2(2000);
      indrec_     Indicator_Rec;
   BEGIN
   
      oldrec_ := Lock_By_Keys___(transport_task_id_);
   
      IF (oldrec_.fixed != db_true_) THEN
   
         newrec_ := oldrec_;
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('FIXED_DB', db_true_, attr_);
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE); -- By keys.
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Set_As_Fixed');
   Core(transport_task_id_);
END Set_As_Fixed;


PROCEDURE Check_Start_Warehouse_Task (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
   
      CURSOR get_lines IS
         SELECT *
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_;
   BEGIN
   
      FOR line_rec_ IN get_lines LOOP
         IF (Inventory_Part_In_Stock_API.Is_Frozen_For_Counting(line_rec_.from_contract, 
                                                                line_rec_.part_no, 
                                                                line_rec_.configuration_id, 
                                                                line_rec_.from_location_no, 
                                                                line_rec_.lot_batch_no, 
                                                                line_rec_.serial_no, 
                                                                line_rec_.eng_chg_level,
                                                                line_rec_.waiv_dev_rej_no, 
                                                                line_rec_.activity_seq)) THEN
            Error_SYS.Record_General(lu_name_, 
                                     'FREEZESOURCESTOCK: The Warehouse Task cannot be started since the source stock record for Line :P1 on Transport Task :P2 is frozen for counting.',
                                     line_rec_.line_no, 
                                     line_rec_.transport_task_id);
         END IF;
   
         IF (line_rec_.destination = Inventory_Part_Destination_API.DB_MOVE_TO_INVENTORY) THEN
            IF (Inventory_Part_In_Stock_API.Is_Frozen_For_Counting(line_rec_.to_contract, 
                                                                   line_rec_.part_no, 
                                                                   line_rec_.configuration_id, 
                                                                   line_rec_.to_location_no, 
                                                                   line_rec_.lot_batch_no, 
                                                                   line_rec_.serial_no, 
                                                                   line_rec_.eng_chg_level,
                                                                   line_rec_.waiv_dev_rej_no, 
                                                                   line_rec_.activity_seq)) THEN
               Error_SYS.Record_General(lu_name_, 
                                        'FREEZEDESTSTOCK: The Warehouse Task cannot be started since the destination stock record for Line :P1 on Transport Task :P2 is frozen for counting.',
                                        line_rec_.line_no, 
                                        line_rec_.transport_task_id);
            END IF;
         END IF;
      END LOOP;
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Check_Start_Warehouse_Task');
   Core(transport_task_id_);
END Check_Start_Warehouse_Task;


--@IgnoreMissingSysinit
FUNCTION Has_Line_In_Status_Created (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      has_line_in_status_created_ VARCHAR2(5) := db_false_;
   BEGIN
      IF Has_Line_In_Status___(transport_task_id_, Transport_Task_Status_API.DB_CREATED) THEN
         has_line_in_status_created_ := db_true_;
      END IF;
   
      RETURN (has_line_in_status_created_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Has_Line_In_Status_Created;


--@IgnoreMissingSysinit
FUNCTION Has_Line_In_Status_Picked (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      has_line_in_status_created_ VARCHAR2(5) := db_false_;
   BEGIN
      IF Has_Line_In_Status___(transport_task_id_, Transport_Task_Status_API.DB_PICKED) THEN
         has_line_in_status_created_ := db_true_;
      END IF;
   
      RETURN (has_line_in_status_created_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Has_Line_In_Status_Picked;


--@IgnoreMissingSysinit
FUNCTION Has_Line_In_Status_Executed (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      has_line_in_status_created_ VARCHAR2(5) := db_false_;
   BEGIN
      IF Has_Line_In_Status___(transport_task_id_, Transport_Task_Status_API.DB_EXECUTED) THEN
         has_line_in_status_created_ := db_true_;
      END IF;
   
      RETURN (has_line_in_status_created_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Has_Line_In_Status_Executed;


--@IgnoreMissingSysinit
FUNCTION Is_Completely_Executed (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      is_completely_executed_ BOOLEAN := FALSE;
   BEGIN
      IF (Has_Line_In_Status_Executed(transport_task_id_) = db_true_) THEN
         IF (Has_Line_In_Status_Picked(transport_task_id_) = db_false_) THEN
            IF (Has_Line_In_Status_Created(transport_task_id_) = db_false_) THEN
               is_completely_executed_ := TRUE;
            END IF;
         END IF;
      END IF;
   
      RETURN (is_completely_executed_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Is_Completely_Executed;


--@IgnoreMissingSysinit
FUNCTION Is_Completely_Executed_Str (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      is_completely_executed_ VARCHAR2(5) := db_false_;
   BEGIN
      IF (Is_Completely_Executed(transport_task_id_)) THEN
         is_completely_executed_ := db_true_;
      END IF;
   
      RETURN (is_completely_executed_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Is_Completely_Executed_Str;


--@IgnoreMissingSysinit
FUNCTION Is_Fixed_Or_Started_Str (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      is_fixed_or_started_ VARCHAR2(5) := db_false_;
   BEGIN
      IF (Is_Fixed_Or_Started(transport_task_id_)) THEN
         is_fixed_or_started_ := db_true_;
      END IF;
      RETURN is_fixed_or_started_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Is_Fixed_Or_Started_Str;


--@IgnoreMissingSysinit
FUNCTION Is_Fixed_Or_Started (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      is_fixed_or_started_ BOOLEAN := FALSE;
   BEGIN
      IF ((Is_Fixed(transport_task_id_)) OR
          (Has_Line_In_Status_Executed(transport_task_id_) = db_true_) OR
          (Has_Line_In_Status_Picked(transport_task_id_) = db_true_) OR
          (Transport_Task_Manager_API.Warehouse_Task_Is_Started_(transport_task_id_))) THEN
             is_fixed_or_started_ := TRUE;
      END IF;
      RETURN is_fixed_or_started_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Is_Fixed_Or_Started;


--@IgnoreMissingSysinit
FUNCTION Has_Picked_Or_Executed_Line (
   transport_task_id_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN BOOLEAN
   IS
      has_picked_or_executed_line_ BOOLEAN := FALSE;
   BEGIN
      IF (Has_Line_In_Status_Picked(transport_task_id_) = db_true_ OR Has_Line_In_Status_Executed(transport_task_id_) = db_true_) THEN
         has_picked_or_executed_line_ := TRUE;
      END IF;
      RETURN has_picked_or_executed_line_;
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Has_Picked_Or_Executed_Line;


PROCEDURE Apply_Drop_Off_On_Lines (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      info_ VARCHAR2(2000);
      CURSOR get_lines IS
         SELECT line_no
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_
         AND transport_task_status = Transport_Task_Status_API.DB_CREATED
         AND forward_to_location_no IS NULL;
   BEGIN
      FOR line_rec_ IN get_lines LOOP
         Transport_Task_Line_API.Apply_Drop_Off_Location(info_, transport_task_id_, line_rec_.line_no);
      END LOOP;
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Apply_Drop_Off_On_Lines');
   Core(transport_task_id_);
END Apply_Drop_Off_On_Lines;


PROCEDURE Revoke_Two_Step_Transport_Task (
   transport_task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      transport_task_id_ IN NUMBER )
   IS
      info_ VARCHAR2(2000);
      CURSOR get_lines IS
         SELECT line_no
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_
         AND transport_task_status = Transport_Task_Status_API.DB_CREATED
         AND forward_to_location_no IS NOT NULL;
   BEGIN
      FOR line_rec_ IN get_lines LOOP
         Transport_Task_Line_API.Revoke_Two_Step_Transport_Task(info_, transport_task_id_, line_rec_.line_no);
      END LOOP;
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Revoke_Two_Step_Transport_Task');
   Core(transport_task_id_);
END Revoke_Two_Step_Transport_Task;


--@IgnoreMissingSysinit
FUNCTION Exist_For_Order_Reference (
   order_type_ IN VARCHAR2,
   order_ref1_ IN VARCHAR2 DEFAULT NULL,
   order_ref2_ IN VARCHAR2 DEFAULT NULL,
   order_ref3_ IN VARCHAR2 DEFAULT NULL,
   order_ref4_ IN NUMBER   DEFAULT NULL ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      order_type_ IN VARCHAR2,
      order_ref1_ IN VARCHAR2 DEFAULT NULL,
      order_ref2_ IN VARCHAR2 DEFAULT NULL,
      order_ref3_ IN VARCHAR2 DEFAULT NULL,
      order_ref4_ IN NUMBER   DEFAULT NULL ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
      CURSOR line_exist IS
         SELECT 1
         FROM   transport_task_line_tab
         WHERE  order_type = order_type_
         AND    (order_ref1 = order_ref1_ OR order_ref1_ IS NULL)
         AND    (order_ref2 = order_ref2_ OR order_ref2_ IS NULL)
         AND    (order_ref3 = order_ref3_ OR order_ref3_ IS NULL)
         AND    (order_ref4 = order_ref4_ OR order_ref4_ IS NULL)
         AND    transport_task_status != Transport_Task_Status_API.DB_EXECUTED;
   BEGIN
      OPEN line_exist;
      FETCH line_exist INTO dummy_;
      IF (line_exist%NOTFOUND) THEN
         CLOSE line_exist;
         RETURN FALSE;
      END IF;
      CLOSE line_exist;
      RETURN TRUE;
   END Core;

BEGIN
   RETURN Core(order_type_, order_ref1_, order_ref2_, order_ref3_, order_ref4_);
END Exist_For_Order_Reference;


--@IgnoreMissingSysinit
FUNCTION Inbound_To_Warehouse_Exist (
   contract_      IN VARCHAR2,
   warehouse_id_  IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      contract_      IN VARCHAR2,
      warehouse_id_  IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_                      NUMBER;
      inbound_to_warehouse_exist_ BOOLEAN := FALSE;
      
      CURSOR exist_control IS
         SELECT 1
         FROM  transport_task_line_tab ttl,
               warehouse_bay_bin_tab wbb
         WHERE wbb.contract              = contract_
         AND   wbb.warehouse_id          = warehouse_id_
         AND   ttl.to_location_no        = wbb.location_no
         AND  ((ttl.forward_to_location_no = wbb.location_no) OR (ttl.to_location_no = wbb.location_no AND ttl.forward_to_location_no IS NULL))
         AND   ttl.to_contract           = wbb.contract
         AND   transport_task_status     != Transport_Task_Status_API.DB_EXECUTED;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         inbound_to_warehouse_exist_ := TRUE;
      END IF;
      CLOSE exist_control;
   
      RETURN inbound_to_warehouse_exist_;
   END Core;

BEGIN
   RETURN Core(contract_, warehouse_id_);
END Inbound_To_Warehouse_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Inbound_For_Warehouse (
   part_no_                     IN VARCHAR2,
   configuration_id_            IN VARCHAR2,
   contract_                    IN VARCHAR2,
   warehouse_id_                IN VARCHAR2,
   include_bouncing_quantities_ IN VARCHAR2 DEFAULT 'FALSE' ) RETURN NUMBER
IS
   
   FUNCTION Core (
      part_no_                     IN VARCHAR2,
      configuration_id_            IN VARCHAR2,
      contract_                    IN VARCHAR2,
      warehouse_id_                IN VARCHAR2,
      include_bouncing_quantities_ IN VARCHAR2 DEFAULT 'FALSE' ) RETURN NUMBER
   IS
      qty_inbound_       NUMBER;
      site_warehouse_id_ VARCHAR2(100) := contract_||'^'||warehouse_id_;
   
      CURSOR get_quantity is
         SELECT NVL(SUM(quantity),0)
         FROM   active_warehouse_transport
         WHERE  part_no          = part_no_
         AND    configuration_id = configuration_id_
         AND    ((from_site_warehouse_id != site_warehouse_id_ AND to_site_warehouse_id  = site_warehouse_id_ AND (forward_to_site_warehouse_id IS NULL OR
                                                                                                                   forward_to_site_warehouse_id  = site_warehouse_id_ OR
                                                                                                                  (forward_to_site_warehouse_id != site_warehouse_id_ AND
                                                                                                                   include_bouncing_quantities_  = 'TRUE'))) OR
                (to_site_warehouse_id != site_warehouse_id_ AND forward_to_site_warehouse_id  = site_warehouse_id_));
   BEGIN
      OPEN  get_quantity;
      FETCH get_quantity INTO qty_inbound_;
      CLOSE get_quantity;
   
      RETURN qty_inbound_;
   END Core;

BEGIN
   RETURN Core(part_no_, configuration_id_, contract_, warehouse_id_, include_bouncing_quantities_);
END Get_Qty_Inbound_For_Warehouse;


--@IgnoreMissingSysinit
FUNCTION Get_Qty_Outbound_For_Warehouse (
   part_no_                     IN VARCHAR2,
   configuration_id_            IN VARCHAR2,
   contract_                    IN VARCHAR2,
   warehouse_id_                IN VARCHAR2 ) RETURN NUMBER
IS
   
   FUNCTION Core (
      part_no_                     IN VARCHAR2,
      configuration_id_            IN VARCHAR2,
      contract_                    IN VARCHAR2,
      warehouse_id_                IN VARCHAR2 ) RETURN NUMBER
   IS
      qty_outbound_      NUMBER;
      site_warehouse_id_ VARCHAR2(100) := contract_||'^'||warehouse_id_;
   
      CURSOR get_quantity is
         SELECT NVL(SUM(quantity),0)
         FROM   active_warehouse_transport
         WHERE  part_no          = part_no_
         AND    configuration_id = configuration_id_
         AND    ((from_site_warehouse_id  = site_warehouse_id_ AND (to_site_warehouse_id != site_warehouse_id_  OR forward_to_site_warehouse_id != site_warehouse_id_)) OR
                (from_site_warehouse_id != site_warehouse_id_ AND  to_site_warehouse_id  = site_warehouse_id_ AND forward_to_site_warehouse_id != site_warehouse_id_));
   BEGIN
      OPEN  get_quantity;
      FETCH get_quantity INTO qty_outbound_;
      CLOSE get_quantity;
   
      RETURN qty_outbound_;
   END Core;

BEGIN
   RETURN Core(part_no_, configuration_id_, contract_, warehouse_id_);
END Get_Qty_Outbound_For_Warehouse;


PROCEDURE Modify_Order_Reservation_Qty (
   from_contract_       IN VARCHAR2,
   part_no_             IN VARCHAR2,
   configuration_id_    IN VARCHAR2,
   from_location_no_    IN VARCHAR2,
   lot_batch_no_        IN VARCHAR2,
   serial_no_           IN VARCHAR2,
   eng_chg_level_       IN VARCHAR2,
   waiv_dev_rej_no_     IN VARCHAR2,
   activity_seq_        IN NUMBER,
   quantity_diff_       IN NUMBER,
   catch_quantity_diff_ IN NUMBER,
   order_ref1_          IN VARCHAR2,
   order_ref2_          IN VARCHAR2,
   order_ref3_          IN VARCHAR2,
   order_ref4_          IN NUMBER,
   order_type_db_       IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      from_contract_       IN VARCHAR2,
      part_no_             IN VARCHAR2,
      configuration_id_    IN VARCHAR2,
      from_location_no_    IN VARCHAR2,
      lot_batch_no_        IN VARCHAR2,
      serial_no_           IN VARCHAR2,
      eng_chg_level_       IN VARCHAR2,
      waiv_dev_rej_no_     IN VARCHAR2,
      activity_seq_        IN NUMBER,
      quantity_diff_       IN NUMBER,
      catch_quantity_diff_ IN NUMBER,
      order_ref1_          IN VARCHAR2,
      order_ref2_          IN VARCHAR2,
      order_ref3_          IN VARCHAR2,
      order_ref4_          IN NUMBER,
      order_type_db_       IN VARCHAR2 )
   IS
      reservation_booked_for_transp_ BOOLEAN;
      exit_procedure_                EXCEPTION;
   BEGIN
      reservation_booked_for_transp_ := Transport_Task_Line_API.Reservation_Booked_For_Transp(from_contract_    => from_contract_,
                                                                                              from_location_no_ => from_location_no_,
                                                                                              part_no_          => part_no_,
                                                                                              configuration_id_ => configuration_id_,
                                                                                              lot_batch_no_     => lot_batch_no_,
                                                                                              serial_no_        => serial_no_,
                                                                                              eng_chg_level_    => eng_chg_level_,
                                                                                              waiv_dev_rej_no_  => waiv_dev_rej_no_,
                                                                                              activity_seq_     => activity_seq_,
                                                                                              order_ref1_       => order_ref1_,
                                                                                              order_ref2_       => order_ref2_,
                                                                                              order_ref3_       => order_ref3_,
                                                                                              order_ref4_       => order_ref4_,
                                                                                              order_type_db_    => order_type_db_);
      IF NOT (reservation_booked_for_transp_) THEN 
         RAISE exit_procedure_;
      END IF;
         
      IF (quantity_diff_ > 0) THEN
         Increase_Qty_On_Unexecuted___(contract_                  => from_contract_,
                                       part_no_                   => part_no_,
                                       configuration_id_          => configuration_id_,
                                       location_no_               => from_location_no_,
                                       lot_batch_no_              => lot_batch_no_,
                                       serial_no_                 => serial_no_,
                                       eng_chg_level_             => eng_chg_level_,
                                       waiv_dev_rej_no_           => waiv_dev_rej_no_,
                                       activity_seq_              => activity_seq_,
                                       additional_quantity_       => quantity_diff_,
                                       additional_catch_quantity_ => catch_quantity_diff_,
                                       order_ref1_                => order_ref1_,
                                       order_ref2_                => order_ref2_,
                                       order_ref3_                => order_ref3_,
                                       order_ref4_                => order_ref4_,
                                       order_type_db_             => order_type_db_);
      ELSIF (quantity_diff_ < 0) THEN 
         Reduce_Qty_On_Unexecuted_Tasks(contract_         => from_contract_,
                                        part_no_          => part_no_,
                                        configuration_id_ => configuration_id_,
                                        location_no_      => from_location_no_,
                                        lot_batch_no_     => lot_batch_no_,
                                        serial_no_        => serial_no_,
                                        eng_chg_level_    => eng_chg_level_,
                                        waiv_dev_rej_no_  => waiv_dev_rej_no_,
                                        activity_seq_     => activity_seq_,
                                        quantity_         => quantity_diff_       * -1,
                                        catch_quantity_   => catch_quantity_diff_ * -1,
                                        order_ref1_       => order_ref1_,
                                        order_ref2_       => order_ref2_,
                                        order_ref3_       => order_ref3_,
                                        order_ref4_       => order_ref4_,
                                        order_type_db_    => order_type_db_);
      END IF;
      
   EXCEPTION
      WHEN exit_procedure_ THEN
         NULL;      
   END Core;

BEGIN
   General_SYS.Init_Method(Transport_Task_API.lu_name_, 'Transport_Task_API', 'Modify_Order_Reservation_Qty');
   Core(from_contract_, part_no_, configuration_id_, from_location_no_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, quantity_diff_, catch_quantity_diff_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, order_type_db_);
END Modify_Order_Reservation_Qty;


--@IgnoreMissingSysinit
FUNCTION Get_To_Locations (
   transport_task_id_ IN NUMBER,
   only_non_executed_ IN BOOLEAN DEFAULT FALSE,
   only_to_inventory_ IN BOOLEAN DEFAULT FALSE ) RETURN Warehouse_Bay_Bin_API.Location_No_Tab
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER,
      only_non_executed_ IN BOOLEAN DEFAULT FALSE,
      only_to_inventory_ IN BOOLEAN DEFAULT FALSE ) RETURN Warehouse_Bay_Bin_API.Location_No_Tab
   IS
      only_non_executed_char_ VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
      only_to_inventory_char_ VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
      to_location_tab_        Warehouse_Bay_Bin_API.Location_No_Tab;
   
      CURSOR get_to_locations IS
         SELECT DISTINCT to_location_no
         FROM transport_task_line_tab
         WHERE transport_task_id        = transport_task_id_
           AND ((transport_task_status != Transport_Task_Status_API.DB_EXECUTED) OR
                (only_non_executed_char_          = Fnd_Boolean_API.DB_FALSE))
           AND ((destination            = Inventory_Part_Destination_API.DB_MOVE_TO_INVENTORY) OR
                (only_to_inventory_char_      = Fnd_Boolean_API.DB_FALSE));
   BEGIN
      IF (only_non_executed_) THEN
         only_non_executed_char_ := Fnd_Boolean_API.DB_TRUE;
      END IF;
      IF (only_to_inventory_) THEN
         only_to_inventory_char_ := Fnd_Boolean_API.DB_TRUE;
      END IF;
      OPEN get_to_locations;
      FETCH get_to_locations BULK COLLECT INTO to_location_tab_;
      CLOSE get_to_locations;
   
      RETURN(to_location_tab_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_, only_non_executed_, only_to_inventory_);
END Get_To_Locations;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_To_Location_Type__ (
   transport_task_id_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      transport_task_id_ IN NUMBER ) RETURN VARCHAR2
   IS
      forward_to_location_type_ VARCHAR2(20);
   
      CURSOR get_forward_to_location_type IS
         SELECT ilg.inventory_location_type
           FROM transport_task_line_tab      ttl,
                warehouse_bay_bin_tab        wbb,
                inventory_location_group_tab ilg
          WHERE ttl.transport_task_id        = transport_task_id_
            AND ttl.to_contract              = wbb.contract
            AND ttl.forward_to_location_no   = wbb.location_no
            AND ilg.location_group           = wbb.location_group;
   BEGIN
      FOR rec_ IN get_forward_to_location_type LOOP
         IF (forward_to_location_type_ IS NULL) THEN
            forward_to_location_type_ := rec_.inventory_location_type;
         ELSE
            IF (forward_to_location_type_ != rec_.inventory_location_type) THEN
               forward_to_location_type_ := NULL;
               EXIT;
            END IF;
         END IF;
      END LOOP;
   
      RETURN (Inventory_Location_Type_API.Decode(forward_to_location_type_));
   END Core;

BEGIN
   RETURN Core(transport_task_id_);
END Get_Forward_To_Location_Type__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(attr_);
      Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', Get_Next_Transport_Task_Id___                          , attr_);
      Client_SYS.Add_To_Attr('CREATE_DATE'      , Site_API.Get_Site_Date(User_Default_API.Get_Contract()), attr_);
      Client_SYS.Add_To_Attr('FIXED'            , Fnd_Boolean_API.Decode(db_false_)                      , attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ transport_task_tab%ROWTYPE;
   BEGIN
      Validate_SYS.Item_Insert(lu_name_, 'PRINTED_FLAG', indrec_.printed_flag);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF newrec_.fixed IS NULL THEN
         newrec_.fixed := db_false_;
      END IF;
      -- Bug 127855, start 
      IF (indrec_.transport_task_id AND newrec_.transport_task_id IS NOT NULL) THEN 
        IF (newrec_.transport_task_id <= 0 OR MOD(newrec_.transport_task_id, 1) != 0 OR LENGTH(TO_CHAR(newrec_.transport_task_id)) > 9) THEN
          Error_Sys.Record_General(lu_name_,
                                   'TRANSTASKIDNOTNEGINT: The transport task ID should be a positive integer that does not exceed 9 digits.');
        END IF;
      END IF;
      -- Bug 127855, end
      Base(newrec_, indrec_, attr_);
      --Add post-processing code here
   END Core;

BEGIN
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY TRANSPORT_TASK_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY transport_task_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO transport_task_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'TRANSPORT_TASK_RK') THEN
               Error_SYS.Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY TRANSPORT_TASK_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.transport_task_id IS NULL) THEN
         newrec_.transport_task_id := Get_Next_Transport_Task_Id___;
      END IF;   
      newrec_.create_date  := Site_API.Get_Site_Date(User_Default_API.Get_Contract());
      newrec_.printed_flag := 0;
      Base(objid_, objversion_, newrec_, attr_);
      Client_SYS.Add_To_Attr('TRANSPORT_TASK_ID', newrec_.transport_task_id, attr_);
      Client_SYS.Add_To_Attr('CREATE_DATE', newrec_.create_date, attr_);
      Client_SYS.Add_To_Attr('PRINTED_FLAG', newrec_.printed_flag, attr_);   
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     transport_task_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     transport_task_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'TRANSPORT_TASK_ID', indrec_.transport_task_id);
      Validate_SYS.Item_Update(lu_name_, 'CREATE_DATE', indrec_.create_date);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     transport_task_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY transport_task_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_   VARCHAR2(30);
      value_ VARCHAR2(4000);
   BEGIN
      Base(oldrec_, newrec_, indrec_, attr_);
      Error_SYS.Check_Not_Null(lu_name_, 'PRINTED_FLAG', newrec_.printed_flag);
      -- Bug 134671, Added condition to check whether the transport task is only being printed to avoid the error message for printing. 
      IF (Is_Completely_Executed(newrec_.transport_task_id) AND NOT Check_Only_Printing___(newrec_, oldrec_)) THEN   
         Error_SYS.Record_General('TransportTask','UPDEXEC: Transport Task :P1 can not be modified since the Transport Task is executed.', newrec_.transport_task_id);
      END IF;
   
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


FUNCTION Get_Next_Transport_Task_Id___ RETURN NUMBER
IS
   
   FUNCTION Core RETURN NUMBER
   IS
      transport_task_id_ TRANSPORT_TASK_TAB.transport_task_id%TYPE;
   
      CURSOR get_next_transport_task_id IS
         SELECT transport_task_id.NEXTVAL
           FROM DUAL;
   BEGIN
      OPEN  get_next_transport_task_id;
      FETCH get_next_transport_task_id INTO transport_task_id_;
      CLOSE get_next_transport_task_id;
   
      RETURN (transport_task_id_);
   END Core;

BEGIN
   RETURN Core;
END Get_Next_Transport_Task_Id___;


PROCEDURE Check_And_Delete___ (
   remrec_ IN TRANSPORT_TASK_TAB%ROWTYPE )
IS
   
   PROCEDURE Core (
      remrec_ IN TRANSPORT_TASK_TAB%ROWTYPE )
   IS
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
   BEGIN
   
      Get_Id_Version_By_Keys___(objid_, objversion_, remrec_.transport_task_id);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END Core;

BEGIN
   Core(remrec_);
END Check_And_Delete___;


PROCEDURE Get_Whse_Cons_Level_Flags___ (
   single_warehouse_id_          OUT VARCHAR2,
   single_bay_id_                OUT VARCHAR2,
   single_tier_id_               OUT VARCHAR2,
   single_row_id_                OUT VARCHAR2,
   single_bin_id_                OUT VARCHAR2,
   warehouse_structure_level_db_ IN  VARCHAR2 )
IS
   
   PROCEDURE Core (
      single_warehouse_id_          OUT VARCHAR2,
      single_bay_id_                OUT VARCHAR2,
      single_tier_id_               OUT VARCHAR2,
      single_row_id_                OUT VARCHAR2,
      single_bin_id_                OUT VARCHAR2,
      warehouse_structure_level_db_ IN  VARCHAR2 )
   IS
   BEGIN
   
      single_warehouse_id_ := db_false_;
      single_bay_id_       := db_false_;
      single_tier_id_      := db_false_;
      single_row_id_       := db_false_;
      single_bin_id_       := db_false_;
   
      CASE warehouse_structure_level_db_
         WHEN Warehouse_Structure_Level_API.db_site THEN
            NULL;
         WHEN Warehouse_Structure_Level_API.db_warehouse THEN
            single_warehouse_id_ := db_true_;
         WHEN Warehouse_Structure_Level_API.db_bay THEN
            single_warehouse_id_ := db_true_;
            single_bay_id_       := db_true_;
         WHEN Warehouse_Structure_Level_API.db_tier THEN
            single_warehouse_id_ := db_true_;
            single_bay_id_       := db_true_;
            single_tier_id_      := db_true_;
         WHEN Warehouse_Structure_Level_API.db_row THEN
            single_warehouse_id_ := db_true_;
            single_bay_id_       := db_true_;
            single_row_id_       := db_true_;
         WHEN Warehouse_Structure_Level_API.db_bin THEN
            single_warehouse_id_ := db_true_;
            single_bay_id_       := db_true_;
            single_tier_id_      := db_true_;
            single_row_id_       := db_true_;
            single_bin_id_       := db_true_;
      END CASE;
   
   END Core;

BEGIN
   Core(single_warehouse_id_, single_bay_id_, single_tier_id_, single_row_id_, single_bin_id_, warehouse_structure_level_db_);
END Get_Whse_Cons_Level_Flags___;


PROCEDURE Get_Part_Cons_Level_Flags___ (
   single_part_no_          OUT VARCHAR2,
   single_configuration_id_ OUT VARCHAR2,
   part_cons_level_db_      IN  VARCHAR2 )
IS
   
   PROCEDURE Core (
      single_part_no_          OUT VARCHAR2,
      single_configuration_id_ OUT VARCHAR2,
      part_cons_level_db_      IN  VARCHAR2 )
   IS
   BEGIN
   
      single_part_no_          := db_false_;
      single_configuration_id_ := db_false_;
   
      CASE part_cons_level_db_
         WHEN Transport_Part_Cons_Level_API.db_multiple_parts THEN
            NULL;
         WHEN Transport_Part_Cons_Level_API.db_single_part THEN
            single_part_no_ := db_true_;
         WHEN Transport_Part_Cons_Level_API.db_single_configuration THEN
            single_part_no_          := db_true_;
            single_configuration_id_ := db_true_;
      END CASE;
   
   END Core;

BEGIN
   Core(single_part_no_, single_configuration_id_, part_cons_level_db_);
END Get_Part_Cons_Level_Flags___;


PROCEDURE Get_Ref_Cons_Level_Flags___ (
   single_ref_type_   OUT VARCHAR2,
   single_ref1_       OUT VARCHAR2,
   single_ref2_       OUT VARCHAR2,
   single_ref3_       OUT VARCHAR2,
   single_ref4_       OUT VARCHAR2,
   ref_cons_level_db_ IN  VARCHAR2 )
IS
   
   PROCEDURE Core (
      single_ref_type_   OUT VARCHAR2,
      single_ref1_       OUT VARCHAR2,
      single_ref2_       OUT VARCHAR2,
      single_ref3_       OUT VARCHAR2,
      single_ref4_       OUT VARCHAR2,
      ref_cons_level_db_ IN  VARCHAR2 )
   IS
   BEGIN
   
      single_ref_type_ := db_false_;
      single_ref1_     := db_false_;
      single_ref2_     := db_false_;
      single_ref3_     := db_false_;
      single_ref4_     := db_false_;
   
      CASE ref_cons_level_db_
         WHEN Transport_Ref_Cons_Level_API.db_multiple_references THEN
            NULL;
         WHEN Transport_Ref_Cons_Level_API.db_single_ref1 THEN
            single_ref_type_ := db_true_;
            single_ref1_     := db_true_;
         WHEN Transport_Ref_Cons_Level_API.db_single_reference THEN
            single_ref_type_ := db_true_;
            single_ref1_     := db_true_;
            single_ref2_     := db_true_;
            single_ref3_     := db_true_;
            single_ref4_     := db_true_;
      END CASE;
   
   END Core;

BEGIN
   Core(single_ref_type_, single_ref1_, single_ref2_, single_ref3_, single_ref4_, ref_cons_level_db_);
END Get_Ref_Cons_Level_Flags___;


FUNCTION Has_Line_In_Status___(
   transport_task_id_        IN NUMBER,
   transport_task_status_db_ IN VARCHAR2   ) RETURN BOOLEAN
IS
   
   FUNCTION Core(
      transport_task_id_        IN NUMBER,
      transport_task_status_db_ IN VARCHAR2   ) RETURN BOOLEAN
   IS
      has_line_in_status_ BOOLEAN := FALSE;
      dummy_               NUMBER;
      CURSOR has_line_in_status IS
         SELECT 1
         FROM   transport_task_line_tab
         WHERE  transport_task_id = transport_task_id_
         AND    transport_task_status = transport_task_status_db_;
   BEGIN
      OPEN has_line_in_status;
      FETCH has_line_in_status INTO dummy_;
      IF (has_line_in_status%FOUND) THEN
         has_line_in_status_ := TRUE;
      END IF;
      CLOSE has_line_in_status;
      RETURN (has_line_in_status_);
   END Core;

BEGIN
   RETURN Core(transport_task_id_, transport_task_status_db_);
END Has_Line_In_Status___;


PROCEDURE Validate_Identified_Serials___(
   part_tracking_session_id_       IN NUMBER,
   number_of_serials_to_identify_  IN NUMBER )
IS
   
   PROCEDURE Core(
      part_tracking_session_id_       IN NUMBER,
      number_of_serials_to_identify_  IN NUMBER )
   IS
      number_of_identified_serials_  NUMBER;
   BEGIN
      number_of_identified_serials_  := Temporary_Part_Tracking_API.Get_Number_Of_Serials(part_tracking_session_id_);
   
      IF (number_of_identified_serials_ != number_of_serials_to_identify_) THEN
         Error_SYS.Record_General('TransportTask','SERNONOTEQ: You need to identify :P1 serials but have identified :P2.', number_of_serials_to_identify_, number_of_identified_serials_);
      END IF;
   
   END Core;

BEGIN
   Core(part_tracking_session_id_, number_of_serials_to_identify_);
END Validate_Identified_Serials___;


PROCEDURE Execute___ (
   transport_task_id_        IN NUMBER,
   part_tracking_session_id_ IN NUMBER,
   only_status_picked_       IN BOOLEAN )
IS
   
   PROCEDURE Core (
      transport_task_id_        IN NUMBER,
      part_tracking_session_id_ IN NUMBER,
      only_status_picked_       IN BOOLEAN )
   IS
      oldrec_                        TRANSPORT_TASK_TAB%ROWTYPE;
      number_of_serials_to_identify_ NUMBER;
      putaway_event_id_              NUMBER;
      only_status_picked_local_      VARCHAR2(5) := db_false_;
   
      CURSOR get_lines IS
         SELECT ROWTYPE, line_no
         FROM transport_task_line_tab
         WHERE transport_task_id = transport_task_id_
           AND transport_task_status != Transport_Task_Status_API.DB_EXECUTED
           AND ((transport_task_status = Transport_Task_Status_API.DB_PICKED) OR (only_status_picked_local_ = db_false_))
         FOR UPDATE;
   BEGIN
   
      IF (only_status_picked_) THEN
         only_status_picked_local_ := db_true_;
      END IF;
   
      oldrec_ := Lock_By_Keys___(transport_task_id_);
   
      IF NOT (Transport_Task_Line_API.Lines_Exist(transport_task_id_)) THEN
         Error_SYS.Record_General('TransportTask','NOLINES: Cannot execute Transport Task :P1 without details.', transport_task_id_);
      END IF;
   
      IF (Is_Completely_Executed(transport_task_id_)) THEN
         Error_SYS.Record_General('TransportTask','ALREXEC: All lines on Transport Task :P1 are already executed.', transport_task_id_);
      END IF;
      
      number_of_serials_to_identify_ := Get_No_Of_Unidentified_Serials(transport_task_id_, only_status_picked_local_);
      putaway_event_id_              := Inventory_Putaway_Manager_API.Get_Next_Putaway_Event_Id;
      Validate_Identified_Serials___(part_tracking_session_id_, number_of_serials_to_identify_);
      
      FOR line_rec_ IN get_lines LOOP
         IF (line_rec_.rowtype = 'TransportTaskLineNopall') THEN
            Transport_Task_Line_Nopall_API.Execute_(transport_task_id_,
                                                    line_rec_.line_no,
                                                    part_tracking_session_id_,
                                                    putaway_event_id_);
         ELSE
            Transport_Task_Line_Pallet_API.Execute_(transport_task_id_,
                                                    line_rec_.line_no,
                                                    putaway_event_id_);
         END IF;
      END LOOP;
      
      Putaway_To_Empty_Event_API.Remove_Putaway_Event(putaway_event_id_);
   END Core;

BEGIN
   Core(transport_task_id_, part_tracking_session_id_, only_status_picked_);
END Execute___;


PROCEDURE Increase_Qty_On_Unexecuted___ (
   contract_                  IN VARCHAR2,
   part_no_                   IN VARCHAR2,
   configuration_id_          IN VARCHAR2,
   location_no_               IN VARCHAR2,
   lot_batch_no_              IN VARCHAR2,
   serial_no_                 IN VARCHAR2,
   eng_chg_level_             IN VARCHAR2,
   waiv_dev_rej_no_           IN VARCHAR2,
   activity_seq_              IN NUMBER,
   additional_quantity_       IN NUMBER,
   additional_catch_quantity_ IN NUMBER,
   order_ref1_                IN VARCHAR2,
   order_ref2_                IN VARCHAR2,
   order_ref3_                IN VARCHAR2,
   order_ref4_                IN VARCHAR2,
   order_type_db_             IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      contract_                  IN VARCHAR2,
      part_no_                   IN VARCHAR2,
      configuration_id_          IN VARCHAR2,
      location_no_               IN VARCHAR2,
      lot_batch_no_              IN VARCHAR2,
      serial_no_                 IN VARCHAR2,
      eng_chg_level_             IN VARCHAR2,
      waiv_dev_rej_no_           IN VARCHAR2,
      activity_seq_              IN NUMBER,
      additional_quantity_       IN NUMBER,
      additional_catch_quantity_ IN NUMBER,
      order_ref1_                IN VARCHAR2,
      order_ref2_                IN VARCHAR2,
      order_ref3_                IN VARCHAR2,
      order_ref4_                IN VARCHAR2,
      order_type_db_             IN VARCHAR2 )
   IS
      is_pallet_location_ NUMBER;
      transport_task_id_  TRANSPORT_TASK_TAB.TRANSPORT_TASK_ID%TYPE;
      line_no_            TRANSPORT_TASK_LINE_TAB.LINE_NO%TYPE;
   
      CURSOR get_unexecuted_lines IS
         SELECT transport_task_id, line_no
           FROM transport_task_line_tab
          WHERE  order_ref1            = order_ref1_
            AND  order_ref2            = order_ref2_
            AND  order_ref3            = order_ref3_
            AND (order_ref4            = order_ref4_ OR order_ref4_ IS NULL)
            AND  order_type            = order_type_db_
            AND  part_no               = part_no_
            AND  configuration_id      = configuration_id_
            AND  from_contract         = contract_
            AND  from_location_no      = location_no_
            AND  lot_batch_no          = lot_batch_no_
            AND  serial_no             = serial_no_
            AND  eng_chg_level         = eng_chg_level_
            AND  waiv_dev_rej_no       = waiv_dev_rej_no_
            AND  activity_seq          = activity_seq_
            AND  transport_task_status != Transport_Task_Status_API.db_executed
         FOR UPDATE;
   BEGIN
      is_pallet_location_ := Inventory_Location_API.Is_Pallet_Location(contract_, location_no_);
   
      IF (is_pallet_location_ = 1) THEN
         Error_SYS.Record_General('TransportTask','PALLQTYINCREASE: Quantity cannot be increased on a Pallet Transport Task Line.');
      ELSE
         OPEN get_unexecuted_lines;
         FETCH get_unexecuted_lines INTO transport_task_id_, line_no_;
         IF get_unexecuted_lines%NOTFOUND THEN
            CLOSE get_unexecuted_lines;
            Error_SYS.Record_General('TransportTask','NOUNEXECFOUND: No unexecuted transport task line can be found fo the reservation.');
         END IF;
         CLOSE get_unexecuted_lines;
         Transport_Task_Line_Nopall_API.Increase_Quantity(transport_task_id_,
                                                          line_no_,
                                                          additional_quantity_,
                                                          additional_catch_quantity_);
      END IF;
   
   END Core;

BEGIN
   Core(contract_, part_no_, configuration_id_, location_no_, lot_batch_no_, serial_no_, eng_chg_level_, waiv_dev_rej_no_, activity_seq_, additional_quantity_, additional_catch_quantity_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, order_type_db_);
END Increase_Qty_On_Unexecuted___;


FUNCTION Check_Only_Printing___ (
   newrec_ IN  transport_task_tab%ROWTYPE,
   oldrec_ IN  transport_task_tab%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      newrec_ IN  transport_task_tab%ROWTYPE,
      oldrec_ IN  transport_task_tab%ROWTYPE ) RETURN BOOLEAN
   IS
      only_printing_    BOOLEAN; 
   BEGIN
      IF (NVL(oldrec_.note_text, Database_SYS.string_null_) = NVL(newrec_.note_text, Database_SYS.string_null_))
         AND (oldrec_.fixed                                 = newrec_.fixed)
         AND (oldrec_.printed_flag                         != newrec_.printed_flag) THEN
         only_printing_ := TRUE;
      ELSE
         only_printing_ := FALSE;
      END IF;
      RETURN only_printing_;
   END Core;

BEGIN
   RETURN Core(newrec_, oldrec_);
END Check_Only_Printing___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      NULL;
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Transport_Task_API;
