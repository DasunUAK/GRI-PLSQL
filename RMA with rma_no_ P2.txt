CREATE OR REPLACE PACKAGE BODY Return_Material_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (rma_no                         BOOLEAN := FALSE,
   date_requested                 BOOLEAN := FALSE,
   currency_code                  BOOLEAN := FALSE,
   customer_no                    BOOLEAN := FALSE,
   contract                       BOOLEAN := FALSE,
   return_approver_id             BOOLEAN := FALSE,
   cust_ref                       BOOLEAN := FALSE,
   rma_report_printed             BOOLEAN := FALSE,
   note_id                        BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   language_code                  BOOLEAN := FALSE,
   vat                            BOOLEAN := FALSE,
   tax_liability                  BOOLEAN := FALSE,
   customer_no_addr_no            BOOLEAN := FALSE,
   customer_no_credit             BOOLEAN := FALSE,
   customer_no_credit_addr_no     BOOLEAN := FALSE,
   ship_addr_no                   BOOLEAN := FALSE,
   case_id                        BOOLEAN := FALSE,
   task_id                        BOOLEAN := FALSE,
   jinsui_invoice                 BOOLEAN := FALSE,
   supply_country                 BOOLEAN := FALSE,
   use_price_incl_tax             BOOLEAN := FALSE,
   cancel_reason                  BOOLEAN := FALSE,
   order_no                       BOOLEAN := FALSE,
   shipment_id                    BOOLEAN := FALSE,
   return_to_vendor_no            BOOLEAN := FALSE,
   return_to_contract             BOOLEAN := FALSE,
   ship_addr_flag                 BOOLEAN := FALSE,
   return_addr_flag               BOOLEAN := FALSE,
   latest_return_date             BOOLEAN := FALSE,
   return_addr_no                 BOOLEAN := FALSE,
   ship_addr_country_code         BOOLEAN := FALSE,
   ship_addr_name                 BOOLEAN := FALSE,
   ship_address1                  BOOLEAN := FALSE,
   ship_address2                  BOOLEAN := FALSE,
   ship_addr_zip_code             BOOLEAN := FALSE,
   ship_addr_city                 BOOLEAN := FALSE,
   ship_addr_state                BOOLEAN := FALSE,
   ship_addr_county               BOOLEAN := FALSE,
   return_addr_country_code       BOOLEAN := FALSE,
   return_addr_name               BOOLEAN := FALSE,
   return_address1                BOOLEAN := FALSE,
   return_address2                BOOLEAN := FALSE,
   return_addr_zip_code           BOOLEAN := FALSE,
   return_addr_city               BOOLEAN := FALSE,
   return_addr_state              BOOLEAN := FALSE,
   return_addr_county             BOOLEAN := FALSE,
   ship_via_code                  BOOLEAN := FALSE,
   delivery_terms                 BOOLEAN := FALSE,
   intrastat_exempt               BOOLEAN := FALSE,
   receipt_rma_no                 BOOLEAN := FALSE,
   originating_rma_no             BOOLEAN := FALSE,
   return_from_customer_no        BOOLEAN := FALSE);

state_separator_   CONSTANT VARCHAR2(1)   := Client_SYS.field_separator_;


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Too_Many_Rows___ (
   rma_no_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   rma_no_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ return_material_tab%ROWTYPE );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ return_material_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   rma_no_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   rma_no_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   rma_no_ IN NUMBER) RETURN return_material_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   rma_no_ IN NUMBER) RETURN return_material_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   rma_no_ IN NUMBER ) RETURN return_material_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   rma_no_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   rma_no_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN return_material_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN return_material_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN return_material_tab%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN return_material_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN return_material_tab%ROWTYPE,
   newrec_ IN return_material_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Cancel_Reason_Ref___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE );

PROCEDURE Check_Common___ (
   oldrec_ IN     return_material_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     return_material_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     RETURN_MATERIAL_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY return_material_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN RETURN_MATERIAL_TAB%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN return_material_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN return_material_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY return_material_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

PROCEDURE Cancel_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Complete_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Deny_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Has_Charge_Line___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Release_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Release_Allowed___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

FUNCTION All_Lines_Cancel___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION All_Lines_Completed___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION All_Lines_Denied___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION All_Lines_Denied_Or_Cancel___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION All_Lines_Planned_Or_Denied___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION All_Received_Handled___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Fully_Received___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Line_Was_Received___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Some_Lines_Released___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   state_ IN     VARCHAR2 );

PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     return_material_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY return_material_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

FUNCTION All_Lines_Approved___ (
   rec_ IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Any_Lines_Exists___ (
   rma_no_ IN NUMBER ) RETURN BOOLEAN;

FUNCTION Any_Charges_Exists___ (
   rma_no_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Modify_Rma_Defaults___ (
   rma_no_                    IN NUMBER,
   pay_tax_                   IN BOOLEAN,
   update_tax_from_ship_addr_ IN BOOLEAN );

FUNCTION Jinsui_Order_is_Connected___(rma_no_ IN NUMBER) RETURN BOOLEAN;

FUNCTION Check_Debit_Inv_Numbers___ (
   rma_no_ IN NUMBER ) RETURN NUMBER;

PROCEDURE Validate_Jinsui_Constraints___(newrec_ IN RETURN_MATERIAL_TAB%ROWTYPE);

PROCEDURE Validate_Tax_Calc_Basis___ (
   newrec_   IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE );

FUNCTION Credit_Approve_Allowed___ (
   rma_no_  IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Validate_Order_No___ (
   rma_no_         IN NUMBER,
   rma_contract_   IN VARCHAR2,
   rma_curr_code_  IN VARCHAR2,
   rma_customer_   IN VARCHAR2,
   order_no_       IN VARCHAR2 );

PROCEDURE Validate_Shipment_Id___ (
   rma_no_         IN NUMBER,
   rma_contract_   IN VARCHAR2,
   rma_curr_code_  IN VARCHAR2,
   rma_customer_   IN VARCHAR2,
   shipment_id_    IN NUMBER );

PROCEDURE Exist_Return_To_Vendor_No___ (
   return_to_vendor_no_ IN VARCHAR2 );

PROCEDURE Validate_Retn_To_Vendor_No___ (
   rma_no_               IN NUMBER,
   return_to_vendor_no_  IN VARCHAR2 );

PROCEDURE Validate_Return_Addr_No___ (
   rma_no_               IN NUMBER,
   return_addr_no_       IN VARCHAR2,
   return_to_vendor_no_  IN VARCHAR2,
   return_to_contract_   IN VARCHAR2 );

PROCEDURE Validate_Return_To_Contract___ (
   rma_no_               IN NUMBER,
   contract_             IN VARCHAR2,
   return_to_contract_   IN VARCHAR2);

PROCEDURE Validate_Ship_Via_Del_Term___(
   rma_no_  IN   VARCHAR2);

PROCEDURE Modify_Supply_Site_Rma___ (
   rma_no_ IN NUMBER,
   attr_   IN OUT NOCOPY VARCHAR2,
   changed_rec_ IN Indicator_Rec,
   suppliy_site_rma_rec_ IN return_material_tab%ROWTYPE );

PROCEDURE Restrict_Multi_Site_Update___ (
   newrec_  IN RETURN_MATERIAL_TAB%ROWTYPE,
   oldrec_  IN RETURN_MATERIAL_TAB%ROWTYPE );

PROCEDURE Modify_Rma_Line_Po_Info___ (
   rma_no_              IN NUMBER,
   return_to_contract_  IN VARCHAR2,
   return_to_vendor_no_ IN VARCHAR2 );

FUNCTION Build_Attr_For_New___ (
	attr_ IN  VARCHAR2) RETURN VARCHAR2;

FUNCTION Build_Attr_Supp_Rma_Head___ (
	   rec_                IN  RETURN_MATERIAL_TAB%ROWTYPE,
      demand_rma_no_      IN  NUMBER,
      demand_rma_line_no_ IN  NUMBER) RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rowkey_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE
   IS
      rec_ return_material_tab%ROWTYPE;
   BEGIN
      SELECT rma_no
         INTO  rec_.rma_no
         FROM  return_material_tab
         WHERE rowkey = rowkey_;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rec_.rma_no, 'Get_Key_By_Rowkey');
   END Base;

BEGIN
   RETURN Base(rowkey_);
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      rma_no_ IN NUMBER )
   IS
   BEGIN
      IF (NOT Check_Exist___(rma_no_)) THEN
         Raise_Record_Not_Exist___(rma_no_);
      END IF;
   END Base;

BEGIN
   Base(rma_no_);
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   rma_no_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Check_Exist___(rma_no_);
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Date_Requested (
   rma_no_ IN NUMBER ) RETURN DATE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN DATE
   IS
      temp_ return_material_tab.date_requested%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT date_requested
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Date_Requested');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Date_Requested;


--@IgnoreMissingSysinit
FUNCTION Get_Currency_Code (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.currency_code%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT currency_code
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Currency_Code');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Currency_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.customer_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT customer_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Customer_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Customer_No;


--@IgnoreMissingSysinit
FUNCTION Get_Contract (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.contract%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT contract
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Contract');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Return_Approver_Id (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_approver_id%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_approver_id
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_Approver_Id');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_Approver_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Cust_Ref (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.cust_ref%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT cust_ref
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Cust_Ref');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Cust_Ref;


--@IgnoreMissingSysinit
FUNCTION Get_Rma_Report_Printed (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.rma_report_printed%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rma_report_printed
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Rma_Report_Printed_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Rma_Report_Printed');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Rma_Report_Printed;


--@IgnoreMissingSysinit
FUNCTION Get_Rma_Report_Printed_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.rma_report_printed%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.rma_report_printed%TYPE
   IS
      temp_ return_material_tab.rma_report_printed%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rma_report_printed
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Rma_Report_Printed_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Rma_Report_Printed_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Id (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ return_material_tab.note_id%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT note_id
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Note_Id');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Note_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Language_Code (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.language_code%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT language_code
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Language_Code');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Language_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Vat (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.vat%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT vat
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Pay_Vat_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Vat');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Vat;


--@IgnoreMissingSysinit
FUNCTION Get_Vat_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.vat%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.vat%TYPE
   IS
      temp_ return_material_tab.vat%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT vat
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Vat_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Vat_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.tax_liability%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT tax_liability
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Tax_Liability');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Tax_Liability;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No_Addr_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.customer_no_addr_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT customer_no_addr_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Customer_No_Addr_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Customer_No_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No_Credit (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.customer_no_credit%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT customer_no_credit
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Customer_No_Credit');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Customer_No_Credit;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No_Credit_Addr_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.customer_no_credit_addr_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT customer_no_credit_addr_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Customer_No_Credit_Addr_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Customer_No_Credit_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Case_Id (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ return_material_tab.case_id%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT case_id
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Case_Id');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Case_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Task_Id (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ return_material_tab.task_id%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT task_id
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Task_Id');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Task_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Jinsui_Invoice (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.jinsui_invoice%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT jinsui_invoice
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Fnd_Boolean_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Jinsui_Invoice');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Jinsui_Invoice;


--@IgnoreMissingSysinit
FUNCTION Get_Jinsui_Invoice_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.jinsui_invoice%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.jinsui_invoice%TYPE
   IS
      temp_ return_material_tab.jinsui_invoice%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT jinsui_invoice
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Jinsui_Invoice_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Jinsui_Invoice_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Country (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.supply_country%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT supply_country
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Iso_Country_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Supply_Country');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Supply_Country;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Country_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.supply_country%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.supply_country%TYPE
   IS
      temp_ return_material_tab.supply_country%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT supply_country
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Supply_Country_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Supply_Country_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Use_Price_Incl_Tax (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.use_price_incl_tax%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT use_price_incl_tax
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Fnd_Boolean_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Use_Price_Incl_Tax');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Use_Price_Incl_Tax;


--@IgnoreMissingSysinit
FUNCTION Get_Use_Price_Incl_Tax_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.use_price_incl_tax%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.use_price_incl_tax%TYPE
   IS
      temp_ return_material_tab.use_price_incl_tax%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT use_price_incl_tax
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Use_Price_Incl_Tax_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Use_Price_Incl_Tax_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Order_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.order_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT order_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Order_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Order_No;

FUNCTION Get_Rma_No (
   rowkey_ IN varchar2 ) RETURN VARCHAR2
IS

cursor get_info is
select t.rma_no 
from   RETURN_MATERIAL_tab t 
where  t.rowkey = rowkey_
;

rma_ number;

BEGIN
  
open get_info;
fetch get_info into rma_;
close get_info;
      
   RETURN rma_;
END Get_Rma_No;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Id (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ return_material_tab.shipment_id%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT shipment_id
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Shipment_Id');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Shipment_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Return_To_Vendor_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_to_vendor_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_to_vendor_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_To_Vendor_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_To_Vendor_No;


--@IgnoreMissingSysinit
FUNCTION Get_Return_To_Contract (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_to_contract%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_to_contract
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_To_Contract');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_To_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_Flag (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_flag%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_flag
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Gen_Yes_No_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_Flag');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_Flag_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.ship_addr_flag%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.ship_addr_flag%TYPE
   IS
      temp_ return_material_tab.ship_addr_flag%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_flag
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_Flag_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_Flag_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Return_Addr_Flag (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_addr_flag%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_addr_flag
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Gen_Yes_No_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_Addr_Flag');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_Addr_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Return_Addr_Flag_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.return_addr_flag%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.return_addr_flag%TYPE
   IS
      temp_ return_material_tab.return_addr_flag%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_addr_flag
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_Addr_Flag_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_Addr_Flag_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Latest_Return_Date (
   rma_no_ IN NUMBER ) RETURN DATE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN DATE
   IS
      temp_ return_material_tab.latest_return_date%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT latest_return_date
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Latest_Return_Date');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Latest_Return_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Return_Addr_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_addr_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_addr_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_Addr_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_Country_Code (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_country_code%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_country_code
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_Country_Code');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_Country_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_Zip_Code (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_zip_code%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_zip_code
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_Zip_Code');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_Zip_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_City (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_city%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_city
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_City');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_City;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_State (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_state%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_state
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_State');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_State;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_County (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_addr_county%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_addr_county
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Addr_County');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Addr_County;


--@IgnoreMissingSysinit
FUNCTION Get_Return_Addr_Country_Code (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_addr_country_code%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_addr_country_code
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_Addr_Country_Code');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_Addr_Country_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Via_Code (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.ship_via_code%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT ship_via_code
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Ship_Via_Code');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Ship_Via_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Terms (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.delivery_terms%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT delivery_terms
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Delivery_Terms');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Delivery_Terms;


--@IgnoreMissingSysinit
FUNCTION Get_Intrastat_Exempt (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.intrastat_exempt%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT intrastat_exempt
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN Intrastat_Exempt_API.Decode(temp_);
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Intrastat_Exempt');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Intrastat_Exempt;


--@IgnoreMissingSysinit
FUNCTION Get_Intrastat_Exempt_Db (
   rma_no_ IN NUMBER ) RETURN return_material_tab.intrastat_exempt%TYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab.intrastat_exempt%TYPE
   IS
      temp_ return_material_tab.intrastat_exempt%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT intrastat_exempt
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Intrastat_Exempt_Db');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Intrastat_Exempt_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Receipt_Rma_No (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ return_material_tab.receipt_rma_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT receipt_rma_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Receipt_Rma_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Receipt_Rma_No;


--@IgnoreMissingSysinit
FUNCTION Get_Originating_Rma_No (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      temp_ return_material_tab.originating_rma_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT originating_rma_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Originating_Rma_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Originating_Rma_No;


--@IgnoreMissingSysinit
FUNCTION Get_Return_From_Customer_No (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ return_material_tab.return_from_customer_no%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT return_from_customer_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Return_From_Customer_No');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Return_From_Customer_No;


--@IgnoreMissingSysinit
FUNCTION Get (
   rma_no_ IN NUMBER ) RETURN Public_Rec
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN Public_Rec
   IS
      temp_ Public_Rec;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rma_no,
             rowid, rowversion, rowkey, rowstate,
             date_requested, 
             currency_code, 
             customer_no, 
             contract, 
             return_approver_id, 
             cust_ref, 
             rma_report_printed, 
             note_id, 
             language_code, 
             vat, 
             tax_liability, 
             customer_no_addr_no, 
             customer_no_credit, 
             customer_no_credit_addr_no, 
             ship_addr_no, 
             case_id, 
             task_id, 
             jinsui_invoice, 
             supply_country, 
             use_price_incl_tax, 
             order_no, 
             shipment_id, 
             return_to_vendor_no, 
             return_to_contract, 
             ship_addr_flag, 
             return_addr_flag, 
             latest_return_date, 
             return_addr_no, 
             ship_addr_country_code, 
             ship_addr_zip_code, 
             ship_addr_city, 
             ship_addr_state, 
             ship_addr_county, 
             return_addr_country_code, 
             ship_via_code, 
             delivery_terms, 
             intrastat_exempt, 
             receipt_rma_no, 
             originating_rma_no, 
             return_from_customer_no
         INTO  temp_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      rowkey_ return_material_tab.rowkey%TYPE;
   BEGIN
      IF (rma_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rowkey
         INTO  rowkey_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN rowkey_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Objkey');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2 )
   IS
      dummy_ return_material_tab%ROWTYPE;
   BEGIN
      dummy_ := Lock_By_Id___(objid_, objversion_);
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   Base(info_, objid_, objversion_);
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   return_material_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'New__');
   Base(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   return_material_tab%ROWTYPE;
      newrec_   return_material_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Modify__');
   Base(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ return_material_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Remove__');
   Base(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Raise_Too_Many_Rows___ (
   rma_no_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      rma_no_ IN NUMBER,
      methodname_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Too_Many_Rows(Return_Material_API.lu_name_, NULL, methodname_);
   END Base;

BEGIN
   Base(rma_no_, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      rma_no_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(Return_Material_API.lu_name_);
   END Base;

BEGIN
   Base(rma_no_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ return_material_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Exist(Return_Material_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Exist___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      name_ IN VARCHAR2,
      value_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Item_Format(Return_Material_API.lu_name_, name_, value_);
   END Base;

BEGIN
   Base(name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ return_material_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Modified(Return_Material_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      rma_no_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Locked(Return_Material_API.lu_name_);
   END Base;

BEGIN
   Base(rma_no_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      rma_no_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Removed(Return_Material_API.lu_name_);
   END Base;

BEGIN
   Base(rma_no_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_      IN VARCHAR2,
      objversion_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        return_material_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      SELECT *
         INTO  rec_
         FROM  return_material_tab
         WHERE rowid = objid_
         AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Error_SYS.Record_Locked(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      WHEN no_data_found THEN
         BEGIN
            SELECT 1
               INTO  dummy_
               FROM  return_material_tab
               WHERE rowid = objid_;
            Raise_Record_Modified___(rec_);
         EXCEPTION
            WHEN no_data_found THEN
               Error_SYS.Record_Removed(lu_name_);
            WHEN too_many_rows THEN
               Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
         END;
   END Base;

BEGIN
   RETURN Base(objid_, objversion_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   rma_no_ IN NUMBER) RETURN return_material_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER) RETURN return_material_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        return_material_tab%ROWTYPE;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  return_material_tab
            WHERE rma_no = rma_no_
            FOR UPDATE;
         RETURN rec_;
      EXCEPTION
         WHEN no_data_found THEN
            Raise_Record_Removed___(rma_no_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(rma_no_, 'Lock_By_Keys___');
      END;
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   rma_no_ IN NUMBER) RETURN return_material_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER) RETURN return_material_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        return_material_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  return_material_tab
            WHERE rma_no = rma_no_
            FOR UPDATE NOWAIT;
         RETURN rec_;
      EXCEPTION
         WHEN row_locked THEN
            Error_SYS.Record_Locked(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(rma_no_, 'Lock_By_Keys___');
         WHEN no_data_found THEN
            BEGIN
               SELECT 1
                  INTO  dummy_
                  FROM  return_material_tab
                  WHERE rma_no = rma_no_;
               Raise_Record_Modified___(rec_);
            EXCEPTION
               WHEN no_data_found THEN
                  Raise_Record_Removed___(rma_no_);
               WHEN too_many_rows THEN
                  Raise_Too_Many_Rows___(rma_no_, 'Lock_By_Keys___');
            END;
      END;
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_ IN VARCHAR2 ) RETURN return_material_tab%ROWTYPE
   IS
      lu_rec_ return_material_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  return_material_tab
         WHERE rowid = objid_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Error_SYS.Record_Removed(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
   END Base;

BEGIN
   RETURN Base(objid_);
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   rma_no_ IN NUMBER ) RETURN return_material_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN return_material_tab%ROWTYPE
   IS
      lu_rec_ return_material_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN lu_rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Object_By_Keys___');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   rma_no_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      rma_no_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
   BEGIN
      SELECT 1
         INTO  dummy_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
      RETURN TRUE;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Check_Exist___');
   END Base;

BEGIN
   RETURN Base(rma_no_);
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objversion_
         FROM  return_material_tab
         WHERE rowid = objid_;
   EXCEPTION
      WHEN no_data_found THEN
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
   END Base;

BEGIN
   Base(objid_, objversion_);
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      objid_      IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      rma_no_ IN NUMBER )
   IS
   BEGIN
      SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objid_, objversion_
         FROM  return_material_tab
         WHERE rma_no = rma_no_;
   EXCEPTION
      WHEN no_data_found THEN
         objid_      := NULL;
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rma_no_, 'Get_Id_Version_By_Keys___');
   END Base;

BEGIN
   Base(objid_, objversion_, rma_no_);
END Get_Id_Version_By_Keys___;


FUNCTION Pack___ (
   rec_ IN return_material_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN return_material_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.rma_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RMA_NO', rec_.rma_no, attr_);
      END IF;
      IF (rec_.date_requested IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DATE_REQUESTED', rec_.date_requested, attr_);
      END IF;
      IF (rec_.currency_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
      END IF;
      IF (rec_.customer_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
      END IF;
      IF (rec_.contract IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
      END IF;
      IF (rec_.return_approver_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_APPROVER_ID', rec_.return_approver_id, attr_);
      END IF;
      IF (rec_.cust_ref IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CUST_REF', rec_.cust_ref, attr_);
      END IF;
      IF (rec_.rma_report_printed IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED', Rma_Report_Printed_API.Decode(rec_.rma_report_printed), attr_);
         Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED_DB', rec_.rma_report_printed, attr_);
      END IF;
      IF (rec_.note_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
      END IF;
      IF (rec_.note_text IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      END IF;
      IF (rec_.language_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('LANGUAGE_CODE', rec_.language_code, attr_);
      END IF;
      IF (rec_.vat IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('VAT', Pay_Vat_API.Decode(rec_.vat), attr_);
         Client_SYS.Add_To_Attr('VAT_DB', rec_.vat, attr_);
      END IF;
      IF (rec_.tax_liability IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
      END IF;
      IF (rec_.customer_no_addr_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO_ADDR_NO', rec_.customer_no_addr_no, attr_);
      END IF;
      IF (rec_.customer_no_credit IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT', rec_.customer_no_credit, attr_);
      END IF;
      IF (rec_.customer_no_credit_addr_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT_ADDR_NO', rec_.customer_no_credit_addr_no, attr_);
      END IF;
      IF (rec_.ship_addr_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
      END IF;
      IF (rec_.case_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CASE_ID', rec_.case_id, attr_);
      END IF;
      IF (rec_.task_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('TASK_ID', rec_.task_id, attr_);
      END IF;
      IF (rec_.jinsui_invoice IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('JINSUI_INVOICE', Fnd_Boolean_API.Decode(rec_.jinsui_invoice), attr_);
         Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB', rec_.jinsui_invoice, attr_);
      END IF;
      IF (rec_.supply_country IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', Iso_Country_API.Decode(rec_.supply_country), attr_);
         Client_SYS.Add_To_Attr('SUPPLY_COUNTRY_DB', rec_.supply_country, attr_);
      END IF;
      IF (rec_.use_price_incl_tax IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', Fnd_Boolean_API.Decode(rec_.use_price_incl_tax), attr_);
         Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX_DB', rec_.use_price_incl_tax, attr_);
      END IF;
      IF (rec_.cancel_reason IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
      END IF;
      IF (rec_.order_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
      END IF;
      IF (rec_.shipment_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIPMENT_ID', rec_.shipment_id, attr_);
      END IF;
      IF (rec_.return_to_vendor_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_TO_VENDOR_NO', rec_.return_to_vendor_no, attr_);
      END IF;
      IF (rec_.return_to_contract IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_TO_CONTRACT', rec_.return_to_contract, attr_);
      END IF;
      IF (rec_.ship_addr_flag IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.ship_addr_flag), attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG_DB', rec_.ship_addr_flag, attr_);
      END IF;
      IF (rec_.return_addr_flag IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.return_addr_flag), attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG_DB', rec_.return_addr_flag, attr_);
      END IF;
      IF (rec_.latest_return_date IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('LATEST_RETURN_DATE', rec_.latest_return_date, attr_);
      END IF;
      IF (rec_.return_addr_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_NO', rec_.return_addr_no, attr_);
      END IF;
      IF (rec_.ship_addr_country_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTRY_CODE', rec_.ship_addr_country_code, attr_);
      END IF;
      IF (rec_.ship_addr_name IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_NAME', rec_.ship_addr_name, attr_);
      END IF;
      IF (rec_.ship_address1 IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDRESS1', rec_.ship_address1, attr_);
      END IF;
      IF (rec_.ship_address2 IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDRESS2', rec_.ship_address2, attr_);
      END IF;
      IF (rec_.ship_addr_zip_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_ZIP_CODE', rec_.ship_addr_zip_code, attr_);
      END IF;
      IF (rec_.ship_addr_city IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_CITY', rec_.ship_addr_city, attr_);
      END IF;
      IF (rec_.ship_addr_state IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_STATE', rec_.ship_addr_state, attr_);
      END IF;
      IF (rec_.ship_addr_county IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTY', rec_.ship_addr_county, attr_);
      END IF;
      IF (rec_.return_addr_country_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTRY_CODE', rec_.return_addr_country_code, attr_);
      END IF;
      IF (rec_.return_addr_name IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_NAME', rec_.return_addr_name, attr_);
      END IF;
      IF (rec_.return_address1 IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDRESS1', rec_.return_address1, attr_);
      END IF;
      IF (rec_.return_address2 IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDRESS2', rec_.return_address2, attr_);
      END IF;
      IF (rec_.return_addr_zip_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_ZIP_CODE', rec_.return_addr_zip_code, attr_);
      END IF;
      IF (rec_.return_addr_city IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_CITY', rec_.return_addr_city, attr_);
      END IF;
      IF (rec_.return_addr_state IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_STATE', rec_.return_addr_state, attr_);
      END IF;
      IF (rec_.return_addr_county IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTY', rec_.return_addr_county, attr_);
      END IF;
      IF (rec_.ship_via_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
      END IF;
      IF (rec_.delivery_terms IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
      END IF;
      IF (rec_.intrastat_exempt IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', Intrastat_Exempt_API.Decode(rec_.intrastat_exempt), attr_);
         Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
      END IF;
      IF (rec_.receipt_rma_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RECEIPT_RMA_NO', rec_.receipt_rma_no, attr_);
      END IF;
      IF (rec_.originating_rma_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('ORIGINATING_RMA_NO', rec_.originating_rma_no, attr_);
      END IF;
      IF (rec_.return_from_customer_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('RETURN_FROM_CUSTOMER_NO', rec_.return_from_customer_no, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack___;


FUNCTION Pack___ (
   rec_ IN return_material_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN return_material_tab%ROWTYPE,
      indrec_ IN Indicator_Rec ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (indrec_.rma_no) THEN
         Client_SYS.Add_To_Attr('RMA_NO', rec_.rma_no, attr_);
      END IF;
      IF (indrec_.date_requested) THEN
         Client_SYS.Add_To_Attr('DATE_REQUESTED', rec_.date_requested, attr_);
      END IF;
      IF (indrec_.currency_code) THEN
         Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
      END IF;
      IF (indrec_.customer_no) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
      END IF;
      IF (indrec_.contract) THEN
         Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
      END IF;
      IF (indrec_.return_approver_id) THEN
         Client_SYS.Add_To_Attr('RETURN_APPROVER_ID', rec_.return_approver_id, attr_);
      END IF;
      IF (indrec_.cust_ref) THEN
         Client_SYS.Add_To_Attr('CUST_REF', rec_.cust_ref, attr_);
      END IF;
      IF (indrec_.rma_report_printed) THEN
         Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED', Rma_Report_Printed_API.Decode(rec_.rma_report_printed), attr_);
         Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED_DB', rec_.rma_report_printed, attr_);
      END IF;
      IF (indrec_.note_id) THEN
         Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
      END IF;
      IF (indrec_.note_text) THEN
         Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      END IF;
      IF (indrec_.language_code) THEN
         Client_SYS.Add_To_Attr('LANGUAGE_CODE', rec_.language_code, attr_);
      END IF;
      IF (indrec_.vat) THEN
         Client_SYS.Add_To_Attr('VAT', Pay_Vat_API.Decode(rec_.vat), attr_);
         Client_SYS.Add_To_Attr('VAT_DB', rec_.vat, attr_);
      END IF;
      IF (indrec_.tax_liability) THEN
         Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
      END IF;
      IF (indrec_.customer_no_addr_no) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO_ADDR_NO', rec_.customer_no_addr_no, attr_);
      END IF;
      IF (indrec_.customer_no_credit) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT', rec_.customer_no_credit, attr_);
      END IF;
      IF (indrec_.customer_no_credit_addr_no) THEN
         Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT_ADDR_NO', rec_.customer_no_credit_addr_no, attr_);
      END IF;
      IF (indrec_.ship_addr_no) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
      END IF;
      IF (indrec_.case_id) THEN
         Client_SYS.Add_To_Attr('CASE_ID', rec_.case_id, attr_);
      END IF;
      IF (indrec_.task_id) THEN
         Client_SYS.Add_To_Attr('TASK_ID', rec_.task_id, attr_);
      END IF;
      IF (indrec_.jinsui_invoice) THEN
         Client_SYS.Add_To_Attr('JINSUI_INVOICE', Fnd_Boolean_API.Decode(rec_.jinsui_invoice), attr_);
         Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB', rec_.jinsui_invoice, attr_);
      END IF;
      IF (indrec_.supply_country) THEN
         Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', Iso_Country_API.Decode(rec_.supply_country), attr_);
         Client_SYS.Add_To_Attr('SUPPLY_COUNTRY_DB', rec_.supply_country, attr_);
      END IF;
      IF (indrec_.use_price_incl_tax) THEN
         Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', Fnd_Boolean_API.Decode(rec_.use_price_incl_tax), attr_);
         Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX_DB', rec_.use_price_incl_tax, attr_);
      END IF;
      IF (indrec_.cancel_reason) THEN
         Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
      END IF;
      IF (indrec_.order_no) THEN
         Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
      END IF;
      IF (indrec_.shipment_id) THEN
         Client_SYS.Add_To_Attr('SHIPMENT_ID', rec_.shipment_id, attr_);
      END IF;
      IF (indrec_.return_to_vendor_no) THEN
         Client_SYS.Add_To_Attr('RETURN_TO_VENDOR_NO', rec_.return_to_vendor_no, attr_);
      END IF;
      IF (indrec_.return_to_contract) THEN
         Client_SYS.Add_To_Attr('RETURN_TO_CONTRACT', rec_.return_to_contract, attr_);
      END IF;
      IF (indrec_.ship_addr_flag) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.ship_addr_flag), attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG_DB', rec_.ship_addr_flag, attr_);
      END IF;
      IF (indrec_.return_addr_flag) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.return_addr_flag), attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG_DB', rec_.return_addr_flag, attr_);
      END IF;
      IF (indrec_.latest_return_date) THEN
         Client_SYS.Add_To_Attr('LATEST_RETURN_DATE', rec_.latest_return_date, attr_);
      END IF;
      IF (indrec_.return_addr_no) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_NO', rec_.return_addr_no, attr_);
      END IF;
      IF (indrec_.ship_addr_country_code) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTRY_CODE', rec_.ship_addr_country_code, attr_);
      END IF;
      IF (indrec_.ship_addr_name) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_NAME', rec_.ship_addr_name, attr_);
      END IF;
      IF (indrec_.ship_address1) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDRESS1', rec_.ship_address1, attr_);
      END IF;
      IF (indrec_.ship_address2) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDRESS2', rec_.ship_address2, attr_);
      END IF;
      IF (indrec_.ship_addr_zip_code) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_ZIP_CODE', rec_.ship_addr_zip_code, attr_);
      END IF;
      IF (indrec_.ship_addr_city) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_CITY', rec_.ship_addr_city, attr_);
      END IF;
      IF (indrec_.ship_addr_state) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_STATE', rec_.ship_addr_state, attr_);
      END IF;
      IF (indrec_.ship_addr_county) THEN
         Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTY', rec_.ship_addr_county, attr_);
      END IF;
      IF (indrec_.return_addr_country_code) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTRY_CODE', rec_.return_addr_country_code, attr_);
      END IF;
      IF (indrec_.return_addr_name) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_NAME', rec_.return_addr_name, attr_);
      END IF;
      IF (indrec_.return_address1) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDRESS1', rec_.return_address1, attr_);
      END IF;
      IF (indrec_.return_address2) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDRESS2', rec_.return_address2, attr_);
      END IF;
      IF (indrec_.return_addr_zip_code) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_ZIP_CODE', rec_.return_addr_zip_code, attr_);
      END IF;
      IF (indrec_.return_addr_city) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_CITY', rec_.return_addr_city, attr_);
      END IF;
      IF (indrec_.return_addr_state) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_STATE', rec_.return_addr_state, attr_);
      END IF;
      IF (indrec_.return_addr_county) THEN
         Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTY', rec_.return_addr_county, attr_);
      END IF;
      IF (indrec_.ship_via_code) THEN
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
      END IF;
      IF (indrec_.delivery_terms) THEN
         Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
      END IF;
      IF (indrec_.intrastat_exempt) THEN
         Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', Intrastat_Exempt_API.Decode(rec_.intrastat_exempt), attr_);
         Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
      END IF;
      IF (indrec_.receipt_rma_no) THEN
         Client_SYS.Add_To_Attr('RECEIPT_RMA_NO', rec_.receipt_rma_no, attr_);
      END IF;
      IF (indrec_.originating_rma_no) THEN
         Client_SYS.Add_To_Attr('ORIGINATING_RMA_NO', rec_.originating_rma_no, attr_);
      END IF;
      IF (indrec_.return_from_customer_no) THEN
         Client_SYS.Add_To_Attr('RETURN_FROM_CUSTOMER_NO', rec_.return_from_customer_no, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_, indrec_);
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN return_material_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN return_material_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('RMA_NO', rec_.rma_no, attr_);
      Client_SYS.Add_To_Attr('DATE_REQUESTED', rec_.date_requested, attr_);
      Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
      Client_SYS.Add_To_Attr('RETURN_APPROVER_ID', rec_.return_approver_id, attr_);
      Client_SYS.Add_To_Attr('CUST_REF', rec_.cust_ref, attr_);
      Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED', rec_.rma_report_printed, attr_);
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
      Client_SYS.Add_To_Attr('LANGUAGE_CODE', rec_.language_code, attr_);
      Client_SYS.Add_To_Attr('VAT', rec_.vat, attr_);
      Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO_ADDR_NO', rec_.customer_no_addr_no, attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT', rec_.customer_no_credit, attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT_ADDR_NO', rec_.customer_no_credit_addr_no, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
      Client_SYS.Add_To_Attr('CASE_ID', rec_.case_id, attr_);
      Client_SYS.Add_To_Attr('TASK_ID', rec_.task_id, attr_);
      Client_SYS.Add_To_Attr('JINSUI_INVOICE', rec_.jinsui_invoice, attr_);
      Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', rec_.supply_country, attr_);
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', rec_.use_price_incl_tax, attr_);
      Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
      Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_ID', rec_.shipment_id, attr_);
      Client_SYS.Add_To_Attr('RETURN_TO_VENDOR_NO', rec_.return_to_vendor_no, attr_);
      Client_SYS.Add_To_Attr('RETURN_TO_CONTRACT', rec_.return_to_contract, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG', rec_.ship_addr_flag, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG', rec_.return_addr_flag, attr_);
      Client_SYS.Add_To_Attr('LATEST_RETURN_DATE', rec_.latest_return_date, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_NO', rec_.return_addr_no, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTRY_CODE', rec_.ship_addr_country_code, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_NAME', rec_.ship_addr_name, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDRESS1', rec_.ship_address1, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDRESS2', rec_.ship_address2, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_ZIP_CODE', rec_.ship_addr_zip_code, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_CITY', rec_.ship_addr_city, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_STATE', rec_.ship_addr_state, attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTY', rec_.ship_addr_county, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTRY_CODE', rec_.return_addr_country_code, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_NAME', rec_.return_addr_name, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDRESS1', rec_.return_address1, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDRESS2', rec_.return_address2, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_ZIP_CODE', rec_.return_addr_zip_code, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_CITY', rec_.return_addr_city, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_STATE', rec_.return_addr_state, attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTY', rec_.return_addr_county, attr_);
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
      Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', rec_.intrastat_exempt, attr_);
      Client_SYS.Add_To_Attr('RECEIPT_RMA_NO', rec_.receipt_rma_no, attr_);
      Client_SYS.Add_To_Attr('ORIGINATING_RMA_NO', rec_.originating_rma_no, attr_);
      Client_SYS.Add_To_Attr('RETURN_FROM_CUSTOMER_NO', rec_.return_from_customer_no, attr_);
      Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
      Client_SYS.Add_To_Attr('ROWSTATE', rec_.rowstate, attr_);
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack_Table___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   
   PROCEDURE Base (
      indrec_ IN OUT NOCOPY Indicator_Rec )
   IS
      empty_indrec_ Indicator_Rec;
   BEGIN
      indrec_ := empty_indrec_;
   END Base;

BEGIN
   Base(indrec_);
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN return_material_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      rec_ IN return_material_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.rma_no := rec_.rma_no IS NOT NULL;
      indrec_.date_requested := rec_.date_requested IS NOT NULL;
      indrec_.currency_code := rec_.currency_code IS NOT NULL;
      indrec_.customer_no := rec_.customer_no IS NOT NULL;
      indrec_.contract := rec_.contract IS NOT NULL;
      indrec_.return_approver_id := rec_.return_approver_id IS NOT NULL;
      indrec_.cust_ref := rec_.cust_ref IS NOT NULL;
      indrec_.rma_report_printed := rec_.rma_report_printed IS NOT NULL;
      indrec_.note_id := rec_.note_id IS NOT NULL;
      indrec_.note_text := rec_.note_text IS NOT NULL;
      indrec_.language_code := rec_.language_code IS NOT NULL;
      indrec_.vat := rec_.vat IS NOT NULL;
      indrec_.tax_liability := rec_.tax_liability IS NOT NULL;
      indrec_.customer_no_addr_no := rec_.customer_no_addr_no IS NOT NULL;
      indrec_.customer_no_credit := rec_.customer_no_credit IS NOT NULL;
      indrec_.customer_no_credit_addr_no := rec_.customer_no_credit_addr_no IS NOT NULL;
      indrec_.ship_addr_no := rec_.ship_addr_no IS NOT NULL;
      indrec_.case_id := rec_.case_id IS NOT NULL;
      indrec_.task_id := rec_.task_id IS NOT NULL;
      indrec_.jinsui_invoice := rec_.jinsui_invoice IS NOT NULL;
      indrec_.supply_country := rec_.supply_country IS NOT NULL;
      indrec_.use_price_incl_tax := rec_.use_price_incl_tax IS NOT NULL;
      indrec_.cancel_reason := rec_.cancel_reason IS NOT NULL;
      indrec_.order_no := rec_.order_no IS NOT NULL;
      indrec_.shipment_id := rec_.shipment_id IS NOT NULL;
      indrec_.return_to_vendor_no := rec_.return_to_vendor_no IS NOT NULL;
      indrec_.return_to_contract := rec_.return_to_contract IS NOT NULL;
      indrec_.ship_addr_flag := rec_.ship_addr_flag IS NOT NULL;
      indrec_.return_addr_flag := rec_.return_addr_flag IS NOT NULL;
      indrec_.latest_return_date := rec_.latest_return_date IS NOT NULL;
      indrec_.return_addr_no := rec_.return_addr_no IS NOT NULL;
      indrec_.ship_addr_country_code := rec_.ship_addr_country_code IS NOT NULL;
      indrec_.ship_addr_name := rec_.ship_addr_name IS NOT NULL;
      indrec_.ship_address1 := rec_.ship_address1 IS NOT NULL;
      indrec_.ship_address2 := rec_.ship_address2 IS NOT NULL;
      indrec_.ship_addr_zip_code := rec_.ship_addr_zip_code IS NOT NULL;
      indrec_.ship_addr_city := rec_.ship_addr_city IS NOT NULL;
      indrec_.ship_addr_state := rec_.ship_addr_state IS NOT NULL;
      indrec_.ship_addr_county := rec_.ship_addr_county IS NOT NULL;
      indrec_.return_addr_country_code := rec_.return_addr_country_code IS NOT NULL;
      indrec_.return_addr_name := rec_.return_addr_name IS NOT NULL;
      indrec_.return_address1 := rec_.return_address1 IS NOT NULL;
      indrec_.return_address2 := rec_.return_address2 IS NOT NULL;
      indrec_.return_addr_zip_code := rec_.return_addr_zip_code IS NOT NULL;
      indrec_.return_addr_city := rec_.return_addr_city IS NOT NULL;
      indrec_.return_addr_state := rec_.return_addr_state IS NOT NULL;
      indrec_.return_addr_county := rec_.return_addr_county IS NOT NULL;
      indrec_.ship_via_code := rec_.ship_via_code IS NOT NULL;
      indrec_.delivery_terms := rec_.delivery_terms IS NOT NULL;
      indrec_.intrastat_exempt := rec_.intrastat_exempt IS NOT NULL;
      indrec_.receipt_rma_no := rec_.receipt_rma_no IS NOT NULL;
      indrec_.originating_rma_no := rec_.originating_rma_no IS NOT NULL;
      indrec_.return_from_customer_no := rec_.return_from_customer_no IS NOT NULL;
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN return_material_tab%ROWTYPE,
   newrec_ IN return_material_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      oldrec_ IN return_material_tab%ROWTYPE,
      newrec_ IN return_material_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.rma_no := Validate_SYS.Is_Changed(oldrec_.rma_no, newrec_.rma_no);
      indrec_.date_requested := Validate_SYS.Is_Changed(oldrec_.date_requested, newrec_.date_requested);
      indrec_.currency_code := Validate_SYS.Is_Changed(oldrec_.currency_code, newrec_.currency_code);
      indrec_.customer_no := Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no);
      indrec_.contract := Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract);
      indrec_.return_approver_id := Validate_SYS.Is_Changed(oldrec_.return_approver_id, newrec_.return_approver_id);
      indrec_.cust_ref := Validate_SYS.Is_Changed(oldrec_.cust_ref, newrec_.cust_ref);
      indrec_.rma_report_printed := Validate_SYS.Is_Changed(oldrec_.rma_report_printed, newrec_.rma_report_printed);
      indrec_.note_id := Validate_SYS.Is_Changed(oldrec_.note_id, newrec_.note_id);
      indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
      indrec_.language_code := Validate_SYS.Is_Changed(oldrec_.language_code, newrec_.language_code);
      indrec_.vat := Validate_SYS.Is_Changed(oldrec_.vat, newrec_.vat);
      indrec_.tax_liability := Validate_SYS.Is_Changed(oldrec_.tax_liability, newrec_.tax_liability);
      indrec_.customer_no_addr_no := Validate_SYS.Is_Changed(oldrec_.customer_no_addr_no, newrec_.customer_no_addr_no);
      indrec_.customer_no_credit := Validate_SYS.Is_Changed(oldrec_.customer_no_credit, newrec_.customer_no_credit);
      indrec_.customer_no_credit_addr_no := Validate_SYS.Is_Changed(oldrec_.customer_no_credit_addr_no, newrec_.customer_no_credit_addr_no);
      indrec_.ship_addr_no := Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no);
      indrec_.case_id := Validate_SYS.Is_Changed(oldrec_.case_id, newrec_.case_id);
      indrec_.task_id := Validate_SYS.Is_Changed(oldrec_.task_id, newrec_.task_id);
      indrec_.jinsui_invoice := Validate_SYS.Is_Changed(oldrec_.jinsui_invoice, newrec_.jinsui_invoice);
      indrec_.supply_country := Validate_SYS.Is_Changed(oldrec_.supply_country, newrec_.supply_country);
      indrec_.use_price_incl_tax := Validate_SYS.Is_Changed(oldrec_.use_price_incl_tax, newrec_.use_price_incl_tax);
      indrec_.cancel_reason := Validate_SYS.Is_Changed(oldrec_.cancel_reason, newrec_.cancel_reason);
      indrec_.order_no := Validate_SYS.Is_Changed(oldrec_.order_no, newrec_.order_no);
      indrec_.shipment_id := Validate_SYS.Is_Changed(oldrec_.shipment_id, newrec_.shipment_id);
      indrec_.return_to_vendor_no := Validate_SYS.Is_Changed(oldrec_.return_to_vendor_no, newrec_.return_to_vendor_no);
      indrec_.return_to_contract := Validate_SYS.Is_Changed(oldrec_.return_to_contract, newrec_.return_to_contract);
      indrec_.ship_addr_flag := Validate_SYS.Is_Changed(oldrec_.ship_addr_flag, newrec_.ship_addr_flag);
      indrec_.return_addr_flag := Validate_SYS.Is_Changed(oldrec_.return_addr_flag, newrec_.return_addr_flag);
      indrec_.latest_return_date := Validate_SYS.Is_Changed(oldrec_.latest_return_date, newrec_.latest_return_date);
      indrec_.return_addr_no := Validate_SYS.Is_Changed(oldrec_.return_addr_no, newrec_.return_addr_no);
      indrec_.ship_addr_country_code := Validate_SYS.Is_Changed(oldrec_.ship_addr_country_code, newrec_.ship_addr_country_code);
      indrec_.ship_addr_name := Validate_SYS.Is_Changed(oldrec_.ship_addr_name, newrec_.ship_addr_name);
      indrec_.ship_address1 := Validate_SYS.Is_Changed(oldrec_.ship_address1, newrec_.ship_address1);
      indrec_.ship_address2 := Validate_SYS.Is_Changed(oldrec_.ship_address2, newrec_.ship_address2);
      indrec_.ship_addr_zip_code := Validate_SYS.Is_Changed(oldrec_.ship_addr_zip_code, newrec_.ship_addr_zip_code);
      indrec_.ship_addr_city := Validate_SYS.Is_Changed(oldrec_.ship_addr_city, newrec_.ship_addr_city);
      indrec_.ship_addr_state := Validate_SYS.Is_Changed(oldrec_.ship_addr_state, newrec_.ship_addr_state);
      indrec_.ship_addr_county := Validate_SYS.Is_Changed(oldrec_.ship_addr_county, newrec_.ship_addr_county);
      indrec_.return_addr_country_code := Validate_SYS.Is_Changed(oldrec_.return_addr_country_code, newrec_.return_addr_country_code);
      indrec_.return_addr_name := Validate_SYS.Is_Changed(oldrec_.return_addr_name, newrec_.return_addr_name);
      indrec_.return_address1 := Validate_SYS.Is_Changed(oldrec_.return_address1, newrec_.return_address1);
      indrec_.return_address2 := Validate_SYS.Is_Changed(oldrec_.return_address2, newrec_.return_address2);
      indrec_.return_addr_zip_code := Validate_SYS.Is_Changed(oldrec_.return_addr_zip_code, newrec_.return_addr_zip_code);
      indrec_.return_addr_city := Validate_SYS.Is_Changed(oldrec_.return_addr_city, newrec_.return_addr_city);
      indrec_.return_addr_state := Validate_SYS.Is_Changed(oldrec_.return_addr_state, newrec_.return_addr_state);
      indrec_.return_addr_county := Validate_SYS.Is_Changed(oldrec_.return_addr_county, newrec_.return_addr_county);
      indrec_.ship_via_code := Validate_SYS.Is_Changed(oldrec_.ship_via_code, newrec_.ship_via_code);
      indrec_.delivery_terms := Validate_SYS.Is_Changed(oldrec_.delivery_terms, newrec_.delivery_terms);
      indrec_.intrastat_exempt := Validate_SYS.Is_Changed(oldrec_.intrastat_exempt, newrec_.intrastat_exempt);
      indrec_.receipt_rma_no := Validate_SYS.Is_Changed(oldrec_.receipt_rma_no, newrec_.receipt_rma_no);
      indrec_.originating_rma_no := Validate_SYS.Is_Changed(oldrec_.originating_rma_no, newrec_.originating_rma_no);
      indrec_.return_from_customer_no := Validate_SYS.Is_Changed(oldrec_.return_from_customer_no, newrec_.return_from_customer_no);
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(oldrec_, newrec_);
END Get_Indicator_Rec___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE )
   IS
      attr_    VARCHAR2(32000);
      indrec_  Indicator_Rec;
   BEGIN
      Prepare_Insert___(attr_);
      Unpack___(newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE )
   IS
      objid_         VARCHAR2(20);
      objversion_    VARCHAR2(100);
      attr_          VARCHAR2(32000);
      indrec_        Indicator_Rec;
      emptyrec_      return_material_tab%ROWTYPE;
   BEGIN
      indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY return_material_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      newrec_         IN OUT NOCOPY return_material_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      objid_      VARCHAR2(20);
      objversion_ VARCHAR2(100);
      attr_       VARCHAR2(32000);
      indrec_     Indicator_rec;
      oldrec_     return_material_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(newrec_.rma_no);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(newrec_.rma_no);
      END IF;
      indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Base;

BEGIN
   Base(newrec_, lock_mode_wait_);
END Modify___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN return_material_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.rma_no||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  return_material_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  return_material_tab
            WHERE rma_no = remrec_.rma_no;
      END IF;
   END Base;

BEGIN
   Base(objid_, remrec_);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN return_material_tab%ROWTYPE )
   IS
   BEGIN
      Delete___(NULL, remrec_);
   END Base;

BEGIN
   Base(remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY return_material_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      remrec_         IN OUT NOCOPY return_material_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      oldrec_     return_material_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(remrec_.rma_no);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(remrec_.rma_no);
      END IF;
      Check_Delete___(oldrec_);
      Delete___(NULL, oldrec_);
   END Base;

BEGIN
   Base(remrec_, lock_mode_wait_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Check_Exist_Rma_For_Invoice (
   invoice_no_ IN VARCHAR2,
   company_ IN VARCHAR2) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      invoice_no_ IN VARCHAR2,
      company_ IN VARCHAR2) RETURN VARCHAR2
   IS
      dummy_ NUMBER;
   
      CURSOR get_rma_lines IS
         SELECT 1
         FROM  return_material_line_tab
         WHERE debit_invoice_no = invoice_no_
         AND   company = company_ ;
   BEGIN
      OPEN  get_rma_lines;
      FETCH get_rma_lines INTO dummy_;
      IF NOT get_rma_lines%FOUND THEN
         CLOSE get_rma_lines;
         RETURN 'FALSE';
      END IF;
      CLOSE get_rma_lines;
      RETURN 'TRUE';
   END Core;

BEGIN
   RETURN Core(invoice_no_, company_);
END Check_Exist_Rma_For_Invoice;


--@IgnoreMissingSysinit
FUNCTION Check_Exist_Rma_For_Order (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      order_no_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      dummy_ NUMBER;
   
      CURSOR get_rma_lines IS
         SELECT 1
         FROM return_material_line_tab
         WHERE  order_no = order_no_;
   BEGIN
      OPEN  get_rma_lines;
      FETCH get_rma_lines INTO dummy_;
      IF NOT get_rma_lines%FOUND THEN
         CLOSE get_rma_lines;
         RETURN 'FALSE';
      END IF;
      CLOSE get_rma_lines;
      RETURN 'TRUE';
   END Core;

BEGIN
   RETURN Core(order_no_);
END Check_Exist_Rma_For_Order;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_Country (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
     rec_   RETURN_MATERIAL_API.Public_Rec;
   BEGIN
      rec_ := Get(rma_no_);
      RETURN Cust_Ord_Customer_Address_API.Get_Country_Code(rec_.return_from_customer_no, rec_.ship_addr_no);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Ship_Addr_Country;


PROCEDURE Refresh_State (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
      -- Bug 131231, start
      rec_        RETURN_MATERIAL_TAB%ROWTYPE;
      -- Bug 131231, end
      attr_       VARCHAR2(2000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      -- Bug 131231, start
      rec_ := Lock_By_Keys_Nowait___(rma_no_);
      Finite_State_Machine___(rec_, 'RefreshState', attr_);
      -- Bug 131231, end
      trace_sys.field (' RMA refresh state :', attr_);
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Refresh_State');
   Core(rma_no_);
END Refresh_State;


PROCEDURE Is_Release_Allowed (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
      rec_    RETURN_MATERIAL_TAB%ROWTYPE;
      attr_   VARCHAR2(2000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      rec_ := Get_Object_By_Keys___(rma_no_);
      Release_Allowed___(rec_, attr_);
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Is_Release_Allowed');
   Core(rma_no_);
END Is_Release_Allowed;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Price (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
   BEGIN
      RETURN get_total_base_line__(rma_no_)+get_total_base_charge__(rma_no_);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Base_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Price (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
   BEGIN
      RETURN get_total_sale_line__(rma_no_)+get_total_sale_charge__(rma_no_);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Sale_Price;


--@IgnoreMissingSysinit
PROCEDURE Get_All_Totals (
   line_total_curr_   OUT NUMBER,
   line_total_gross_curr_     OUT NUMBER,
   line_total_base_   OUT NUMBER,
   line_total_gross_base_     OUT NUMBER,
   charge_total_curr_ OUT NUMBER,
   charge_total_base_ OUT NUMBER,
   charge_total_gross_curr_   OUT NUMBER,
   total_curr_        OUT NUMBER,
   total_base_        OUT NUMBER,
   rma_no_            IN  NUMBER )
IS
   
   PROCEDURE Core (
      line_total_curr_   OUT NUMBER,
      line_total_gross_curr_     OUT NUMBER,
      line_total_base_   OUT NUMBER,
      line_total_gross_base_     OUT NUMBER,
      charge_total_curr_ OUT NUMBER,
      charge_total_base_ OUT NUMBER,
      charge_total_gross_curr_   OUT NUMBER,
      total_curr_        OUT NUMBER,
      total_base_        OUT NUMBER,
      rma_no_            IN  NUMBER )
   IS
   BEGIN
      line_total_curr_   :=  NVL(Get_Total_Sale_Line__(rma_no_), 0);
      line_total_gross_curr_   := NVL(Get_Total_Sale_Line_Gross__(rma_no_), 0);
      line_total_base_   :=  NVL(Get_Total_Base_Line__(rma_no_), 0);
      line_total_gross_base_   := NVL(Get_Total_Base_Line_Gross__(rma_no_), 0);
      charge_total_curr_ :=  NVL(Get_Total_Sale_Charge__(rma_no_), 0);
      charge_total_base_ :=  NVL(Get_Total_Base_Charge__(rma_no_), 0);
      charge_total_gross_curr_ := NVL(Get_Total_Sale_Charge_Gross__(rma_no_), 0);
   
      total_curr_ := line_total_curr_ + charge_total_curr_;
      total_base_ := line_total_base_ + charge_total_base_;
   
   END Core;

BEGIN
   Core(line_total_curr_, line_total_gross_curr_, line_total_base_, line_total_gross_base_, charge_total_curr_, charge_total_base_, charge_total_gross_curr_, total_curr_, total_base_, rma_no_);
END Get_All_Totals;


--@IgnoreMissingSysinit
FUNCTION Get_Objstate (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_  RETURN_MATERIAL_TAB.rowstate%TYPE;
      CURSOR get_attr IS
         SELECT rowstate
         FROM   RETURN_MATERIAL_TAB
         WHERE  rma_no = rma_no_;
   BEGIN
      OPEN get_attr;
      FETCH get_attr INTO temp_;
      CLOSE get_attr;
      RETURN temp_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Objstate;


--@IgnoreMissingSysinit
FUNCTION Get_Rma_Total_Tax_Amount (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   
   IS
      total_tax_amount_  NUMBER := 0;
      ordrec_            RETURN_MATERIAL_TAB%ROWTYPE;
      company_           VARCHAR2(20);
      rounding_          NUMBER;
   
      CURSOR get_lines IS
         SELECT rma_no,rma_line_no , order_no ,currency_rate, conv_factor,company
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      ordrec_ := Get_Object_By_Keys___(rma_no_);
      company_ := Site_API.Get_Company(ordrec_.contract);
      rounding_ := Currency_Code_API.Get_Currency_Rounding(company_,ordrec_.currency_code);
   
      FOR next_line_ IN get_lines LOOP
         total_tax_amount_ := total_tax_amount_ + Return_Material_Line_API.Get_Total_Tax_Amount_Curr(rma_no_, next_line_.rma_line_no);
      END LOOP;
      total_tax_amount_ := ROUND(total_tax_amount_, rounding_);
   
      RETURN total_tax_amount_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Rma_Total_Tax_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_Rma_Total_Tax_Amount_Base (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_tax_amount_base_  NUMBER := 0;
      ordrec_            RETURN_MATERIAL_TAB%ROWTYPE;
      company_           VARCHAR2(20);
      rounding_          NUMBER;
   
      CURSOR get_lines IS
         SELECT rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      ordrec_ := Get_Object_By_Keys___(rma_no_);
      company_ := Site_API.Get_Company(ordrec_.contract);
      rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, ordrec_.currency_code);
   
      FOR next_line_ IN get_lines LOOP
         total_tax_amount_base_ := total_tax_amount_base_ + Return_Material_Line_API.Get_Total_Tax_Amount_Base(rma_no_, next_line_.rma_line_no);
      END LOOP;
   
      RETURN ROUND(total_tax_amount_base_, rounding_);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Rma_Total_Tax_Amount_Base;


--@IgnoreMissingSysinit
FUNCTION Get_Gross_Amount (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_net_amount_    NUMBER;
      total_tax_amount_    NUMBER;
      total_gross_amount_  NUMBER;
   BEGIN
      total_net_amount_           := Get_Total_Sale_Line__(rma_no_);
      total_tax_amount_           := Get_Rma_Total_Tax_Amount(rma_no_) ;
      total_gross_amount_         := total_net_amount_ + total_tax_amount_;
      RETURN total_gross_amount_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Gross_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_State (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      rowstate_  RETURN_MATERIAL_TAB.rowstate%TYPE;
      CURSOR get_attr IS
         SELECT rowstate
         FROM   RETURN_MATERIAL_TAB
         WHERE  rma_no = rma_no_;
   BEGIN
      OPEN get_attr;
      FETCH get_attr INTO rowstate_;
      CLOSE get_attr;
      RETURN Finite_State_Decode__(rowstate_);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_State;


PROCEDURE New (
   info_ OUT    VARCHAR2,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      info_ OUT    VARCHAR2,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS  
      new_attr_               VARCHAR2(32000);
      newrec_                 RETURN_MATERIAL_TAB%ROWTYPE;
      objid_                  RETURN_MATERIAL.objid%TYPE;
      objversion_             RETURN_MATERIAL.objversion%TYPE;
      indrec_      Indicator_Rec;
   BEGIN
      new_attr_ := Build_Attr_For_New___(attr_);
   
      Unpack___(newrec_, indrec_, new_attr_);
      Check_Insert___(newrec_, indrec_, new_attr_);
      Insert___(objid_, objversion_, newrec_, new_attr_);
   
      info_ := Client_SYS.Get_All_Info;
      attr_ := new_attr_;
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'New');
   Core(info_, attr_);
END New;


--@IgnoreMissingSysinit
FUNCTION Get_Tot_Charge_Sale_Tax_Amt (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_tax_amount_  NUMBER := 0;
      next_line_tax_     NUMBER := 0;
   
      CURSOR get_lines IS
         SELECT rma_charge_no
           FROM RETURN_MATERIAL_CHARGE_TAB
          WHERE rma_no = rma_no_;
   BEGIN
      IF (Exist_Charges__(rma_no_) = 0) THEN
         total_tax_amount_ := 0;
      ELSE
         FOR next_line_ IN get_lines LOOP
            next_line_tax_ := Return_Material_Charge_API.Get_Total_Tax_Amount_Curr(rma_no_, next_line_.rma_charge_no);
            total_tax_amount_ := total_tax_amount_ + next_line_tax_;
         END LOOP;
      END IF;
      RETURN total_tax_amount_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Tot_Charge_Sale_Tax_Amt;


PROCEDURE Disconnect_Case_Task (
   rma_no_  IN NUMBER,
   case_id_ IN NUMBER,
   task_id_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_  IN NUMBER,
      case_id_ IN NUMBER,
      task_id_ IN NUMBER )
   IS
      oldrec_     RETURN_MATERIAL_TAB%ROWTYPE;
      newrec_     RETURN_MATERIAL_TAB%ROWTYPE;
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
      attr_       VARCHAR2(2000);
      indrec_     Indicator_Rec;
   BEGIN
      oldrec_ := Lock_By_Keys___(rma_no_);
      newrec_ := oldrec_;
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('CASE_ID', case_id_  , attr_);
      Client_SYS.Add_To_Attr('TASK_ID', task_id_  , attr_);
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Disconnect_Case_Task');
   Core(rma_no_, case_id_, task_id_);
END Disconnect_Case_Task;


--@IgnoreMissingSysinit
FUNCTION Check_Debit_Inv_Numbers (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
   BEGIN
      RETURN Check_Debit_Inv_Numbers___(rma_no_);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Check_Debit_Inv_Numbers;


--@IgnoreMissingSysinit
FUNCTION Check_Line_Conn_Promo_Exist (
   rma_no_   IN  NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_   IN  NUMBER ) RETURN NUMBER
   
   IS
      temp_    NUMBER;
   
      CURSOR get_lines IS
         SELECT order_no, line_no, rel_no, line_item_no
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_;
   
   BEGIN
      temp_ := 0;
      FOR line_rec_ IN get_lines LOOP
         IF (Sales_Promotion_Util_API.Check_Promo_Exist_For_Ord_Line(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no)) THEN
            temp_ := 1;
            EXIT;
         END IF;
      END LOOP;
      RETURN temp_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Check_Line_Conn_Promo_Exist;


PROCEDURE Set_Cancel_Reason (
   rma_no_          IN VARCHAR2,
   cancel_reason_   IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      rma_no_          IN VARCHAR2,
      cancel_reason_   IN VARCHAR2 )
   IS
      oldrec_       RETURN_MATERIAL_TAB%ROWTYPE;
      newrec_       RETURN_MATERIAL_TAB%ROWTYPE;
      objid_        RETURN_MATERIAL.objid%TYPE;
      objversion_   RETURN_MATERIAL.objversion%TYPE;
      attr_         VARCHAR2(2000);
      indrec_       Indicator_Rec;
   BEGIN
   
      Get_Id_Version_By_Keys___(objid_, objversion_, rma_no_);
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Set_Item_Value('CANCEL_REASON', cancel_reason_, attr_);
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Set_Cancel_Reason');
   Core(rma_no_, cancel_reason_);
END Set_Cancel_Reason;


PROCEDURE Create_Supply_Site_Rma_Header (
   receipt_rma_no_     OUT NUMBER,
   demand_rma_no_      IN  NUMBER,
   demand_rma_line_no_ IN  NUMBER )
IS
   
   PROCEDURE Core (
      receipt_rma_no_     OUT NUMBER,
      demand_rma_no_      IN  NUMBER,
      demand_rma_line_no_ IN  NUMBER )
   IS
      rec_                   RETURN_MATERIAL_TAB%ROWTYPE;
      new_attr_              VARCHAR2(4000);   
      newrec_                RETURN_MATERIAL_TAB%ROWTYPE;
      objid_                 VARCHAR2(2000);
      objversion_            VARCHAR2(2000);
      site_customer_no_      CUST_ORD_CUSTOMER_TAB.customer_no%TYPE;
      indrec_                Indicator_Rec;   
   BEGIN
      rec_ := Get_Object_By_Keys___(demand_rma_no_);
   
      IF (rec_.contract != rec_.return_to_contract) THEN
         site_customer_no_ := Cust_Ord_Customer_API.Get_Customer_No_From_Contract(rec_.contract);
         IF (site_customer_no_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOINTCUST: Site should be connected to an internal customer if the return-to-site is different.');
         END IF;
      END IF;   
      new_attr_ := Build_Attr_Supp_Rma_Head___(rec_, demand_rma_no_, demand_rma_line_no_);
      Unpack___(newrec_, indrec_, new_attr_);
      Check_Insert___(newrec_, indrec_, new_attr_);
      Insert___(objid_, objversion_, newrec_, new_attr_);
   
      receipt_rma_no_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RMA_NO', new_attr_));
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Create_Supply_Site_Rma_Header');
   Core(receipt_rma_no_, demand_rma_no_, demand_rma_line_no_);
END Create_Supply_Site_Rma_Header;


--@IgnoreMissingSysinit
FUNCTION Credit_Approved (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      exist_  NUMBER;
   
      CURSOR approved_line_exist IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rowstate NOT IN ('Denied', 'Cancelled')
         AND credit_approver_id IS NOT NULL
         AND rma_no = rma_no_;
   BEGIN
      OPEN approved_line_exist;
      FETCH approved_line_exist INTO exist_;
      IF (approved_line_exist%FOUND) THEN
         exist_ := 1;
         CLOSE approved_line_exist;
      ELSE
         exist_ := 0;
         CLOSE approved_line_exist;
      END IF;
      RETURN exist_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Credit_Approved;


--@IgnoreMissingSysinit
FUNCTION Is_Expctr_Connected(
   rma_no_           IN  VARCHAR2) RETURN VARCHAR2
IS
   
   FUNCTION Core(
      rma_no_           IN  VARCHAR2) RETURN VARCHAR2
   
   IS
      connection_exist_ VARCHAR2(5) := 'FALSE';
   BEGIN
      $IF Component_Expctr_SYS.INSTALLED $THEN
         IF (Customer_Order_Flow_API.Get_License_Enabled(rma_no_, 'INTERACT_RMA') = 'TRUE') THEN
            connection_exist_ := Exp_License_Connect_Util_API.Is_Expctr_Connected(rma_no_, NULL, NULL, NULL, 'RMA');
         END IF;
      $ELSE
         NULL;
      $END
      RETURN connection_exist_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Is_Expctr_Connected;


PROCEDURE Automatic_Process_Rma(
   order_no_              IN VARCHAR2,
   line_no_               IN VARCHAR2,
   rel_no_                IN VARCHAR2,
   line_item_no_          IN NUMBER,
   received_qty_          IN NUMBER,
   received_rma_tab_      IN received_rma_table,
   rental_transfer_db_    IN VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE)
IS
   
   PROCEDURE Core(
      order_no_              IN VARCHAR2,
      line_no_               IN VARCHAR2,
      rel_no_                IN VARCHAR2,
      line_item_no_          IN NUMBER,
      received_qty_          IN NUMBER,
      received_rma_tab_      IN received_rma_table,
      rental_transfer_db_    IN VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE)   
   IS
      inv_count_               NUMBER;
      rma_no_                  NUMBER;
      rma_line_no_             NUMBER;
      rma_attr_                VARCHAR2(2000);
      order_no_list_           VARCHAR2(2000);
      info_                    VARCHAR2(2000);
      objid_                   VARCHAR2(2000);
      objversion_              VARCHAR2(2000);
      putaway_event_id_        NUMBER := Inventory_Putaway_Manager_API.Get_Next_Putaway_Event_Id;
      attr_                    VARCHAR2(2000); 
      receipt_no_              NUMBER;
      line_rec_                Customer_Order_Line_API.Public_Rec; 
      sales_part_rec_          Sales_Part_API.Public_Rec;
      
   BEGIN      
      line_rec_        := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);   
      sales_part_rec_  := Sales_Part_API.Get(line_rec_.contract, line_rec_.catalog_no);
   
      Client_SYS.Add_To_Attr('ORDER_NO', order_no_, order_no_list_);
      Client_SYS.Add_To_Attr('LINE_NO', line_no_, order_no_list_);
      Client_SYS.Add_To_Attr('REL_NO', rel_no_, order_no_list_);
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, order_no_list_);   
   
      Customer_Order_Flow_API.Create_Rma_Header_From_Co (rma_no_, line_rec_.customer_no, line_rec_.contract, order_no_list_);
      
      Client_SYS.Add_To_Attr('RMA_NO', rma_no_, rma_attr_);
      Client_SYS.Add_To_Attr('CONTRACT', line_rec_.contract, rma_attr_);
      Client_SYS.Add_To_Attr('QTY_TO_RETURN', received_qty_/sales_part_rec_.conv_factor*sales_part_rec_.inverted_conv_factor, rma_attr_);
      Client_SYS.Add_To_Attr('QTY_TO_RETURN_INV_UOM', received_qty_, rma_attr_);
      
      Customer_Order_Flow_API.Create_Rma_Line_From_Co_Line (inv_count_, rma_line_no_, order_no_, line_no_, rel_no_, line_item_no_, rma_attr_);
      
      Get_Id_Version_By_Keys___ (objid_, objversion_, rma_no_);
      Release__ (info_, objid_, objversion_, attr_, 'DO');
           
      IF (received_rma_tab_.COUNT > 0) THEN
         FOR index_ IN received_rma_tab_.FIRST .. received_rma_tab_.LAST LOOP      
            Return_Material_Line_API.Create_Cust_Receipt(receipt_no_,
                                                         'RETURN',
                                                         rma_no_,
                                                         rma_line_no_,
                                                         line_rec_.catalog_no,
                                                         line_rec_.contract,
                                                         received_rma_tab_(index_).configuration_id,
                                                         to_date(NULL),
                                                         received_rma_tab_(index_).location_no,
                                                         received_rma_tab_(index_).lot_batch_no,
                                                         received_rma_tab_(index_).serial_no,
                                                         received_rma_tab_(index_).eng_chg_level,
                                                         received_rma_tab_(index_).waiv_dev_rej_no,
                                                         received_rma_tab_(index_).part_ownership,
                                                         received_rma_tab_(index_).owning_vendor_no,
                                                         received_rma_tab_(index_).received_qty,
                                                         received_rma_tab_(index_).received_qty,
                                                         to_number(NULL),
                                                         NULL,
                                                         received_rma_tab_(index_).condition_code,
                                                         'FALSE',
                                                         putaway_event_id_,
                                                         rental_transfer_db_);                                  
         END LOOP;
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Automatic_Process_Rma');
   Core(order_no_, line_no_, rel_no_, line_item_no_, received_qty_, received_rma_tab_, rental_transfer_db_);
END Automatic_Process_Rma;

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY return_material_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN OUT NOCOPY return_material_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Finite_State_Init___(rec_, attr_);
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Finite_State_Init_', server_only_ => TRUE);
   Base(rec_, attr_);
END Finite_State_Init_;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      db_state_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
   END Base;

BEGIN
   RETURN Base(db_state_);
END Finite_State_Decode__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      client_state_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
   END Base;

BEGIN
   RETURN Base(client_state_);
END Finite_State_Encode__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
   
   PROCEDURE Base (
      client_values_ OUT VARCHAR2 )
   IS
   BEGIN
      client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
   END Base;

BEGIN
   Base(client_values_);
END Enumerate_States__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
   
   PROCEDURE Base (
      db_values_ OUT VARCHAR2 )
   IS
   BEGIN
      db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
   END Base;

BEGIN
   Base(db_values_);
END Enumerate_States_Db__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      db_state_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      IF (db_state_ IS NULL) THEN
         RETURN NULL;
      ELSIF (db_state_ = 'Cancelled') THEN
         RETURN NULL;
      ELSIF (db_state_ = 'Denied') THEN
         RETURN 'RefreshState^';
      ELSIF (db_state_ = 'PartiallyReceived') THEN
         RETURN 'Complete^RefreshState^';
      ELSIF (db_state_ = 'Planned') THEN
         RETURN 'Deny^RefreshState^Release^Cancel^';
      ELSIF (db_state_ = 'Received') THEN
         RETURN 'RefreshState^';
      ELSIF (db_state_ = 'Released') THEN
         RETURN 'RefreshState^Cancel^';
      ELSIF (db_state_ = 'ReturnCompleted') THEN
         RETURN 'RefreshState^';
      ELSE
         RETURN NULL;
      END IF;
   END Base;

BEGIN
   RETURN Base(db_state_);
END Finite_State_Events__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
   
   PROCEDURE Base (
      db_events_ OUT VARCHAR2 )
   IS
   BEGIN
      db_events_ := 'Cancel^Complete^Deny^RefreshState^Release^';
   END Base;

BEGIN
   Base(db_events_);
END Enumerate_Events__;


PROCEDURE Cancel__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ return_material_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Cancel', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Cancel__');
   Base(info_, objid_, objversion_, attr_, action_);
END Cancel__;


PROCEDURE Complete__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ return_material_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Complete', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Complete__');
   Base(info_, objid_, objversion_, attr_, action_);
END Complete__;


PROCEDURE Deny__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ return_material_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Deny', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Deny__');
   Base(info_, objid_, objversion_, attr_, action_);
END Deny__;


PROCEDURE Refresh_State__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ return_material_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'RefreshState', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Refresh_State__');
   Base(info_, objid_, objversion_, attr_, action_);
END Refresh_State__;


PROCEDURE Release__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ return_material_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Release', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Release__');
   Base(info_, objid_, objversion_, attr_, action_);
END Release__;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
   
   FUNCTION Base RETURN VARCHAR2 DETERMINISTIC
   IS
   BEGIN
      RETURN('Planned^Released^Received^PartiallyReceived^Denied^ReturnCompleted^Cancelled^');
   END Base;

BEGIN
   RETURN Base;
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
   
   FUNCTION Base RETURN VARCHAR2 DETERMINISTIC
   IS
   BEGIN
      RETURN('Planned^Released^Received^PartiallyReceived^Denied^ReturnCompleted^Cancelled^');
   END Base;

BEGIN
   RETURN Base;
END Get_Client_Values___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
      event_ IN     VARCHAR2,
      attr_  IN OUT NOCOPY VARCHAR2 )
   IS
      state_ return_material_tab.rowstate%TYPE;
   BEGIN
      state_ := rec_.rowstate;
      IF (state_ IS NULL) THEN
         IF (event_ IS NULL) THEN
            Finite_State_Set___(rec_, 'Planned');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Cancelled') THEN
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      ELSIF (state_ = 'Denied') THEN
         IF (event_ = 'RefreshState') THEN
            NULL;
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'PartiallyReceived') THEN
         IF (event_ IS NULL) THEN
            IF (Fully_Received___(rec_)) THEN
               Finite_State_Set___(rec_, 'Received');
               Finite_State_Machine___(rec_, NULL, attr_);
            ELSIF (All_Lines_Completed___(rec_)) THEN
               Finite_State_Set___(rec_, 'ReturnCompleted');
               Finite_State_Machine___(rec_, NULL, attr_);
            ELSIF (NOT Line_Was_Received___(rec_)) THEN
               Finite_State_Set___(rec_, 'Released');
               Finite_State_Machine___(rec_, NULL, attr_);
            END IF;
         ELSIF (event_ = 'Complete') THEN
            IF (All_Received_Handled___(rec_)) THEN
               Complete_All_Lines___(rec_, attr_);
               Finite_State_Machine___(rec_, NULL, attr_);
            END IF;
         ELSIF (event_ = 'RefreshState') THEN
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Planned') THEN
         IF (event_ IS NULL) THEN
            IF (Some_Lines_Released___(rec_)) THEN
               Finite_State_Set___(rec_, 'Released');
               Finite_State_Machine___(rec_, NULL, attr_);
            ELSIF (All_Lines_Denied___(rec_)) THEN
               Finite_State_Set___(rec_, 'Denied');
            ELSIF (All_Lines_Cancel___(rec_)) THEN
               Has_Charge_Line___(rec_, attr_);
               Finite_State_Set___(rec_, 'Cancelled');
            ELSIF (All_Lines_Denied_Or_Cancel___(rec_)) THEN
               Finite_State_Set___(rec_, 'Denied');
            END IF;
         ELSIF (event_ = 'Cancel') THEN
            Has_Charge_Line___(rec_, attr_);
            Cancel_All_Lines___(rec_, attr_);
            Finite_State_Set___(rec_, 'Cancelled');
         ELSIF (event_ = 'Deny') THEN
            IF (All_Lines_Planned_Or_Denied___(rec_)) THEN
               Deny_All_Lines___(rec_, attr_);
               Finite_State_Set___(rec_, 'Denied');
            END IF;
         ELSIF (event_ = 'RefreshState') THEN
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (event_ = 'Release') THEN
            Release_Allowed___(rec_, attr_);
            Release_All_Lines___(rec_, attr_);
            Finite_State_Set___(rec_, 'Released');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Received') THEN
         IF (event_ IS NULL) THEN
            IF (All_Lines_Completed___(rec_)) THEN
               Finite_State_Set___(rec_, 'ReturnCompleted');
               Finite_State_Machine___(rec_, NULL, attr_);
            ELSIF (NOT Fully_Received___(rec_)) THEN
               Finite_State_Set___(rec_, 'PartiallyReceived');
               Finite_State_Machine___(rec_, NULL, attr_);
            END IF;
         ELSIF (event_ = 'RefreshState') THEN
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Released') THEN
         IF (event_ IS NULL) THEN
            IF (Line_Was_Received___(rec_)) THEN
               Finite_State_Set___(rec_, 'PartiallyReceived');
               Finite_State_Machine___(rec_, NULL, attr_);
            ELSIF (All_Lines_Planned_Or_Denied___(rec_)) THEN
               Finite_State_Set___(rec_, 'Planned');
               Finite_State_Machine___(rec_, NULL, attr_);
            ELSIF (All_Lines_Denied_Or_Cancel___(rec_)) THEN
               Finite_State_Set___(rec_, 'Denied');
            ELSIF (All_Lines_Cancel___(rec_)) THEN
               Has_Charge_Line___(rec_, attr_);
               Finite_State_Set___(rec_, 'Cancelled');
            END IF;
         ELSIF (event_ = 'Cancel') THEN
            Has_Charge_Line___(rec_, attr_);
            Cancel_All_Lines___(rec_, attr_);
            Finite_State_Set___(rec_, 'Cancelled');
         ELSIF (event_ = 'RefreshState') THEN
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'ReturnCompleted') THEN
         IF (event_ IS NULL) THEN
            IF (NOT All_Lines_Completed___(rec_)) THEN
               Finite_State_Set___(rec_, 'PartiallyReceived');
               Finite_State_Machine___(rec_, NULL, attr_);
            END IF;
         ELSIF (event_ = 'RefreshState') THEN
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSE
         Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
      END IF;
   END Base;

BEGIN
   Base(rec_, event_, attr_);
END Finite_State_Machine___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     return_material_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN     return_material_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      state_ return_material_tab.rowstate%TYPE;
   BEGIN
      state_ := rec_.rowstate;
      Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
      Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
      Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
   END Base;

BEGIN
   Base(rec_, attr_);
END Finite_State_Add_To_Attr___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY return_material_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN OUT NOCOPY return_material_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Finite_State_Machine___(rec_, NULL, attr_);
      Finite_State_Add_To_Attr___(rec_, attr_);
   END Base;

BEGIN
   Base(rec_, attr_);
END Finite_State_Init___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Create_Replacement_Order__ (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN NULL;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Create_Replacement_Order__;


--@IgnoreMissingSysinit
FUNCTION Inquire_Operation__ (
   rma_no_    IN NUMBER,
   operation_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_    IN NUMBER,
      operation_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      result_ VARCHAR2(150) ;
      -- Bug 131547, start
      count_   NUMBER := 0;
      -- Bug 131547, end
   
      CURSOR get_lines IS
         SELECT rma_line_no
         FROM  RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_
         AND   credit_invoice_no IS NULL
         AND   order_no IS NOT NULL
         AND   rowstate NOT IN ('Denied', 'Cancelled');
   
   BEGIN
      IF operation_ = 'CREDIT' THEN
         FOR lrec_  IN get_lines LOOP
            IF (Return_Material_Line_API.Inquire_Operation__(rma_no_, lrec_.rma_line_no, 'CREDIT') = 'FALSE' )
            THEN
               -- Bug 131547, start
               count_ := count_ + 1;
               IF(count_ > 0) THEN
                  EXIT;
               END IF;
               -- Bug 131547, end
            END IF;
         END LOOP;
         --Bug 131547, Removed line number information from return parameter result_
         IF count_ = 0 THEN
            result_ := 'TRUE';
         ELSE
            result_ := 'FALSE';
         END IF;
      END IF;
   
      RETURN result_;
   END Core;

BEGIN
   RETURN Core(rma_no_, operation_);
END Inquire_Operation__;


--@IgnoreMissingSysinit
FUNCTION Get_Allowed_Operations__ (
   rma_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      dummy_               NUMBER;
      operations_          VARCHAR2(20);
      rec_                 RETURN_MATERIAL_TAB%ROWTYPE;
      all_approved_        BOOLEAN;
      some_not_credited_   BOOLEAN := FALSE;
      some_credited_       BOOLEAN := FALSE;
      -- Bug 109597, start
      approve_allowed_     BOOLEAN := FALSE;
      -- Bug 109597, end
   
      CURSOR some_lines_not_credited IS
         SELECT rma_line_no
           FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rma_no_
            AND credit_invoice_no IS NULL
            AND credit_approver_id IS NOT NULL;
   
      CURSOR some_charges_not_credited IS
         SELECT 1
           FROM RETURN_MATERIAL_CHARGE_TAB
          WHERE rma_no = rma_no_
            AND credit_invoice_no IS NULL
            AND credit_approver_id IS NOT NULL;
   
      -- check for possible RMA lines to create correction invoice
      CURSOR line_exist_for_correction IS
         SELECT 1
           FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rma_no_
            AND debit_invoice_no IS NOT NULL
            AND credit_approver_id IS NOT NULL
            AND credit_invoice_no IS NULL;
   
      CURSOR some_lines_credited IS
         SELECT rma_line_no
           FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rma_no_
            AND credit_invoice_no IS NOT NULL
            AND credit_approver_id IS NOT NULL;
   
   BEGIN
   
      rec_ := Get_Object_By_Keys___(rma_no_);
      --0 Release RMA
      IF (rec_.rowstate IN ('Planned')) THEN
         operations_ := 'R';
      ELSE
         operations_ := '*';
      END IF;
   
      --1 Deny RMA
      IF (rec_.rowstate IN ('Planned')) AND (All_Lines_Planned_Or_Denied___(rec_)) AND NOT(rec_.contract = rec_.return_to_contract AND rec_.originating_rma_no IS NOT NULL)
      THEN
         operations_ := operations_||'D';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
       --2 Complete RMA
      IF (rec_.rowstate IN ('PartiallyReceived')) AND (All_Received_Handled___(rec_)) AND NOT(rec_.contract = rec_.return_to_contract AND rec_.originating_rma_no IS NOT NULL)
      THEN
         operations_ := operations_||'C';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
      --3 Print RMA
      IF (rec_.rowstate NOT IN ('Denied', 'Planned', 'Cancelled')) THEN
         operations_ := operations_||'P';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
      all_approved_ := All_Lines_Approved___(rec_);
   
      FOR line_rec_ IN some_lines_not_credited LOOP
         IF (Return_Material_Line_API.Check_Exch_Charge_Order(rec_.rma_no, line_rec_.rma_line_no) = 'FALSE') THEN
            some_not_credited_:= TRUE;
            EXIT;
         END IF;
      END LOOP;
   
      IF NOT some_not_credited_ THEN
         OPEN some_charges_not_credited;
         FETCH some_charges_not_credited INTO dummy_;
         some_not_credited_ := some_charges_not_credited%FOUND;
         CLOSE some_charges_not_credited;
      END IF;
   
      --4 Credit Invoice
      IF ((rec_.rowstate NOT IN ('Denied', 'Planned', 'Cancelled')) AND (some_not_credited_)) THEN
         operations_ := operations_||'I';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
       -- Bug 109597, start
       IF NOT all_approved_ THEN
          approve_allowed_ := Credit_Approve_Allowed___(rec_.rma_no);
       END IF;
      -- Bug 109597, end
   
      -- Bug 109597, Modifeid if condition to check for zero qty to return non approved lines.
      --5 Approve For Credit
      IF ((rec_.rowstate NOT IN ('Denied', 'Planned', 'Cancelled'))
        AND (approve_allowed_))
      THEN
         operations_ := operations_||'A';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
      --6 Remove Credit Approval
      IF (rec_.rowstate NOT IN ('Denied', 'Planned', 'Cancelled'))
        AND (all_approved_) AND some_not_credited_
      THEN
         operations_ := operations_||'M';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
        --7 Correction Invoice
      IF (rec_.rowstate NOT IN ('Denied', 'Planned', 'Cancelled')) THEN
        -- check any appoved lines exist for RMA lines to create correction invoice
        OPEN line_exist_for_correction;
        FETCH line_exist_for_correction INTO dummy_;
        IF (line_exist_for_correction%FOUND) THEN
           operations_ := operations_||'C';
        ELSE
           operations_ := operations_||'*';
        END IF;
        CLOSE line_exist_for_correction;
      ELSE
        -- Planned/Denied state
        operations_ := operations_||'*';
      END IF;
   
      FOR line_rec_ IN some_lines_credited LOOP
         IF (Return_Material_Line_API.Check_Exch_Charge_Order(rec_.rma_no, line_rec_.rma_line_no) = 'FALSE') THEN
            some_credited_:= TRUE;
            EXIT;
         END IF;
      END LOOP;
   
      --8 Cancel RMA
      IF (rec_.rowstate IN ('Released', 'Planned'))
         AND NOT(rec_.rowstate IN ('Released') AND (some_not_credited_ OR some_credited_)) AND NOT(rec_.contract = rec_.return_to_contract AND rec_.originating_rma_no IS NOT NULL) THEN
         operations_ := operations_||'L';
      ELSE
         operations_ := operations_||'*';
      END IF;
   
   
      RETURN operations_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Allowed_Operations__;


PROCEDURE Set_Rma_Printed__ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
      attr_       VARCHAR2(2000);
      objid_      VARCHAR2(2000);
      objversion_ VARCHAR2(2000);
      -- Bug 108372, Changed variable type.
      message_    RETURN_MATERIAL_HISTORY_TAB.message_text%TYPE;
      newrec_     RETURN_MATERIAL_TAB%ROWTYPE;
      oldrec_     RETURN_MATERIAL_TAB%ROWTYPE;
      indrec_     Indicator_Rec;
   BEGIN
      IF NOT Check_Exist___(rma_no_) THEN
         Error_SYS.Record_Not_Exist(lu_name_);
      ELSE
         oldrec_ := Get_Object_By_Keys___(rma_no_);
         IF (oldrec_.rma_report_printed = 'PRINTED') THEN
            Trace_SYS.Field('RMA_REPORT_PRINTED is already set to PRINTED for RMA_NO', rma_no_);
         ELSE
            Get_Id_Version_By_Keys___(objid_, objversion_, rma_no_);
            Client_SYS.Clear_Attr(attr_);
            Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED_DB', 'PRINTED', attr_);
            newrec_ := oldrec_;
            Unpack___(newrec_, indrec_, attr_);
            Check_Update___(oldrec_, newrec_, indrec_, attr_);
            Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   
            message_ := Language_SYS.Translate_Constant(lu_name_, 'RMAPRINTED: RMA printed.');
            Return_Material_History_API.New(rma_no_, message_);
         END IF;
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Set_Rma_Printed__');
   Core(rma_no_);
END Set_Rma_Printed__;


--@IgnoreMissingSysinit
FUNCTION Exist_Charges__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
   BEGIN
     IF any_charges_exists___(rma_no_) THEN
        RETURN 1;
     ELSE
        RETURN 0;
     END IF;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Exist_Charges__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Line__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_base_price_ NUMBER := 0;
      CURSOR get_lines IS
         SELECT rma_no, rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_lines LOOP
         -- In Return_Material_Line_API.Get_Line_Total_Base_Price base amount is derived from curr amount.
         total_base_price_ := total_base_price_ + Return_Material_Line_API.Get_Line_Total_Base_Price(rec_.rma_no, rec_.rma_line_no);
      END LOOP;
      RETURN NVL(total_base_price_,0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Base_Line__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Line_Gross__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_base_line_gross_ NUMBER := 0;
   
      CURSOR get_lines IS
         SELECT rma_no, rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_lines LOOP
         -- In Return_Material_Line_API.Get_Total_Base_Price_Incl_Tax base amount is derived from curr amount.
         total_base_line_gross_ := total_base_line_gross_ + Return_Material_Line_API.Get_Total_Base_Price_Incl_Tax(rec_.rma_no, rec_.rma_line_no);
      END LOOP;
      RETURN NVL(total_base_line_gross_,0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Base_Line_Gross__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Line__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_sale_price_ NUMBER := 0;
      CURSOR get_lines IS
         SELECT rma_no, rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_lines LOOP
         total_sale_price_ := total_sale_price_ + Return_Material_Line_API.Get_Line_Total_Price(rec_.rma_no, rec_.rma_line_no);
      END LOOP;
      RETURN NVL(total_sale_price_,0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Sale_Line__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Line_Gross__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_sale_price_ NUMBER := 0;
      CURSOR get_lines IS
         SELECT rma_no, rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_lines LOOP
         total_sale_price_ := total_sale_price_ + Return_Material_Line_API.Get_Line_Total_Price_Incl_Tax(rec_.rma_no, rec_.rma_line_no);
      END LOOP;
      RETURN NVL(total_sale_price_,0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Sale_Line_Gross__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Charge__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_base_charge_ NUMBER := 0;
      CURSOR get_charges IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_charges LOOP
         -- In Return_Material_Charge_API.Get_Total_Base_Charged_Amount base amount is derived from curr amount.
         total_base_charge_ := Return_Material_Charge_API.Get_Total_Base_Charged_Amount(rma_no_, rec_.rma_charge_no) +  total_base_charge_;
      END LOOP;
      RETURN NVL(total_base_charge_, 0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Base_Charge__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Charge_Gross__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_base_charge_gross_ NUMBER := 0;
      CURSOR get_charges IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_charges LOOP
         -- In Return_Material_Charge_API.Get_Total_Base_Charged_Amount base amount is derived from curr amount.
         total_base_charge_gross_ := Return_Material_Charge_API.Get_Tot_Charged_Amt_Incl_Tax(rma_no_, rec_.rma_charge_no) +  total_base_charge_gross_;
      END LOOP;
      RETURN NVL(total_base_charge_gross_, 0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Base_Charge_Gross__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Charge__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_sale_charge_ NUMBER := 0;
   
      CURSOR get_charges IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_charges LOOP
         total_sale_charge_ := Return_Material_Charge_API.Get_Total_Charged_Amount(rma_no_, rec_.rma_charge_no) +  total_sale_charge_;
      END LOOP;
      RETURN NVL(total_sale_charge_, 0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Sale_Charge__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Charge_Gross__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      total_sale_charge_gross_ NUMBER := 0;
   
      CURSOR get_charges IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   BEGIN
      FOR rec_ IN get_charges LOOP
         total_sale_charge_gross_ := Return_Material_Charge_API.Get_Total_Charged_Amt_Incl_Tax(rma_no_, rec_.rma_charge_no) +  total_sale_charge_gross_;
      END LOOP;
      RETURN NVL(total_sale_charge_gross_, 0);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Get_Total_Sale_Charge_Gross__;


PROCEDURE Approve_For_Credit__ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
   
      CURSOR get_lines (rma_no_ NUMBER) IS
         SELECT rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    credit_invoice_no IS NULL
         AND    rowstate NOT IN ('Denied', 'Planned', 'Cancelled')
         AND    rental = Fnd_Boolean_API.DB_FALSE;
   
      CURSOR get_charges (rma_no_ NUMBER) IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    credit_invoice_no IS NULL
         AND    rowstate NOT IN ('Denied', 'Planned');
   BEGIN
   
      FOR line_rec_ IN get_lines(rma_no_) LOOP
         IF (Return_Material_Line_API.Check_Exch_Charge_Order(rma_no_,line_rec_.rma_line_no) = 'FALSE') THEN
            Return_Material_Line_API.Approve_For_Credit__(rma_no_,line_rec_.rma_line_no);
         END IF;
      END LOOP;
   
      FOR charge_rec_ IN get_charges(rma_no_) LOOP
         Return_Material_Charge_API.Approve_For_Credit__
           (rma_no_, charge_rec_.rma_charge_no);
      END LOOP;
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Approve_For_Credit__');
   Core(rma_no_);
END Approve_For_Credit__;


--@IgnoreMissingSysinit
FUNCTION Child_Tax_Update_Possible__ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      update_possible_       NUMBER := 0;
      salerec_               Sales_Part_API.Public_Rec;
      dummy_                 NUMBER;
   
      CURSOR get_unconnected_rma_lines IS
         SELECT  contract,catalog_no, credit_invoice_no, qty_scrapped, qty_returned_inv, qty_received
           FROM  RETURN_MATERIAL_LINE_TAB
          WHERE  rma_no = rma_no_
            AND  order_no IS NULL
            AND  debit_invoice_no IS NULL
            AND  credit_invoice_no IS NULL;
   
      CURSOR unconnected_charges_exist IS
         SELECT  1
           FROM  RETURN_MATERIAL_CHARGE_TAB
          WHERE  rma_no = rma_no_
            AND  order_no IS NULL
            AND  credit_invoice_no IS NULL;
   
   BEGIN
      --Check for rma lines
      FOR rec_ IN get_unconnected_rma_lines LOOP
         salerec_ := Sales_Part_API.Get(rec_.contract, rec_.catalog_no);
   
         --Checks if postings are created
         IF (NVL(rec_.qty_scrapped,0) > 0 ) OR (NVL(rec_.qty_returned_inv,0) > 0 ) OR
            ((NVL(rec_.qty_received,0) > 0) AND (salerec_.catalog_type ='NON'))  THEN
            update_possible_ := 0;
         ELSE
           update_possible_ := 1;
           EXIT;
         END IF;
      END LOOP;
   
      --Check for rma charges
      IF (update_possible_ = 0) THEN
         OPEN unconnected_charges_exist;
         FETCH unconnected_charges_exist INTO dummy_;
         IF (unconnected_charges_exist%FOUND) THEN
            update_possible_ := 1;
         END IF;
         CLOSE unconnected_charges_exist;
      END IF;
   
      RETURN update_possible_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Child_Tax_Update_Possible__;


PROCEDURE Remove_Credit_Approval__ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
   
      CURSOR get_lines (rma_no_ NUMBER) IS
         SELECT rma_line_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    credit_invoice_no IS NULL
         AND    rowstate NOT IN ('Denied', 'Cancelled', 'Planned')
         AND    rental = Fnd_Boolean_API.DB_FALSE;
   
      CURSOR get_charges (rma_no_ NUMBER) IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    credit_invoice_no IS NULL
         AND    rowstate NOT IN ('Denied', 'Planned');
   BEGIN
      FOR line_rec_ IN get_lines(rma_no_) LOOP
         IF (Return_Material_Line_API.Check_Exch_Charge_Order(rma_no_,line_rec_.rma_line_no) = 'FALSE') THEN
            Return_Material_Line_API.Remove_Credit_Approval__
              (rma_no_, line_rec_.rma_line_no);
         END IF;
      END LOOP;
   
      FOR charge_rec_ IN get_charges(rma_no_) LOOP
         Return_Material_Charge_API.Remove_Credit_Approval__
           (rma_no_, charge_rec_.rma_charge_no);
      END LOOP;
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Remove_Credit_Approval__');
   Core(rma_no_);
END Remove_Credit_Approval__;


PROCEDURE Lock_By_Keys__ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
      rec_ RETURN_MATERIAL_TAB%ROWTYPE;
   BEGIN
      -- Lock the RMA Header while it is being processed.
      rec_ := Lock_By_Keys___(rma_no_);
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Lock_By_Keys__');
   Core(rma_no_);
END Lock_By_Keys__;


PROCEDURE Approve_Charges__ (
   rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER )
   IS
      CURSOR get_charges IS
         SELECT rma_charge_no
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    credit_approver_id IS NULL
         AND    rowstate NOT IN ('Denied','Planned');
   BEGIN
      FOR charge_rec_ IN get_charges LOOP
         Return_Material_Charge_API.Approve_For_Credit__(rma_no_, charge_rec_.rma_charge_no);
      END LOOP;
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Approve_Charges__');
   Core(rma_no_);
END Approve_Charges__;


--@IgnoreMissingSysinit
FUNCTION Is_Create_Credit_Allowed__ (
   rma_no_           IN NUMBER,
   invoice_category_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Core (
      rma_no_           IN NUMBER,
      invoice_category_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   
      exist_ NUMBER;
      result_ VARCHAR2(5) := 'FALSE';
   
      CURSOR get_non_approved_lines_ IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rowstate NOT IN ('Denied', 'Cancelled')
         AND credit_approver_id IS NULL
         AND rma_no = rma_no_
         AND rental = Fnd_Boolean_API.DB_FALSE;
   
      CURSOR get_non_approved_charges_ IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rowstate != 'Denied'
         AND credit_approver_id IS NULL
         AND rma_no = rma_no_;
   
   
      CURSOR get_lines_for_corr IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE ((rowstate NOT IN ('Denied', 'Cancelled')
         AND credit_approver_id IS NULL)
         OR (credit_approver_id IS NOT NULL
         AND debit_invoice_no IS NULL
         AND credit_invoice_no IS NULL))
         AND rma_no = rma_no_
         AND rental = Fnd_Boolean_API.DB_FALSE;
   BEGIN
      IF (invoice_category_ = 'CREDIT') THEN
         OPEN get_non_approved_lines_;
         FETCH get_non_approved_lines_ INTO exist_;
         IF (get_non_approved_lines_%FOUND) THEN
            result_ := 'TRUE';
         ELSE
            OPEN get_non_approved_charges_;
            FETCH get_non_approved_charges_ INTO exist_;
            IF (get_non_approved_charges_%FOUND) THEN
               result_ := 'TRUE';
            END IF;
            CLOSE get_non_approved_charges_;
         END IF;
         CLOSE get_non_approved_lines_;
      ELSE
         OPEN get_lines_for_corr;
         FETCH get_lines_for_corr INTO exist_;
         IF (get_lines_for_corr%FOUND) THEN
            result_ := 'TRUE';
         END IF;
         CLOSE get_lines_for_corr;
      END IF;
      RETURN result_;
   END Core;

BEGIN
   RETURN Core(rma_no_, invoice_category_);
END Is_Create_Credit_Allowed__;


PROCEDURE Set_Receipt_Rma_No__ (
   rma_no_         IN NUMBER,
   receipt_rma_no_ IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_         IN NUMBER,
      receipt_rma_no_ IN NUMBER )
   IS
      newrec_      RETURN_MATERIAL_TAB%ROWTYPE;
      oldrec_      RETURN_MATERIAL_TAB%ROWTYPE;
      attr_        VARCHAR2(2000);
      objid_       RETURN_MATERIAL.objid%TYPE;
      objversion_  RETURN_MATERIAL.objversion%TYPE;
      indrec_      Indicator_Rec;
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('RECEIPT_RMA_NO', receipt_rma_no_, attr_);
      Get_Id_Version_By_Keys___(objid_, objversion_ , rma_no_);
      oldrec_ := Lock_By_Id___( objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Core;

BEGIN
   General_SYS.Init_Method(Return_Material_API.lu_name_, 'Return_Material_API', 'Set_Receipt_Rma_No__');
   Core(rma_no_, receipt_rma_no_);
END Set_Receipt_Rma_No__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('RMA_NO') THEN
            newrec_.rma_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.rma_no := TRUE;
         WHEN ('DATE_REQUESTED') THEN
            newrec_.date_requested := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.date_requested := TRUE;
         WHEN ('CURRENCY_CODE') THEN
            newrec_.currency_code := value_;
            indrec_.currency_code := TRUE;
         WHEN ('CUSTOMER_NO') THEN
            newrec_.customer_no := value_;
            indrec_.customer_no := TRUE;
         WHEN ('CONTRACT') THEN
            newrec_.contract := value_;
            indrec_.contract := TRUE;
         WHEN ('RETURN_APPROVER_ID') THEN
            newrec_.return_approver_id := value_;
            indrec_.return_approver_id := TRUE;
         WHEN ('CUST_REF') THEN
            newrec_.cust_ref := value_;
            indrec_.cust_ref := TRUE;
         WHEN ('RMA_REPORT_PRINTED') THEN
            newrec_.rma_report_printed := Rma_Report_Printed_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.rma_report_printed IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.rma_report_printed := TRUE;
         WHEN ('RMA_REPORT_PRINTED_DB') THEN
            newrec_.rma_report_printed := value_;
            indrec_.rma_report_printed := TRUE;
         WHEN ('NOTE_ID') THEN
            newrec_.note_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.note_id := TRUE;
         WHEN ('NOTE_TEXT') THEN
            newrec_.note_text := value_;
            indrec_.note_text := TRUE;
         WHEN ('LANGUAGE_CODE') THEN
            newrec_.language_code := value_;
            indrec_.language_code := TRUE;
         WHEN ('VAT') THEN
            newrec_.vat := Pay_Vat_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.vat IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.vat := TRUE;
         WHEN ('VAT_DB') THEN
            newrec_.vat := value_;
            indrec_.vat := TRUE;
         WHEN ('TAX_LIABILITY') THEN
            newrec_.tax_liability := value_;
            indrec_.tax_liability := TRUE;
         WHEN ('CUSTOMER_NO_ADDR_NO') THEN
            newrec_.customer_no_addr_no := value_;
            indrec_.customer_no_addr_no := TRUE;
         WHEN ('CUSTOMER_NO_CREDIT') THEN
            newrec_.customer_no_credit := value_;
            indrec_.customer_no_credit := TRUE;
         WHEN ('CUSTOMER_NO_CREDIT_ADDR_NO') THEN
            newrec_.customer_no_credit_addr_no := value_;
            indrec_.customer_no_credit_addr_no := TRUE;
         WHEN ('SHIP_ADDR_NO') THEN
            newrec_.ship_addr_no := value_;
            indrec_.ship_addr_no := TRUE;
         WHEN ('CASE_ID') THEN
            newrec_.case_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.case_id := TRUE;
         WHEN ('TASK_ID') THEN
            newrec_.task_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.task_id := TRUE;
         WHEN ('JINSUI_INVOICE') THEN
            newrec_.jinsui_invoice := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.jinsui_invoice IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.jinsui_invoice := TRUE;
         WHEN ('JINSUI_INVOICE_DB') THEN
            newrec_.jinsui_invoice := value_;
            indrec_.jinsui_invoice := TRUE;
         WHEN ('SUPPLY_COUNTRY') THEN
            newrec_.supply_country := Iso_Country_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.supply_country IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.supply_country := TRUE;
         WHEN ('SUPPLY_COUNTRY_DB') THEN
            newrec_.supply_country := value_;
            indrec_.supply_country := TRUE;
         WHEN ('USE_PRICE_INCL_TAX') THEN
            newrec_.use_price_incl_tax := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.use_price_incl_tax IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.use_price_incl_tax := TRUE;
         WHEN ('USE_PRICE_INCL_TAX_DB') THEN
            newrec_.use_price_incl_tax := value_;
            indrec_.use_price_incl_tax := TRUE;
         WHEN ('CANCEL_REASON') THEN
            newrec_.cancel_reason := value_;
            indrec_.cancel_reason := TRUE;
         WHEN ('ORDER_NO') THEN
            newrec_.order_no := value_;
            indrec_.order_no := TRUE;
         WHEN ('SHIPMENT_ID') THEN
            newrec_.shipment_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.shipment_id := TRUE;
         WHEN ('RETURN_TO_VENDOR_NO') THEN
            newrec_.return_to_vendor_no := value_;
            indrec_.return_to_vendor_no := TRUE;
         WHEN ('RETURN_TO_CONTRACT') THEN
            newrec_.return_to_contract := value_;
            indrec_.return_to_contract := TRUE;
         WHEN ('SHIP_ADDR_FLAG') THEN
            newrec_.ship_addr_flag := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.ship_addr_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.ship_addr_flag := TRUE;
         WHEN ('SHIP_ADDR_FLAG_DB') THEN
            newrec_.ship_addr_flag := value_;
            indrec_.ship_addr_flag := TRUE;
         WHEN ('RETURN_ADDR_FLAG') THEN
            newrec_.return_addr_flag := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.return_addr_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.return_addr_flag := TRUE;
         WHEN ('RETURN_ADDR_FLAG_DB') THEN
            newrec_.return_addr_flag := value_;
            indrec_.return_addr_flag := TRUE;
         WHEN ('LATEST_RETURN_DATE') THEN
            newrec_.latest_return_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.latest_return_date := TRUE;
         WHEN ('RETURN_ADDR_NO') THEN
            newrec_.return_addr_no := value_;
            indrec_.return_addr_no := TRUE;
         WHEN ('SHIP_ADDR_COUNTRY_CODE') THEN
            newrec_.ship_addr_country_code := value_;
            indrec_.ship_addr_country_code := TRUE;
         WHEN ('SHIP_ADDR_NAME') THEN
            newrec_.ship_addr_name := value_;
            indrec_.ship_addr_name := TRUE;
         WHEN ('SHIP_ADDRESS1') THEN
            newrec_.ship_address1 := value_;
            indrec_.ship_address1 := TRUE;
         WHEN ('SHIP_ADDRESS2') THEN
            newrec_.ship_address2 := value_;
            indrec_.ship_address2 := TRUE;
         WHEN ('SHIP_ADDR_ZIP_CODE') THEN
            newrec_.ship_addr_zip_code := value_;
            indrec_.ship_addr_zip_code := TRUE;
         WHEN ('SHIP_ADDR_CITY') THEN
            newrec_.ship_addr_city := value_;
            indrec_.ship_addr_city := TRUE;
         WHEN ('SHIP_ADDR_STATE') THEN
            newrec_.ship_addr_state := value_;
            indrec_.ship_addr_state := TRUE;
         WHEN ('SHIP_ADDR_COUNTY') THEN
            newrec_.ship_addr_county := value_;
            indrec_.ship_addr_county := TRUE;
         WHEN ('RETURN_ADDR_COUNTRY_CODE') THEN
            newrec_.return_addr_country_code := value_;
            indrec_.return_addr_country_code := TRUE;
         WHEN ('RETURN_ADDR_NAME') THEN
            newrec_.return_addr_name := value_;
            indrec_.return_addr_name := TRUE;
         WHEN ('RETURN_ADDRESS1') THEN
            newrec_.return_address1 := value_;
            indrec_.return_address1 := TRUE;
         WHEN ('RETURN_ADDRESS2') THEN
            newrec_.return_address2 := value_;
            indrec_.return_address2 := TRUE;
         WHEN ('RETURN_ADDR_ZIP_CODE') THEN
            newrec_.return_addr_zip_code := value_;
            indrec_.return_addr_zip_code := TRUE;
         WHEN ('RETURN_ADDR_CITY') THEN
            newrec_.return_addr_city := value_;
            indrec_.return_addr_city := TRUE;
         WHEN ('RETURN_ADDR_STATE') THEN
            newrec_.return_addr_state := value_;
            indrec_.return_addr_state := TRUE;
         WHEN ('RETURN_ADDR_COUNTY') THEN
            newrec_.return_addr_county := value_;
            indrec_.return_addr_county := TRUE;
         WHEN ('SHIP_VIA_CODE') THEN
            newrec_.ship_via_code := value_;
            indrec_.ship_via_code := TRUE;
         WHEN ('DELIVERY_TERMS') THEN
            newrec_.delivery_terms := value_;
            indrec_.delivery_terms := TRUE;
         WHEN ('INTRASTAT_EXEMPT') THEN
            newrec_.intrastat_exempt := Intrastat_Exempt_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.intrastat_exempt IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.intrastat_exempt := TRUE;
         WHEN ('INTRASTAT_EXEMPT_DB') THEN
            newrec_.intrastat_exempt := value_;
            indrec_.intrastat_exempt := TRUE;
         WHEN ('RECEIPT_RMA_NO') THEN
            newrec_.receipt_rma_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.receipt_rma_no := TRUE;
         WHEN ('ORIGINATING_RMA_NO') THEN
            newrec_.originating_rma_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.originating_rma_no := TRUE;
         WHEN ('RETURN_FROM_CUSTOMER_NO') THEN
            newrec_.return_from_customer_no := value_;
            indrec_.return_from_customer_no := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

   PROCEDURE Core (
      newrec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_           NUMBER;
      name_          VARCHAR2(30);
      value_         VARCHAR2(2000);
   BEGIN
      IF (newrec_.rowstate IS NOT NULL) THEN
         IF (newrec_.rowstate = 'Cancelled') THEN
            ptr_ := NULL;
            WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
               IF (name_ NOT IN ('CANCEL_REASON', 'NOTE_TEXT')) THEN
                  Error_SYS.Record_General(lu_name_, 'NOCHGCANCEL: The RMA is Canceled and may not be changed.');
               END IF;
            END LOOP;
         END IF;
      END IF;
      Base(newrec_, indrec_, attr_);
   
   END Core;

BEGIN
   Core(newrec_, indrec_, attr_);
END Unpack___;


PROCEDURE Check_Cancel_Reason_Ref___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Core (
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE )
   IS
   BEGIN
      Order_Cancel_Reason_Api.Exist( newrec_.cancel_reason, Reason_Used_By_Api.DB_RETURN_MATERIAL );
   END Core;

BEGIN
   Core(newrec_);
END Check_Cancel_Reason_Ref___;


PROCEDURE Check_Common___ (
   oldrec_ IN     return_material_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     return_material_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.rma_report_printed IS NOT NULL)
      AND (indrec_.rma_report_printed)
      AND (Validate_SYS.Is_Changed(oldrec_.rma_report_printed, newrec_.rma_report_printed)) THEN
         Rma_Report_Printed_API.Exist_Db(newrec_.rma_report_printed);
      END IF;
      IF (newrec_.vat IS NOT NULL)
      AND (indrec_.vat)
      AND (Validate_SYS.Is_Changed(oldrec_.vat, newrec_.vat)) THEN
         Pay_Vat_API.Exist_Db(newrec_.vat);
      END IF;
      IF (newrec_.jinsui_invoice IS NOT NULL)
      AND (indrec_.jinsui_invoice)
      AND (Validate_SYS.Is_Changed(oldrec_.jinsui_invoice, newrec_.jinsui_invoice)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.jinsui_invoice);
      END IF;
      IF (newrec_.supply_country IS NOT NULL)
      AND (indrec_.supply_country)
      AND (Validate_SYS.Is_Changed(oldrec_.supply_country, newrec_.supply_country)) THEN
         Iso_Country_API.Exist(newrec_.supply_country);
      END IF;
      IF (newrec_.use_price_incl_tax IS NOT NULL)
      AND (indrec_.use_price_incl_tax)
      AND (Validate_SYS.Is_Changed(oldrec_.use_price_incl_tax, newrec_.use_price_incl_tax)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.use_price_incl_tax);
      END IF;
      IF (newrec_.ship_addr_flag IS NOT NULL)
      AND (indrec_.ship_addr_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.ship_addr_flag, newrec_.ship_addr_flag)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.ship_addr_flag);
      END IF;
      IF (newrec_.return_addr_flag IS NOT NULL)
      AND (indrec_.return_addr_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.return_addr_flag, newrec_.return_addr_flag)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.return_addr_flag);
      END IF;
      IF (newrec_.intrastat_exempt IS NOT NULL)
      AND (indrec_.intrastat_exempt)
      AND (Validate_SYS.Is_Changed(oldrec_.intrastat_exempt, newrec_.intrastat_exempt)) THEN
         Intrastat_Exempt_API.Exist_Db(newrec_.intrastat_exempt);
      END IF;
      IF (newrec_.currency_code IS NOT NULL)
      AND (indrec_.currency_code)
      AND (Validate_SYS.Is_Changed(oldrec_.currency_code, newrec_.currency_code)) THEN
         Iso_Currency_API.Exist(newrec_.currency_code);
      END IF;
      IF (newrec_.customer_no IS NOT NULL)
      AND (indrec_.customer_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.customer_no);
      END IF;
      IF (newrec_.contract IS NOT NULL)
      AND (indrec_.contract)
      AND (Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract)) THEN
         Site_API.Exist(newrec_.contract);
      END IF;
      IF (newrec_.return_approver_id IS NOT NULL)
      AND (indrec_.return_approver_id)
      AND (Validate_SYS.Is_Changed(oldrec_.return_approver_id, newrec_.return_approver_id)) THEN
         Order_Coordinator_API.Exist(newrec_.return_approver_id);
      END IF;
      IF (newrec_.language_code IS NOT NULL)
      AND (indrec_.language_code)
      AND (Validate_SYS.Is_Changed(oldrec_.language_code, newrec_.language_code)) THEN
         Application_Language_API.Exist(newrec_.language_code);
      END IF;
      IF (newrec_.customer_no IS NOT NULL AND newrec_.customer_no_addr_no IS NOT NULL)
      AND (indrec_.customer_no OR indrec_.customer_no_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)
        OR Validate_SYS.Is_Changed(oldrec_.customer_no_addr_no, newrec_.customer_no_addr_no)) THEN
         Customer_Info_Address_API.Exist(newrec_.customer_no, newrec_.customer_no_addr_no);
      END IF;
      IF (newrec_.customer_no_credit IS NOT NULL)
      AND (indrec_.customer_no_credit)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no_credit, newrec_.customer_no_credit)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.customer_no_credit);
      END IF;
      IF (newrec_.customer_no_credit IS NOT NULL AND newrec_.customer_no_credit_addr_no IS NOT NULL)
      AND (indrec_.customer_no_credit OR indrec_.customer_no_credit_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no_credit, newrec_.customer_no_credit)
        OR Validate_SYS.Is_Changed(oldrec_.customer_no_credit_addr_no, newrec_.customer_no_credit_addr_no)) THEN
         Customer_Info_Address_API.Exist(newrec_.customer_no_credit, newrec_.customer_no_credit_addr_no);
      END IF;
      IF (newrec_.return_from_customer_no IS NOT NULL AND newrec_.ship_addr_no IS NOT NULL)
      AND (indrec_.return_from_customer_no OR indrec_.ship_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.return_from_customer_no, newrec_.return_from_customer_no)
        OR Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no)) THEN
         Cust_Ord_Customer_Address_API.Exist(newrec_.return_from_customer_no, newrec_.ship_addr_no);
      END IF;
   $IF Component_CALLC_SYS.INSTALLED $THEN
      IF (newrec_.case_id IS NOT NULL AND newrec_.task_id IS NOT NULL)
      AND (indrec_.case_id OR indrec_.task_id)
      AND (Validate_SYS.Is_Changed(oldrec_.case_id, newrec_.case_id)
        OR Validate_SYS.Is_Changed(oldrec_.task_id, newrec_.task_id)) THEN
         Cc_Case_Task_API.Exist(newrec_.case_id, newrec_.task_id);
      END IF;
   $END
      IF (newrec_.order_no IS NOT NULL)
      AND (indrec_.order_no)
      AND (Validate_SYS.Is_Changed(oldrec_.order_no, newrec_.order_no)) THEN
         Customer_Order_API.Exist(newrec_.order_no);
      END IF;
      IF (newrec_.shipment_id IS NOT NULL)
      AND (indrec_.shipment_id)
      AND (Validate_SYS.Is_Changed(oldrec_.shipment_id, newrec_.shipment_id)) THEN
         Shipment_API.Exist(newrec_.shipment_id);
      END IF;
      IF (newrec_.return_to_contract IS NOT NULL)
      AND (indrec_.return_to_contract)
      AND (Validate_SYS.Is_Changed(oldrec_.return_to_contract, newrec_.return_to_contract)) THEN
         Site_API.Exist(newrec_.return_to_contract);
      END IF;
      IF (newrec_.cancel_reason IS NOT NULL)
      AND (indrec_.cancel_reason)
      AND (Validate_SYS.Is_Changed(oldrec_.cancel_reason, newrec_.cancel_reason)) THEN
         Check_Cancel_Reason_Ref___(newrec_);
      END IF;
      IF (newrec_.ship_addr_country_code IS NOT NULL)
      AND (indrec_.ship_addr_country_code)
      AND (Validate_SYS.Is_Changed(oldrec_.ship_addr_country_code, newrec_.ship_addr_country_code)) THEN
         Iso_Country_API.Exist(newrec_.ship_addr_country_code);
      END IF;
      IF (newrec_.ship_via_code IS NOT NULL)
      AND (indrec_.ship_via_code)
      AND (Validate_SYS.Is_Changed(oldrec_.ship_via_code, newrec_.ship_via_code)) THEN
         Mpccom_Ship_Via_API.Exist(newrec_.ship_via_code);
      END IF;
      IF (newrec_.delivery_terms IS NOT NULL)
      AND (indrec_.delivery_terms)
      AND (Validate_SYS.Is_Changed(oldrec_.delivery_terms, newrec_.delivery_terms)) THEN
         Order_Delivery_Term_API.Exist(newrec_.delivery_terms);
      END IF;
      IF (newrec_.return_from_customer_no IS NOT NULL)
      AND (indrec_.return_from_customer_no)
      AND (Validate_SYS.Is_Changed(oldrec_.return_from_customer_no, newrec_.return_from_customer_no)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.return_from_customer_no);
      END IF;
      IF (newrec_.receipt_rma_no IS NOT NULL)
      AND (indrec_.receipt_rma_no)
      AND (Validate_SYS.Is_Changed(oldrec_.receipt_rma_no, newrec_.receipt_rma_no)) THEN
         Return_Material_API.Exist(newrec_.receipt_rma_no);
      END IF;
      IF (newrec_.originating_rma_no IS NOT NULL)
      AND (indrec_.originating_rma_no)
      AND (Validate_SYS.Is_Changed(oldrec_.originating_rma_no, newrec_.originating_rma_no)) THEN
         Return_Material_API.Exist(newrec_.originating_rma_no);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'DATE_REQUESTED', newrec_.date_requested);
      Error_SYS.Check_Not_Null(lu_name_, 'CURRENCY_CODE', newrec_.currency_code);
      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO', newrec_.customer_no);
      Error_SYS.Check_Not_Null(lu_name_, 'CONTRACT', newrec_.contract);
      Error_SYS.Check_Not_Null(lu_name_, 'RMA_REPORT_PRINTED', newrec_.rma_report_printed);
      Error_SYS.Check_Not_Null(lu_name_, 'LANGUAGE_CODE', newrec_.language_code);
      Error_SYS.Check_Not_Null(lu_name_, 'VAT', newrec_.vat);
      Error_SYS.Check_Not_Null(lu_name_, 'TAX_LIABILITY', newrec_.tax_liability);
      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO_ADDR_NO', newrec_.customer_no_addr_no);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIP_ADDR_NO', newrec_.ship_addr_no);
      Error_SYS.Check_Not_Null(lu_name_, 'JINSUI_INVOICE', newrec_.jinsui_invoice);
      Error_SYS.Check_Not_Null(lu_name_, 'SUPPLY_COUNTRY', newrec_.supply_country);
      Error_SYS.Check_Not_Null(lu_name_, 'USE_PRICE_INCL_TAX', newrec_.use_price_incl_tax);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIP_ADDR_FLAG', newrec_.ship_addr_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'RETURN_ADDR_FLAG', newrec_.return_addr_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'RETURN_ADDR_NO', newrec_.return_addr_no);
      Error_SYS.Check_Not_Null(lu_name_, 'INTRASTAT_EXEMPT', newrec_.intrastat_exempt);
      Error_SYS.Check_Not_Null(lu_name_, 'RETURN_FROM_CUSTOMER_NO', newrec_.return_from_customer_no);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     return_material_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (indrec_.order_no AND newrec_.order_no IS NOT NULL) THEN
         Validate_Order_No___(newrec_.rma_no, newrec_.contract, newrec_.currency_code, newrec_.customer_no, newrec_.order_no);
      END IF;
   
      IF (indrec_.shipment_id AND newrec_.shipment_id IS NOT NULL) THEN
         Validate_Shipment_Id___(newrec_.rma_no, newrec_.contract, newrec_.currency_code, newrec_.customer_no, newrec_.shipment_id);
      END IF;
   
      Base(oldrec_, newrec_, indrec_, attr_);
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      contract_ RETURN_MATERIAL_TAB.contract%TYPE;
   BEGIN
      Base(attr_);
      contract_ := User_Default_API.Get_Contract;
      Client_SYS.Add_To_Attr('COMPANY', Site_API.Get_Company(contract_), attr_);
      Client_SYS.Add_To_Attr('DATE_REQUESTED', Site_API.Get_Site_Date(contract_), attr_);
      Client_SYS.Add_To_Attr('RETURN_APPROVER_ID', User_Default_API.Get_Authorize_Code, attr_);
      Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
      Client_SYS.Add_To_Attr('RETURN_TO_CONTRACT', contract_, attr_);
      Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED_DB', 'NOT PRINTED', attr_);
      Client_SYS.Add_To_Attr('VAT_DB', 'N', attr_);
      Client_SYS.Add_To_Attr('TAX_LIABILITY', 'EXEMPT', attr_);
      Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB', 'FALSE', attr_);
      Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', Company_Site_API.Get_Country(contract_), attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG_DB', 'N', attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG_DB', 'N', attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_NO', NVL(Site_API.Get_Delivery_Address(contract_),Company_Address_Type_API.Get_Company_Address_Id(Site_API.Get_Company(contract_),Address_Type_Code_API.Decode('DELIVERY'),'TRUE')), attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', 'EXEMPT', attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ return_material_tab%ROWTYPE;
   BEGIN
      Validate_SYS.Item_Insert(lu_name_, 'RMA_NO', indrec_.rma_no);
      Validate_SYS.Item_Insert(lu_name_, 'NOTE_ID', indrec_.note_id);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      today_                DATE;
      company_             VARCHAR2(20);
      delivery_country_db_  VARCHAR2(2);
   BEGIN
      IF NOT(indrec_.rma_report_printed) THEN
         newrec_.rma_report_printed := 'NOT PRINTED';
      END IF;
   
      IF NOT(indrec_.vat) THEN
         newrec_.vat := 'N';
      END IF;
   
      IF NOT(indrec_.tax_liability) then
         newrec_.tax_liability := 'EXEMPT';
      END IF;
   
      IF NOT(indrec_.ship_addr_flag)then
         newrec_.ship_addr_flag := 'N';
      END IF;
   
      IF NOT (indrec_.return_addr_flag) then
         newrec_.return_addr_flag := 'N';
      END IF;
   
      IF NOT (indrec_.intrastat_exempt) then
         newrec_.intrastat_exempt := 'EXEMPT';
      END IF;
   
      Validate_Tax_Calc_Basis___(newrec_);
   
      IF (trunc(newrec_.date_requested) > trunc(newrec_.latest_return_date)) THEN
         Error_SYS.Record_General(lu_name_, 'RTN_DATE_ERROR: Latest return date should be later than the date requested.');
      END IF;
   
      IF (newrec_.return_from_customer_no IS NULL) THEN
         newrec_.return_from_customer_no := newrec_.customer_no;
      END IF;
   
      IF (Client_SYS.Item_Exist('UPDATE_LINE_TAXES', attr_)) THEN
         Error_SYS.Item_Insert(lu_name_, 'UPDATE_LINE_TAXES');
      END IF;
   
      Base(newrec_, indrec_, attr_);
   
      IF NOT (newrec_.tax_liability = 'TAX' OR newrec_.tax_liability = 'EXEMPT') THEN
         IF (newrec_.ship_addr_flag = 'N') THEN
            delivery_country_db_ := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.return_from_customer_no, newrec_.ship_addr_no);
         ELSE
            delivery_country_db_ := newrec_.ship_addr_country_code;
         END IF;
         IF NOT (Tax_Liability_API.Check_Exist(newrec_.tax_liability, delivery_country_db_)) THEN
            Error_SYS.Record_General(lu_name_, 'LIABILITYNOTEXIST: Tax liability does not exist for the delivery address country specified.');
         END IF;
      END IF;
   
      -- Return COMPANY and ROUNDING to client.
      company_ := Site_API.Get_Company(newrec_.contract);
      Client_SYS.Add_To_Attr('COMPANY', company_, attr_);
      Client_SYS.Add_To_Attr('ROUNDING',
                             Currency_Code_API.Get_Currency_Rounding
                             (company_,
                              Company_Finance_API.Get_Currency_Code(company_)),
                             attr_);
      Client_SYS.Add_To_Attr('CURRENCY_ROUNDING',
                             Currency_Code_API.Get_Currency_Rounding(company_, newrec_.currency_code), attr_);
      today_ := Site_API.Get_Site_Date(newrec_.contract);
      IF (newrec_.date_requested > today_) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGDATE: The Date Requested can not be later than todays date.');
      END IF;
   
      IF (newrec_.ship_addr_no IS NOT NULL) THEN
         IF (Cust_Ord_Customer_Address_API.Is_Ship_Location
             (newrec_.return_from_customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDELRMAADDR: Invalid delivery address specified.');
         END IF;
      END IF;
   
      IF (newrec_.contract != NVL(newrec_.return_to_contract, ' ') AND (newrec_.return_to_vendor_no IS NULL)) THEN
         $IF Component_Purch_SYS.INSTALLED $THEN
            newrec_.return_to_vendor_no := Supplier_API.Get_Vendor_No_From_Contract(newrec_.return_to_contract);
         $ELSE
            NULL;
         $END
      END IF;
      -- Bug 103631, start
      IF (newrec_.customer_no_addr_no IS NOT NULL) THEN
         IF (Cust_Ord_Customer_Address_API.Is_Bill_Location(newrec_.customer_no, newrec_.customer_no_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTRMADOCADDR: The address :P1 is not specified as a document address for the customer :P2.',
                                          newrec_.customer_no_addr_no, newrec_.customer_no);
         END IF;
      END IF;
      -- Bug 103631, end
   
      $IF Component_Jinsui_SYS.INSTALLED $THEN
         Validate_Jinsui_Constraints___(newrec_);
      $END
   
      IF (newrec_.order_no IS NOT NULL) AND (newrec_.shipment_id IS NOT NULL) THEN
         Error_SYS.Record_General(lu_name_, 'BOTH_NOT_ALLOWED: The customer order number and the shipment ID cannot be entered in the same instance.');
      END IF;
   
      IF (newrec_.return_to_vendor_no IS NOT NULL) THEN
         Validate_Retn_To_Vendor_No___(newrec_.rma_no, newrec_.return_to_vendor_no);
      END IF;
   
      IF (newrec_.return_to_contract IS NOT NULL) THEN
         Validate_Return_To_Contract___(newrec_.rma_no, newrec_.contract, newrec_.return_to_contract);
      END IF;
   
      IF (newrec_.return_addr_no IS NOT NULL) THEN
         Validate_Return_Addr_No___(newrec_.rma_no, newrec_.return_addr_no, newrec_.return_to_vendor_no, newrec_.return_to_contract);
      END IF;
   END Core;

BEGIN
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY return_material_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      newrec_.rowstate := '<UNDEFINED>';
      INSERT
         INTO return_material_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      newrec_.rowstate := NULL;
      Finite_State_Init___(newrec_, attr_);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'RETURN_MATERIAL_RK') THEN
               Error_SYS.Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      CURSOR get_next_seq IS
        SELECT Rma_No_Seq.nextval
          FROM DUAL;
   BEGIN
      -- Fetch next RMA-no from sequence.
      OPEN  get_next_seq ;
      FETCH get_next_seq INTO newrec_.rma_no;
      CLOSE get_next_seq;
      Client_SYS.Add_To_Attr('RMA_NO',newrec_.rma_no, attr_);
   
      newrec_.note_id := Document_Text_API.get_next_note_id;
      Client_SYS.Add_To_Attr('NOTE_ID',newrec_.note_id, attr_);
   
      Base(objid_, objversion_, newrec_, attr_);
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     return_material_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     return_material_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'RMA_NO', indrec_.rma_no);
      Validate_SYS.Item_Update(lu_name_, 'CURRENCY_CODE', indrec_.currency_code);
      Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_NO', indrec_.customer_no);
      Validate_SYS.Item_Update(lu_name_, 'CONTRACT', indrec_.contract);
      Validate_SYS.Item_Update(lu_name_, 'NOTE_ID', indrec_.note_id);
      Validate_SYS.Item_Update(lu_name_, 'ORIGINATING_RMA_NO', indrec_.originating_rma_no);
      Validate_SYS.Item_Update(lu_name_, 'RETURN_FROM_CUSTOMER_NO', indrec_.return_from_customer_no);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     return_material_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY return_material_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      today_                    DATE;
      count_                    NUMBER;
      company_                  VARCHAR2(20);
      separator_                VARCHAR2(2) := '';
      has_different_payer_      VARCHAR2(200) := '';
      paying_customer_          RETURN_MATERIAL_TAB.customer_no%TYPE;
      delivery_country_db_      VARCHAR2(2);
      supply_attr_              VARCHAR2(32000);
      return_addr_country_code_ RETURN_MATERIAL_TAB.return_addr_country_code%TYPE;
      changed_rec_              Indicator_Rec;
      disconnect_exp_license_   VARCHAR2(5);
   
      $IF Component_Expctr_SYS.INSTALLED $THEN
         validate_export_license_ BOOLEAN := FALSE;
         connect_head_id_         NUMBER;
         date_requested_changed_  BOOLEAN := FALSE;
         connect_status_          VARCHAR2(30);
   
         CURSOR get_rma_line IS
            SELECT rml.rma_no,
                   rml.rma_line_no
            FROM RETURN_MATERIAL_LINE_TAB rml
            WHERE rml.rma_no = newrec_.rma_no;
      $END
   
      CURSOR get_order_keys IS
         SELECT rma_line_no, order_no
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = newrec_.rma_no
         AND   order_no IS NOT NULL;
   
      CURSOR get_rental_lines_count IS
         SELECT COUNT(*)
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = newrec_.rma_no
         AND   rental = 'TRUE'
         AND   order_no IS NOT NULL;
   BEGIN
      $IF Component_Expctr_SYS.INSTALLED $THEN
         IF (indrec_.date_requested OR indrec_.customer_no_addr_no OR indrec_.ship_addr_no OR indrec_.supply_country) THEN
            validate_export_license_ := TRUE;
         END IF;
         IF (indrec_.date_requested) THEN
            date_requested_changed_ := TRUE;
         END IF;
      $END
   
      IF (oldrec_.rowstate = 'Denied') THEN
         Error_SYS.Record_General(lu_name_, 'NOCHGDENIED: The RMA is denied and may not be changed.');
      END IF;
   
      company_ := Site_API.Get_Company(newrec_.contract);
      supply_attr_ := attr_;
   
      Base(oldrec_, newrec_, indrec_, attr_);
   
      Iso_Country_Api.Exist(newrec_.supply_country);
   
      IF (newrec_.ship_addr_flag = 'N') THEN
        newrec_.ship_via_code := NULL;
        newrec_.delivery_terms := NULL;
      END IF;
   
      IF (trunc(newrec_.date_requested) > trunc(newrec_.latest_return_date)) THEN
         Error_SYS.Record_General(lu_name_, 'RTN_DATE_ERROR: Latest return date should be later than the date requested.');
      END IF;
   
      IF NOT (newrec_.tax_liability = 'TAX' OR newrec_.tax_liability = 'EXEMPT') THEN
         IF (newrec_.ship_addr_flag = 'N') THEN
            delivery_country_db_ := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.return_from_customer_no, newrec_.ship_addr_no);
         ELSE
            delivery_country_db_ := newrec_.ship_addr_country_code;
         END IF;
         IF NOT (Tax_Liability_API.Check_Exist(newrec_.tax_liability, delivery_country_db_)) THEN
            Error_SYS.Record_General(lu_name_, 'LIABILITYNOTEXIST: Tax liability does not exist for the delivery address country specified.');
         END IF;
      END IF;
   
      today_ := Site_API.Get_Site_Date(newrec_.contract);
      IF (newrec_.date_requested > today_) THEN
         Error_SYS.Record_General(lu_name_, 'WRONGDATE: The Date Requested can not be later than todays date.');
      END IF;
   
      -- Update the license date in export license connect header if the date_requested has been changed.
      $IF Component_Expctr_SYS.INSTALLED $THEN
         IF (validate_export_license_ AND Customer_Order_Flow_API.Get_License_Enabled(newrec_.rma_no, 'INTERACT_RMA') = 'TRUE') THEN
            FOR line_ IN get_rma_line LOOP
               IF (newrec_.date_requested != oldrec_.date_requested) THEN
                  connect_head_id_ := Exp_License_Connect_Head_API.Get_Connect_Id_From_Ref('RMA', newrec_.rma_no, line_.rma_line_no, NULL, NULL);
                  connect_status_  := Exp_license_Connect_Head_API.Get_State_Db(connect_head_id_);
                  -- Need to check both disconnect_ and connect_status_ since disconnect_ will be null when the status is Unconnected and Planned.
                  IF (connect_head_id_ IS NOT NULL) AND ((disconnect_exp_license_ = 'TRUE') OR (connect_status_ IN ('Unconnected', 'Planned'))) THEN
                     Exp_License_Connect_Head_API.Set_License_Date(connect_head_id_, newrec_.date_requested);
                  END IF;
               -- Checked date_requested_changed_ to avoid calling the method when user enters the same date_requested.
               ELSIF NOT date_requested_changed_ THEN
                  Exp_License_Connect_Util_API.Check_Allow_Update(newrec_.rma_no, line_.rma_line_no, NULL, NULL, 'RMA');
               END IF;
            END LOOP;
          END IF;
      $END
   
      changed_rec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      IF (oldrec_.rowstate != 'Planned') AND (changed_rec_.return_approver_id) THEN
         Error_SYS.Record_General(lu_name_, 'NOUPDAPPROV: The approver ID may only be changed when status is planned.');
      END IF;
      IF (changed_rec_.return_approver_id AND (Credit_Approved(newrec_.rma_no) = 1 OR newrec_.rma_report_printed = Rma_Report_Printed_API.DB_PRINTED OR oldrec_.rowstate NOT IN('Planned', 'Released'))) THEN
         Error_SYS.Record_General(lu_name_, 'NOUPDAPPROV: The coordinator cannot be changed since the RMA has already been printed or credit approved.');
      END IF;
   
      IF (newrec_.ship_addr_no IS NOT NULL) THEN
         IF (Cust_Ord_Customer_Address_API.Is_Ship_Location
             (newrec_.return_from_customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTRMADELADDR: Invalid delivery address specified');
         END IF;
      END IF;
   
      IF (newrec_.customer_no_addr_no IS NOT NULL) THEN
         IF (Cust_Ord_Customer_Address_API.Is_Bill_Location(newrec_.customer_no, newrec_.customer_no_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTRMADOCADDR: The address :P1 is not specified as a document address for the customer :P2.',
                                       newrec_.customer_no_addr_no, newrec_.customer_no);
         END IF;
      END IF;
      -- Bug 135006, start
      IF NOT((oldrec_.ship_addr_flag = 'Y') OR (changed_rec_.ship_addr_no)) THEN
         -- Bug 135742, Added if condition to check if the existing ship addr no is manualy entered by the customer.
         IF oldrec_.ship_addr_no = Cust_Ord_Customer_API.Get_Delivery_Address(oldrec_.return_from_customer_no) THEN
            IF ((changed_rec_.order_no) AND (newrec_.order_no IS NOT NULL)) THEN
               newrec_.ship_addr_no :=  Customer_Order_API.Get_Ship_Addr_No(newrec_.order_no);
               newrec_.ship_addr_flag := Customer_Order_API.Get_Addr_Flag_Db(newrec_.order_no);
            ELSIF ((changed_rec_.shipment_id) AND (newrec_.shipment_id IS NOT NULL) )THEN
               newrec_.ship_addr_no := Shipment_Api.Get_Ship_Addr_No(newrec_.shipment_id);
               newrec_.ship_addr_flag := Shipment_API.Get_Addr_Flag_Db(newrec_.shipment_id);
            END IF;
         END IF;
      END IF;
      -- Bug 135006, end
   
      -- validate update of customer to credit.
      IF (newrec_.customer_no_credit IS NOT NULL) THEN
         Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO_CREDIT_ADDR_NO', newrec_.customer_no_credit_addr_no);
   
         IF changed_rec_.customer_no_credit THEN
            -- changing customer to credit
            trace_sys.field(' changing customer to credit', newrec_.customer_no_credit);
            separator_           := '';
            has_different_payer_ := '';
            count_               := 0;
            FOR connected_order_ IN get_order_keys LOOP
               paying_customer_ := Customer_Order_API.Get_Customer_No_Pay(connected_order_.order_no);
               IF paying_customer_ IS NOT NULL THEN
                  IF paying_customer_ != newrec_.customer_no_credit THEN
                     has_different_payer_ := (has_different_payer_ || separator_ ||
                                              to_char(connected_order_.rma_line_no) );
                     IF count_= 0 THEN
                        separator_ := ', ';
                     END IF;
                     count_ := count_ + 1;
                  END IF;
               END IF;
            END LOOP;
            IF count_ = 1 THEN
               Client_SYS.Add_Warning(lu_name_, 'RMADIFFPAYERS: ' ||
                                      'On the RMA line :P1, there is a connected order line that ' || chr(10) ||
                                      'were paid by another customer than the one to be credited; :P2.',
                                      p1_ => has_different_payer_,
                                      p2_ => newrec_.customer_no_credit);
   
            ELSIF count_> 1 THEN
               Client_SYS.Add_Warning(lu_name_, 'RMADIFFPAYERS: ' ||
                                      'On the RMA lines :P1, there are connected order lines ' || chr(10) ||
                                      'that were paid by other customers than the one to be credited :P2.',
                                      p1_ => has_different_payer_,
                                      p2_ => newrec_.customer_no_credit);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.contract != NVL(newrec_.return_to_contract, ' ') AND (newrec_.return_to_vendor_no IS NULL)) THEN
         $IF Component_Purch_SYS.INSTALLED $THEN
            newrec_.return_to_vendor_no := Supplier_API.Get_Vendor_No_From_Contract(newrec_.return_to_contract);
         $ELSE
            NULL;
         $END
      END IF;
      
      IF Validate_SYS.Is_Changed(oldrec_.return_to_contract, newrec_.return_to_contract) AND 
         (newrec_.return_to_contract IS NOT NULL AND newrec_.contract != newrec_.return_to_contract) THEN
         OPEN get_rental_lines_count;
         FETCH get_rental_lines_count INTO count_;
         CLOSE get_rental_lines_count;
      
         IF (count_ > 0 ) THEN
            Error_SYS.Record_General(lu_name_,'EXISTRENTLINE: Changing the Return to Site field value is not allowed when the return material authorization includes rental lines.');
         END IF;
      END IF;
   
      $IF Component_Jinsui_SYS.INSTALLED $THEN
         Validate_Jinsui_Constraints___(newrec_);
      $END
   
      IF (newrec_.order_no IS NOT NULL) AND (newrec_.shipment_id IS NOT NULL) THEN
         Error_SYS.Record_General(lu_name_, 'BOTH_NOT_ALLOWED: The customer order number and the shipment ID cannot be entered in the same instance.');
      END IF;
   
      IF changed_rec_.return_approver_id THEN
         Client_SYS.Add_To_Attr('REFRESH', 'TRUE', attr_);
      END IF;
   
      IF (newrec_.return_to_vendor_no IS NOT NULL AND changed_rec_.return_to_vendor_no) THEN
         Validate_Retn_To_Vendor_No___(newrec_.rma_no, newrec_.return_to_vendor_no);
      END IF;
   
      IF (newrec_.return_to_contract IS NOT NULL AND changed_rec_.return_to_contract) THEN
         Validate_Return_To_Contract___(newrec_.rma_no, newrec_.contract, newrec_.return_to_contract);
      END IF;
   
      IF changed_rec_.return_addr_no THEN
         Validate_Return_Addr_No___(newrec_.rma_no, newrec_.return_addr_no, newrec_.return_to_vendor_no, newrec_.return_to_contract);
      END IF;
   
      IF (newrec_.receipt_rma_no IS NOT NULL OR newrec_.originating_rma_no IS NOT NULL) THEN
         Restrict_Multi_Site_Update___(newrec_, oldrec_);
      END IF;
   
      IF ( changed_rec_.ship_addr_no OR changed_rec_.ship_addr_flag OR changed_rec_.ship_addr_country_code OR changed_rec_.ship_addr_name OR
           changed_rec_.ship_address1 OR changed_rec_.ship_address2 OR changed_rec_.ship_addr_zip_code OR changed_rec_.ship_addr_city OR
           changed_rec_.ship_addr_state OR changed_rec_.latest_return_date) THEN
         Modify_Supply_Site_Rma___(newrec_.rma_no, supply_attr_, changed_rec_, newrec_);
      END IF;
   
      IF (newrec_.ship_addr_flag = 'Y' AND newrec_.intrastat_exempt = 'INCLUDE' AND oldrec_.rowstate NOT IN ('Planned', 'Denied', 'Cancelled' ) AND
         (newrec_.ship_via_code IS NULL OR newrec_.delivery_terms IS NULL)) THEN
         return_addr_country_code_ := newrec_.return_addr_country_code;
         IF (return_addr_country_code_ IS NULL) THEN
            IF (newrec_.return_to_contract IS NULL) THEN
               return_addr_country_code_ := Supplier_Info_Address_API.Get_Country_Code(newrec_.return_to_vendor_no, newrec_.return_addr_no);
            ELSE
               return_addr_country_code_ := Company_Address_API.Get_Country_Db(Site_API.Get_Company(newrec_.return_to_vendor_no), newrec_.return_addr_no);
            END IF;
            IF (return_addr_country_code_ IS NULL) THEN
               return_addr_country_code_ := Company_Address_API.Get_Country_Db(Site_API.Get_Company(newrec_.contract), newrec_.return_addr_no);
            END IF;
         END IF;
         IF (return_addr_country_code_ != newrec_.ship_addr_country_code AND Iso_Country_API.Get_Eu_Member(return_addr_country_code_) = 'EU Member' AND Iso_Country_API.Get_Eu_Member(newrec_.ship_addr_country_code) = 'EU Member') THEN
            Validate_Ship_Via_Del_Term___(newrec_.rma_no);
         END IF;
      END IF;
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     RETURN_MATERIAL_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     return_material_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY return_material_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE return_material_tab
            SET ROW = newrec_
            WHERE rma_no = newrec_.rma_no;
      ELSE
         UPDATE return_material_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'RETURN_MATERIAL_RK') THEN
               Error_SYS.Rowkey_Exist(Return_Material_API.lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     RETURN_MATERIAL_TAB%ROWTYPE,
      newrec_     IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      update_line_taxes_          VARCHAR2(5);
      update_tax_from_ship_addr_  BOOLEAN := FALSE;
      pay_tax_                    BOOLEAN := FALSE;
   
   BEGIN
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      update_line_taxes_ := Client_SYS.Get_Item_Value('UPDATE_LINE_TAXES', attr_);
      IF (update_line_taxes_ IS NOT NULL) THEN
         update_tax_from_ship_addr_ := TRUE;
      END IF;
   
      IF (newrec_.vat ='Y') THEN
         pay_tax_ := TRUE;
      END IF;
   
      IF (update_tax_from_ship_addr_) THEN
         Modify_Rma_Defaults___(newrec_.rma_no, pay_tax_, update_tax_from_ship_addr_);
      END IF;
   
      IF  ((NVL(oldrec_.return_to_contract, Database_SYS.string_null_) != NVL(newrec_.return_to_contract, Database_SYS.string_null_)) OR
           (NVL(oldrec_.return_to_vendor_no, Database_SYS.string_null_) != NVL(newrec_.return_to_vendor_no, Database_SYS.string_null_))) THEN
         Modify_Rma_Line_Po_Info___(newrec_.rma_no, newrec_.return_to_contract, newrec_.return_to_vendor_no);
      END IF;
   
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN RETURN_MATERIAL_TAB%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN return_material_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.rma_no||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Core (
      remrec_ IN RETURN_MATERIAL_TAB%ROWTYPE )
   IS
   BEGIN
      Base(remrec_);
      --Bug 111158, start
      $IF (Component_Callc_SYS.INSTALLED) $THEN
         Cc_Case_Business_Object_API.Check_Reference_Exist('RETURN_MATERIAL', remrec_.rma_no );
         Cc_Case_Sol_Business_Obj_API.Check_Reference_Exist('RETURN_MATERIAL', remrec_.rma_no );
      $END
      $IF (Component_Supkey_SYS.INSTALLED) $THEN
         Cc_Sup_Key_Business_Obj_API.Check_Reference_Exist('RETURN_MATERIAL', remrec_.rma_no );
      $END
      --Bug 111158, end
   
   END Core;

BEGIN
   Core(remrec_);
END Check_Delete___;


PROCEDURE Cancel_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      info_    VARCHAR2(2000);
   
      CURSOR get_lines IS
         SELECT rma_line_no
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate NOT IN ('Cancelled', 'Denied');
   BEGIN
      FOR next_line_ IN get_lines LOOP
         Return_Material_Line_API.Cancel_Line(info_, rec_.rma_no, next_line_.rma_line_no );
         Return_Material_Line_API.Set_Cancel_Reason(rec_.rma_no, next_line_.rma_line_no, rec_.cancel_reason );
      END LOOP;
   END Core;

BEGIN
   Core(rec_, attr_);
END Cancel_All_Lines___;


PROCEDURE Complete_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      CURSOR get_pr_line  IS
        SELECT rma_line_no, qty_received, qty_scrapped, qty_returned_inv, conv_factor, catalog_no
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate IN ('PartiallyReceived');
   BEGIN
      -- qty_received > 0 since we are in state partially received
      FOR pr_line_ IN get_pr_line LOOP
         IF (Sales_Part_API.Get_Part_No(rec_.contract, pr_line_.catalog_no) IS NULL) OR
           (pr_line_.qty_received = ((nvl(pr_line_.qty_scrapped,0) + nvl(pr_line_.qty_returned_inv,0)) /
                                     pr_line_.conv_factor))
         THEN
            Return_Material_Line_API.Complete_Line__
              (rec_.rma_no, pr_line_.rma_line_no);
         END IF;
      END LOOP;
   END Core;

BEGIN
   Core(rec_, attr_);
END Complete_All_Lines___;


PROCEDURE Deny_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      CURSOR get_line IS
        SELECT
          rowid       objid,
          ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))  objversion
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate = 'Planned';
   
      CURSOR get_charge IS
        SELECT
          rowid       objid,
          ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))  objversion
          FROM RETURN_MATERIAL_CHARGE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate = 'Planned';
   
      info_  VARCHAR2(2000);
      lattr_ VARCHAR2(2000);
   BEGIN
      FOR lin IN get_line LOOP
         Client_SYS.Clear_Attr(lattr_);
         Return_Material_Line_API.Deny__
           ( info_, lin.objid, lin.objversion, lattr_, 'DO');
      END LOOP;
      FOR charg IN get_charge LOOP
         Client_SYS.Clear_Attr(lattr_);
         Return_Material_Charge_API.Deny__
           ( info_, charg.objid, charg.objversion, lattr_, 'DO');
      END LOOP;
   END Core;

BEGIN
   Core(rec_, attr_);
END Deny_All_Lines___;


PROCEDURE Has_Charge_Line___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      dummy_              NUMBER;
      CURSOR has_denied_charged_lines IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate = 'Denied';
   BEGIN
   
      OPEN has_denied_charged_lines;
      FETCH has_denied_charged_lines INTO dummy_;
      IF (has_denied_charged_lines%FOUND) THEN
         CLOSE has_denied_charged_lines;
         Error_SYS.Record_General(lu_name_, 'HASDENIEDCHARGELINE: The operation "Cancel" is not allowed for Credit Charges objects in state "Denied".');
      END IF;
      CLOSE has_denied_charged_lines;
   
      IF (Exist_Charges__(rec_.rma_no)=1) THEN
         Error_SYS.Record_General(lu_name_, 'HASCHARGELINE: Charge line(s) exists to this RMA. Remove the connected charge line(s) before cancellation.');
      END IF;
   END Core;

BEGIN
   Core(rec_, attr_);
END Has_Charge_Line___;


PROCEDURE Release_All_Lines___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      CURSOR get_line IS
        SELECT
          rowid       objid,
          ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))  objversion
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate = 'Planned';
   
      CURSOR get_charge IS
        SELECT
          rowid       objid,
          ltrim(lpad(to_char(rowversion,'YYYYMMDDHH24MISS'),2000))  objversion
          FROM RETURN_MATERIAL_CHARGE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate = 'Planned';
   
      info_  VARCHAR2(2000);
      lattr_ VARCHAR2(2000);
   BEGIN
      FOR lin IN get_line LOOP
         Client_SYS.Clear_Attr(lattr_);
         Return_Material_Line_API.Release__
           ( info_, lin.objid, lin.objversion, lattr_, 'DO');
      END LOOP;
      FOR charge IN get_charge LOOP
         Client_SYS.Clear_Attr(lattr_);
         Return_Material_Charge_API.Release__
           ( info_, charge.objid, charge.objversion, lattr_, 'DO');
      END LOOP;
   END Core;

BEGIN
   Core(rec_, attr_);
END Release_All_Lines___;


PROCEDURE Release_Allowed___ (
   rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Core (
      rec_  IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      supplier_return_reason_ VARCHAR2(8);
      orderrow_rec_           Customer_Order_Line_API.Public_Rec;
      -- Bug 126845, Introduced a new variable for the supplier of Purchase Order
      vendor_no_              VARCHAR2(20);
   
      CURSOR get_line IS
        SELECT rma_line_no, order_no, line_no, rel_no, line_item_no, supplier_return_reason
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate = 'Planned';
   BEGIN
   
      IF (rec_.return_approver_id IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'APPOVERID_CANNOT_NULL: The coordinator must be specified in order to release the RMA.');
      END IF;
      --Check whether Site and Return to Site are different
      IF (rec_.contract != NVL(rec_.return_to_contract, Database_SYS.string_null_)) THEN
         FOR line_rec_ IN get_line LOOP
            orderrow_rec_ := Customer_Order_line_API.Get(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
            -- Bug 126845, get the supplier of the Customer Order connected Purchase Order.
            vendor_no_:= Customer_Order_Pur_Order_API.Get_PO_Vendor_No(NULL, line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
            --Check whether the Connected CO is direclty delivered by the supplier mentioned.
            IF (rec_.return_to_vendor_no IS NOT NULL AND rec_.return_to_vendor_no = NVL(vendor_no_, Database_SYS.string_null_) AND orderrow_rec_.supply_code IN ('PD', 'IPD')) THEN
               IF orderrow_rec_.supply_code = 'PD' THEN
                  Return_Material_Line_API.Fetch_Supplier_Rtn_Reason__(rec_.rma_no, line_rec_.rma_line_no);
                  supplier_return_reason_ := Return_Material_Line_API.Get_Supplier_Return_Reason(rec_.rma_no, line_rec_.rma_line_no);
               END IF;
               IF (NVL(supplier_return_reason_, line_rec_.supplier_return_reason) IS NULL) THEN
                  Error_SYS.Record_General(lu_name_, 'NOPURCHRETURNREASON: RMA Line No :P1 is connected to a customer order line directly delivered by the return to supplier, and therefore requires a value in the Supplier Return Reason field', line_rec_.rma_line_no);
               END IF;
            ELSE
               IF (line_rec_.order_no IS NULL) THEN
                  Error_SYS.Record_General (lu_name_, 'RMANOORDERNO: All RMA lines should be connected to a customer order line when materials are being returned to a different site or to an external supplier.');
               ELSE
                  IF (rec_.return_to_contract IS NULL AND rec_.return_to_vendor_no IS NULL) THEN
                     Error_SYS.Record_General (lu_name_, 'RMARELEASENOTALLOWEDTOFIELDSNULL: Either the return-to-supplier or the return-to-site must have a value');
                  ELSIF (Site_API.Get_Company(rec_.contract) != NVL(Site_API.Get_Company(rec_.return_to_contract), Database_SYS.string_null_)) THEN
                     Error_SYS.Record_General (lu_name_, 'RMARELEASENOTALLOWED: All RMA lines should be connected to a customer order line that have been directly delivered by the same supplier as specified in the Return to Supplier field, when the site and return-to site are in two companies.');
                  END IF;
               END IF;
            END IF;
         END LOOP;
      END IF;
   END Core;

BEGIN
   Core(rec_, attr_);
END Release_Allowed___;


FUNCTION All_Lines_Cancel___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      lines_exist_        BOOLEAN := Any_Lines_Exists___(rec_.rma_no);
      lines_cancelled_    BOOLEAN := TRUE;
      dummy_              NUMBER;
   
      CURSOR get_not_cancel_lines IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate != 'Cancelled';
   BEGIN
      IF NOT (lines_exist_) THEN
         -- no lines found
         RETURN FALSE;
      END IF;
   
      IF (lines_exist_) THEN
         OPEN get_not_cancel_lines;
         FETCH get_not_cancel_lines INTO dummy_;
         IF (get_not_cancel_lines%FOUND) THEN
            lines_cancelled_ := FALSE;
         END IF;
         CLOSE get_not_cancel_lines;
      END IF;
   
      IF (lines_cancelled_) THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Lines_Cancel___;


FUNCTION All_Lines_Completed___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      lines_exist_        BOOLEAN := Any_Lines_Exists___(rec_.rma_no);
      lines_completed_    BOOLEAN := TRUE;
      dummy_              NUMBER;
   
      CURSOR get_not_completed_lines IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate NOT IN ('Denied', 'ReturnCompleted', 'Cancelled');
   BEGIN
      IF NOT (lines_exist_) THEN
         -- no lines found
         RETURN FALSE;
      END IF;
   
      OPEN get_not_completed_lines;
      FETCH get_not_completed_lines INTO dummy_;
      IF (get_not_completed_lines%FOUND) THEN
         lines_completed_ := FALSE;
      END IF;
      CLOSE get_not_completed_lines;
   
      IF (lines_completed_) THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Lines_Completed___;


FUNCTION All_Lines_Denied___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      lines_exist_        BOOLEAN := Any_Lines_Exists___(rec_.rma_no);
      charges_exist_      BOOLEAN := Any_Charges_Exists___(rec_.rma_no);
      lines_denied_       BOOLEAN := TRUE;
      charges_denied_     BOOLEAN := TRUE;
      dummy_              NUMBER;
   
      CURSOR get_not_denied_lines IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate != 'Denied';
   
      CURSOR get_not_denied_charges IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate != 'Denied';
   BEGIN
      IF NOT (lines_exist_ OR charges_exist_) THEN
         -- no lines found
         RETURN FALSE;
      END IF;
   
      IF (lines_exist_) THEN
         OPEN get_not_denied_lines;
         FETCH get_not_denied_lines INTO dummy_;
         IF (get_not_denied_lines%FOUND) THEN
            lines_denied_ := FALSE;
         END IF;
         CLOSE get_not_denied_lines;
      END IF;
   
      IF (charges_exist_) THEN
         OPEN get_not_denied_charges;
         FETCH get_not_denied_charges INTO dummy_;
         IF (get_not_denied_charges%FOUND) THEN
            charges_denied_ := FALSE;
         END IF;
         CLOSE get_not_denied_charges;
      END IF;
   
      IF (lines_denied_ AND charges_denied_) THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Lines_Denied___;


FUNCTION All_Lines_Denied_Or_Cancel___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR get_incorrect_lines IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate NOT IN ('Denied', 'Cancelled');
   
      CURSOR get_incorrect_charges IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate != 'Denied';
   
      dummy_                  NUMBER;
      bad_lines_exist_        BOOLEAN := FALSE;
      bad_charge_line_exist_  BOOLEAN := FALSE;
      lines_exists_           BOOLEAN := Any_Lines_Exists___(rec_.rma_no);
      charges_exists_         BOOLEAN := Any_Charges_Exists___(rec_.rma_no);
   BEGIN
   
      -- IF no lines exist in rma
      IF NOT (lines_exists_ OR charges_exists_) THEN
         RETURN FALSE;
      END IF;
   
      IF (lines_exists_) THEN
         OPEN get_incorrect_lines;
         FETCH get_incorrect_lines INTO dummy_;
         bad_lines_exist_ := (get_incorrect_lines%FOUND);
         CLOSE get_incorrect_lines;
      END IF;
   
      IF (charges_exists_) THEN
         OPEN get_incorrect_charges;
         FETCH get_incorrect_charges INTO dummy_;
         bad_charge_line_exist_ := (get_incorrect_charges%FOUND);
         CLOSE get_incorrect_charges;
      END IF;
   
      IF NOT (bad_lines_exist_ OR bad_charge_line_exist_) THEN
         RETURN TRUE;
      END IF;
      RETURN FALSE;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Lines_Denied_Or_Cancel___;


FUNCTION All_Lines_Planned_Or_Denied___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR get_incorrect_line  IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate NOT IN ('Planned', 'Denied', 'Cancelled');
   
      CURSOR get_incorrect_charge  IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rec_.rma_no
         AND rowstate NOT IN ('Planned', 'Denied');
   
      dummy_              NUMBER;
      lines_exists_       BOOLEAN := any_lines_exists___(rec_.rma_no);
      charges_exists_     BOOLEAN := any_charges_exists___(rec_.rma_no);
      bad_lines_exists_   BOOLEAN := FALSE;
      bad_charges_exists_ BOOLEAN := FALSE;
   BEGIN
   
      IF NOT ( lines_exists_ OR charges_exists_) THEN
         -- we found no lines at this rma
         RETURN FALSE;
      END IF;
   
      IF lines_exists_ THEN
         OPEN get_incorrect_line;
         FETCH get_incorrect_line INTO dummy_;
         bad_lines_exists_ := get_incorrect_line%FOUND;
         CLOSE get_incorrect_line;
      END IF;
   
      IF charges_exists_ THEN
         OPEN get_incorrect_charge;
         FETCH get_incorrect_charge INTO dummy_;
         bad_charges_exists_ := NOT (get_incorrect_charge%NOTFOUND);
         CLOSE get_incorrect_charge;
      END IF;
   
      IF NOT (bad_charges_exists_ OR bad_lines_exists_) THEN
         -- we found no lines that where not credit invoiced.
         RETURN TRUE;
      END IF;
   
      RETURN FALSE;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Lines_Planned_Or_Denied___;


FUNCTION All_Received_Handled___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR get_incorrect_line  IS
        SELECT 1
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate IN  ('Planned','Released','Received');
   
      CURSOR get_pr_line  IS
        SELECT qty_received, qty_scrapped, qty_returned_inv, conv_factor, catalog_no
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate IN  ('PartiallyReceived');
   
      CURSOR get_Completed_lines  IS
        SELECT 1
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate IN  ('ReturnCompleted');
   
        dummy_             NUMBER;
        line_handled_all_  BOOLEAN := FALSE;
        pr_lines_exist_    BOOLEAN := FALSE;
   BEGIN
      OPEN get_incorrect_line;
      FETCH get_incorrect_line INTO dummy_;
      IF NOT (get_incorrect_line%NOTFOUND) THEN
         CLOSE get_incorrect_line ;
         -- we found a line in a state were it can impossibly be fully handled
         RETURN FALSE;
      END IF;
      CLOSE get_incorrect_line;
   
      FOR linerec_  IN get_pr_line LOOP
         -- non-inventory-part lines are also completable
         line_handled_all_ :=
           (Sales_Part_API.Get_Part_No(rec_.contract, linerec_.catalog_no) IS NULL)  OR
           linerec_.qty_received = ((nvl(linerec_.qty_scrapped,0) +
                                     nvl(linerec_.qty_returned_inv,0)) /
                                    linerec_.conv_factor);
         pr_lines_exist_ := TRUE;
         EXIT WHEN line_handled_all_ = FALSE;
      END LOOP;
   
      IF pr_lines_exist_ THEN
         IF NOT line_handled_all_ THEN
            -- we found a line with received qty that was not handled.
            RETURN FALSE ;
         END IF;
         RETURN TRUE;
      ELSE
         -- no Partially Received lines exists
         -- at least one line has to fulfil the requirement
         OPEN get_Completed_lines;
         FETCH get_Completed_lines INTO dummy_;
         IF NOT (get_Completed_lines%NOTFOUND) THEN
            CLOSE get_Completed_lines;
         -- we found no lines that were fully handled
            RETURN FALSE;
         END IF;
         CLOSE get_Completed_lines;
      END IF;
      -- We found some Completed lines
      RETURN TRUE;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Received_Handled___;


FUNCTION Fully_Received___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR get_incorrect_line  IS
        SELECT 1
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate in ('PartiallyReceived', 'Planned', 'Released');
        dummy_             NUMBER;
   BEGIN
   
      IF NOT any_lines_exists___(rec_.rma_no) THEN
         -- we found no lines at this rma
         RETURN FALSE;
      END IF;
   
      OPEN get_incorrect_line;
      FETCH get_incorrect_line INTO dummy_;
      IF (get_incorrect_line%NOTFOUND) THEN
         CLOSE get_incorrect_line;
         -- we found no lines in the other states
         RETURN TRUE;
      END IF;
      CLOSE get_incorrect_line;
      RETURN FALSE;
   END Core;

BEGIN
   RETURN Core(rec_);
END Fully_Received___;


FUNCTION Line_Was_Received___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR get_received_line  IS
        SELECT 1
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate IN ('PartiallyReceived','Received','ReturnCompleted');
   
        dummy_             NUMBER;
   BEGIN
      OPEN get_received_line;
      FETCH get_received_line INTO dummy_;
      IF (get_received_line%NOTFOUND) THEN
         CLOSE get_received_line;
         -- we found no received lines at this rma
         RETURN FALSE;
      END IF;
      CLOSE get_received_line;
      RETURN TRUE;
   END Core;

BEGIN
   RETURN Core(rec_);
END Line_Was_Received___;


FUNCTION Some_Lines_Released___ (
   rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_  IN     RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR lines_exist  IS
        SELECT 1
          FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate ='Released';
   
      CURSOR charges_exist  IS
        SELECT 1
          FROM RETURN_MATERIAL_CHARGE_TAB
          WHERE rma_no = rec_.rma_no
          AND rowstate ='Released';
   
      dummy_            NUMBER;
      released_exists_  BOOLEAN;
   BEGIN
   
      OPEN lines_exist;
      FETCH lines_exist INTO dummy_;
      released_exists_ := lines_exist%FOUND;
      CLOSE lines_exist;
   
      IF released_exists_ THEN
         RETURN TRUE;
      END IF;
   
      OPEN charges_exist;
      FETCH charges_exist INTO dummy_;
      released_exists_ := charges_exist%FOUND;
      CLOSE charges_exist;
   
      -- we found at least a charge in state Released
      RETURN released_exists_;
   END Core;

BEGIN
   RETURN Core(rec_);
END Some_Lines_Released___;


PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY return_material_tab%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
   BEGIN
      rec_.rowversion := sysdate;
      UPDATE return_material_tab
         SET rowstate = state_,
             rowversion = rec_.rowversion
         WHERE rma_no = rec_.rma_no;
      rec_.rowstate := state_;
   END Base;

   PROCEDURE Core (
      rec_   IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
      old_state_    RETURN_MATERIAL_TAB.rowstate%TYPE;
   BEGIN
      old_state_      := Get_Objstate(rec_.rma_no);
      Base(rec_, state_);
   
      -- When state changes happen, should be logged in history.
      IF (rec_.rowstate != old_state_) THEN
         Return_Material_History_API.New(rec_.rma_no);
      END IF;
   
      IF (rec_.case_id IS NOT NULL) AND (rec_.rowstate != 'Planned') THEN
         $IF Component_Callc_SYS.INSTALLED $THEN
            Cc_Case_Task_API.Handover_Status_Change(rec_.rma_no, 'RMA', rec_.rowstate);
         $ELSE
            NULL;
         $END
      END IF;
   
   END Core;

BEGIN
   Core(rec_, state_);
END Finite_State_Set___;


FUNCTION All_Lines_Approved___ (
   rec_ IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rec_ IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE ) RETURN BOOLEAN
   IS
      CURSOR get_incorrect_line  IS
         SELECT rma_line_no
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rec_.rma_no
         AND (credit_approver_id IS NULL)
         AND rowstate NOT IN ('Planned', 'Denied', 'Cancelled')
         AND rental = Fnd_Boolean_API.DB_FALSE;
   
      CURSOR get_incorrect_charge  IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rec_.rma_no
         AND (credit_approver_id IS NULL)
         AND rowstate NOT IN ('Planned', 'Denied');
   
      dummy_   NUMBER;
      lines_exists_       BOOLEAN := any_lines_exists___(rec_.rma_no);
      charges_exists_     BOOLEAN := any_charges_exists___(rec_.rma_no);
      bad_lines_exists_   BOOLEAN := FALSE;
      bad_charges_exists_ BOOLEAN := FALSE;
   BEGIN
   
      IF NOT ( lines_exists_ OR charges_exists_) THEN
         -- we found no lines at this rma
         RETURN FALSE;
      END IF;
   
      IF lines_exists_ THEN
         FOR line_rec_ IN get_incorrect_line LOOP
            IF (Return_Material_Line_API.Check_Exch_Charge_Order(rec_.rma_no, line_rec_.rma_line_no) = 'FALSE') THEN
               bad_lines_exists_:= TRUE;
               EXIT;
            END IF;
         END LOOP;
      END IF;
   
      IF charges_exists_ THEN
         OPEN get_incorrect_charge;
         FETCH get_incorrect_charge INTO dummy_;
         bad_charges_exists_ := NOT (get_incorrect_charge%NOTFOUND);
         CLOSE get_incorrect_charge;
      END IF;
   
      IF NOT (bad_charges_exists_ OR bad_lines_exists_) THEN
         -- we found no lines that where not credit invoiced.
         RETURN TRUE;
      END IF;
      RETURN FALSE;
   END Core;

BEGIN
   RETURN Core(rec_);
END All_Lines_Approved___;


FUNCTION Any_Lines_Exists___ (
   rma_no_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
      CURSOR exist_control IS
         SELECT 1
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         CLOSE exist_control;
         RETURN(TRUE);
      END IF;
      CLOSE exist_control;
      RETURN(FALSE);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Any_Lines_Exists___;


FUNCTION Any_Charges_Exists___ (
   rma_no_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
      CURSOR exist_control IS
         SELECT 1
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rma_no_;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         CLOSE exist_control;
         RETURN(TRUE);
      END IF;
      CLOSE exist_control;
      RETURN(FALSE);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Any_Charges_Exists___;


PROCEDURE Modify_Rma_Defaults___ (
   rma_no_                    IN NUMBER,
   pay_tax_                   IN BOOLEAN,
   update_tax_from_ship_addr_ IN BOOLEAN )
IS
   
   PROCEDURE Core (
      rma_no_                    IN NUMBER,
      pay_tax_                   IN BOOLEAN,
      update_tax_from_ship_addr_ IN BOOLEAN )
   IS
      CURSOR get_rma_lines IS
         SELECT rma_line_no
           FROM RETURN_MATERIAL_LINE_TAB
          WHERE rma_no = rma_no_;
   
      CURSOR get_rma_charge_lines IS
         SELECT rma_charge_no
           FROM RETURN_MATERIAL_CHARGE_TAB
          WHERE rma_no = rma_no_;
   BEGIN
   
      FOR rec_ IN get_rma_lines LOOP
         Return_Material_Line_API.Modify_Rma_Defaults__(rma_no_, rec_.rma_line_no, pay_tax_, update_tax_from_ship_addr_);
      END LOOP;
   
      FOR rec_ IN get_rma_charge_lines LOOP
         Return_Material_Charge_API.Modify_Rma_Defaults__(rma_no_, rec_.rma_charge_no, pay_tax_, update_tax_from_ship_addr_);
      END LOOP;
   
   END Core;

BEGIN
   Core(rma_no_, pay_tax_, update_tax_from_ship_addr_);
END Modify_Rma_Defaults___;


FUNCTION Jinsui_Order_is_Connected___(rma_no_ IN NUMBER) RETURN BOOLEAN
IS
   
   FUNCTION Core(rma_no_ IN NUMBER) RETURN BOOLEAN
   IS
      jinsui_order_found_       BOOLEAN := FALSE;
      cust_ord_rec_             Customer_Order_API.Public_Rec;
   
      CURSOR get_connect_orders IS
        SELECT order_no
        FROM return_material_line_tab
        WHERE rma_no = rma_no_;
   
   BEGIN
      FOR line_ IN get_connect_orders LOOP
         IF line_.order_no IS NOT NULL THEN
            cust_ord_rec_ := Customer_Order_API.Get(line_.order_no);
            IF cust_ord_rec_.Jinsui_Invoice ='TRUE' THEN
               jinsui_order_found_ := TRUE;
               EXIT;
            END IF;
         END IF;
      END LOOP;
      RETURN jinsui_order_found_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Jinsui_Order_is_Connected___;


FUNCTION Check_Debit_Inv_Numbers___ (
   rma_no_ IN NUMBER ) RETURN NUMBER
IS
   
   FUNCTION Core (
      rma_no_ IN NUMBER ) RETURN NUMBER
   IS
      lines_                          NUMBER := 2;
      no_of_distinct_deb_inv_         NUMBER := 0;
      no_of_distinct_charge_deb_inv_  NUMBER := 0;
      connectionless_lines_exist_     NUMBER := 0;
      connectionless_charges_exist_   NUMBER := 0;
   
      -- This cursor will check the number of distinct debit invoice connected to RMA lines.
      -- if the counted value is 0 it means that the rma lines does not exists or they are connectionless.
      -- if the value is 1 then some or all rma lines are connected to 1 debit invoice.
      -- if the value is greated than 1 then more than one connection of course.
      CURSOR distinct_debit_invoices IS
         SELECT COUNT(DISTINCT(debit_invoice_no))
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no    = rma_no_
         AND    credit_invoice_no IS NULL
         AND    debit_invoice_no IS NOT NULL
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   
      -- This cursor will return 1 if at least connectionless RMA line exist.
      CURSOR connectionless_lines_exist IS
         SELECT 1
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    debit_invoice_no IS NULL
         AND    credit_invoice_no IS NULL
         AND    rowstate NOT IN ('Denied', 'Cancelled');
   
      -- This cursor will check the number of distinct debit invoice connected to RMA charge lines.
      -- if the counted value is 0 it means that the rma charge lines does not exists or they are connectionless.
      -- if the value is 1 then some or all charge lines are connected to 1 debit invoice.
      -- if the value is greated than 1 then more than one connection of course.
      CURSOR distinct_charge_debit_invoices IS
         SELECT COUNT(DISTINCT(ii.invoice_id))
         FROM   CUSTOMER_ORDER_INV_ITEM ii, RETURN_MATERIAL_CHARGE_TAB ct
         WHERE  ct.rma_no        = rma_no_
         AND    ii.order_no      = ct.order_no
         AND    ii.charge_seq_no = ct.sequence_no
         AND    ii.company       = ct.company
         AND    ct.order_no IS NOT NULL
         AND    ct.credit_invoice_no IS NULL;
   
      -- This cursor will return 1 if at least connectionless RMA charge exist..
      CURSOR connectionless_charges_exist IS
         SELECT 1
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE  rma_no = rma_no_
         AND    order_no IS NULL
         AND    credit_invoice_no IS NULL
         AND    charge_amount != 0
         AND    rowstate != 'Denied';
   
      -- This cursor is called when we know that there is only one debit invoice is connected to RMA line(s)
      -- and there is only one debit invoice is connected to charge line(s)..
      -- Then we use this cursor to check whether the connected debit invoice no is same for
      -- both RMA line(s) and charge line(s).
      -- IF any record is found then both debit invoices are same. Otherwise they are differ.
      CURSOR check_same_deb_invoice IS
         SELECT DISTINCT(ii.invoice_id)
         FROM   CUSTOMER_ORDER_INV_ITEM ii, RETURN_MATERIAL_CHARGE_TAB ct
         WHERE  ct.rma_no        = rma_no_
         AND    ii.order_no      = ct.order_no
         AND    ii.charge_seq_no = ct.sequence_no
         AND    ii.company       = ct.company
         AND    ct.order_no IS NOT NULL
         AND    ct.credit_invoice_no IS NULL
            INTERSECT
         SELECT DISTINCT(ih.invoice_id)
         FROM   CUSTOMER_ORDER_INV_HEAD ih, RETURN_MATERIAL_LINE_TAB rm
         WHERE  rm.rma_no     = rma_no_
         AND    ih.invoice_no = rm.debit_invoice_no
         AND    ih.company    = rm.company
         AND    rm.debit_invoice_no IS NOT NULL
         AND    rm.credit_invoice_no IS NULL;
   
      deb_rec_  check_same_deb_invoice%ROWTYPE;
   BEGIN
      OPEN  distinct_debit_invoices;
      FETCH distinct_debit_invoices INTO no_of_distinct_deb_inv_;
      CLOSE distinct_debit_invoices;
   
      OPEN  distinct_charge_debit_invoices;
      FETCH distinct_charge_debit_invoices INTO no_of_distinct_charge_deb_inv_;
      CLOSE distinct_charge_debit_invoices;
   
      IF (no_of_distinct_deb_inv_ = 0) THEN
         -- All rma_lines are connectionless.
        lines_ := 0;
      ELSIF (no_of_distinct_deb_inv_ = 1) OR (no_of_distinct_charge_deb_inv_ = 1) THEN
         OPEN  connectionless_lines_exist;
         FETCH connectionless_lines_exist INTO connectionless_lines_exist_;
         IF connectionless_lines_exist%NOTFOUND THEN
            connectionless_lines_exist_ := 0;
         END IF;
         CLOSE connectionless_lines_exist;
   
         OPEN  connectionless_charges_exist;
         FETCH connectionless_charges_exist INTO connectionless_charges_exist_;
         IF connectionless_charges_exist%NOTFOUND THEN
            connectionless_charges_exist_ := 0;
         END IF;
         CLOSE connectionless_charges_exist;
   
         IF (no_of_distinct_deb_inv_ = 1) AND (no_of_distinct_charge_deb_inv_ = 0) THEN
            IF (connectionless_lines_exist_ = 0) AND (connectionless_charges_exist_ = 0) THEN
               lines_ := 1;
            END IF;
         ELSIF (no_of_distinct_deb_inv_ = 1) AND (no_of_distinct_charge_deb_inv_ = 1) THEN
            IF (connectionless_lines_exist_ = 0) AND (connectionless_charges_exist_ = 0) THEN
               -- Check whether the connected debit invoice for both charge lines and rma lines is same.
               OPEN  check_same_deb_invoice;
               FETCH check_same_deb_invoice INTO deb_rec_;
               IF (check_same_deb_invoice%FOUND) THEN
                  lines_ := 1;
               END IF;
               CLOSE check_same_deb_invoice;
            END IF;
         END IF;
      END IF;
      RETURN lines_;
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Check_Debit_Inv_Numbers___;


PROCEDURE Validate_Jinsui_Constraints___(newrec_ IN RETURN_MATERIAL_TAB%ROWTYPE)
IS
   
   PROCEDURE Core(newrec_ IN RETURN_MATERIAL_TAB%ROWTYPE)
   IS
       charge_exist_            NUMBER;
       company_                 VARCHAR2(20);
       payer_                   RETURN_MATERIAL_TAB.customer_no%TYPE;
       temp_customer_           RETURN_MATERIAL_TAB.customer_no%TYPE;
       acc_currency_            VARCHAR2(3);
       order_currency_          VARCHAR2(3);
       jinsui_order_connected_  BOOLEAN;
       jinsui_customer_         VARCHAR2(5);
       old_jinsui_db_           RETURN_MATERIAL_TAB.jinsui_invoice%TYPE;
       line_exist_              BOOLEAN := FALSE;
   
   BEGIN
   
      old_jinsui_db_ := Get_Jinsui_Invoice_Db(newrec_.rma_no);
   
      IF (newrec_.rma_no IS NOT NULL) THEN
         IF (newrec_.rowstate ='Planned')OR (newrec_.rowstate ='Released') THEN
            IF (old_jinsui_db_ != newrec_.jinsui_invoice) AND (newrec_.jinsui_invoice = 'TRUE') THEN
               line_exist_ := Any_Lines_Exists___(newrec_.rma_no);
               IF (line_exist_ = TRUE) THEN
                  Error_SYS.Record_General(lu_name_, 'NOJINSUISELECT1: It is not possible to select Jinsui Invoice as connected lines exist.');
               ELSE
                  charge_exist_ := Exist_Charges__(newrec_.rma_no);
                  IF (charge_exist_ != 0) THEN
                     Error_SYS.Record_General(lu_name_, 'NOJINSUISELECT2: It is not possible to select Jinsui Invoice as connected charge exist.');
                  END IF;
               END IF;
            END IF;
         ELSE
            IF (old_jinsui_db_ != newrec_.jinsui_invoice) THEN
               Error_SYS.Record_General(lu_name_, 'JINSUINOCHANGE1: Jinsui status cannot be changed as RMA is in :P1 state.', newrec_.rowstate);
            END IF;
         END IF;
      END IF;
   
      IF newrec_.jinsui_invoice = 'TRUE' THEN
         payer_ := newrec_.customer_no_credit;
         IF payer_ IS NOT NULL THEN
            temp_customer_ := payer_;
         ELSE
            temp_customer_ := newrec_.customer_no;
         END IF;
         company_ := Site_API.Get_Company(newrec_.contract);
         $IF Component_Jinsui_SYS.INSTALLED $THEN
            jinsui_customer_ := Js_Customer_Info_API.Get_Create_Js_Invoice(company_, temp_customer_);
            jinsui_customer_ := NVL(jinsui_customer_,'FALSE');
   
            IF jinsui_customer_ = 'FALSE' THEN
               Error_SYS.Record_General(lu_name_, 'NOJINSUI1: You cannot have a Jinsui RMA when :P1 is not Jinsui enabled.',temp_customer_);
            END IF;
         $END
         Company_Finance_API.Get_Accounting_Currency(acc_currency_, company_);
         order_currency_ := newrec_.currency_Code;
         IF order_currency_ != acc_currency_ THEN
            Error_SYS.Record_General(lu_name_, 'NOJINSUI2: You cannot have a Jinsui RMA when order currency and accounting currency are not the same.');
         END IF;
      ELSE
         IF (newrec_.rma_no IS NOT NULL) THEN
            jinsui_order_connected_ := Jinsui_Order_Is_Connected___(newrec_.rma_no);
            IF jinsui_order_connected_ THEN
               Error_SYS.Record_General(lu_name_, 'JINSUINOCHANGE2: Jinsui status cannot be changed as connected line(s) are enabled for Jinsui.');
            END IF;
         END IF;
      END IF;
   END Core;

BEGIN
   Core(newrec_);
END Validate_Jinsui_Constraints___;


PROCEDURE Validate_Tax_Calc_Basis___ (
   newrec_   IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE )
IS
   
   PROCEDURE Core (
      newrec_   IN OUT NOCOPY RETURN_MATERIAL_TAB%ROWTYPE )
   IS
      customer_tax_calc_basis_   VARCHAR2(20);
      tax_regime_db_             VARCHAR2(20);
      company_                   VARCHAR2(20);
   BEGIN
      company_      := Site_API.Get_Company(newrec_.contract);
      tax_regime_db_ := NVL(Tax_Regime_API.Encode(Customer_Tax_Info_API.Get_Tax_Regime(newrec_.customer_no, Cust_Ord_Customer_API.Get_Delivery_Address(newrec_.customer_no), company_)),'NOTFOUND');
      IF (tax_regime_db_ = 'VAT') THEN
         customer_tax_calc_basis_ := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(newrec_.customer_no, company_);
         IF (customer_tax_calc_basis_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOCUSTTAXCALCBASIS: Tax calculation basis of the customer should be defined for the company.');
         END IF;
      ELSE
         IF (newrec_.use_price_incl_tax IS NULL) THEN
            newrec_.use_price_incl_tax := 'FALSE';
         END IF;
         IF (newrec_.use_price_incl_tax = 'TRUE') THEN
            Error_SYS.Record_General(lu_name_, 'USEPRICEINCLTAXCOMP: Price including tax can only be used with the company tax regime VAT.');
         END IF;
      END IF;
   END Core;

BEGIN
   Core(newrec_);
END Validate_Tax_Calc_Basis___;


FUNCTION Credit_Approve_Allowed___ (
   rma_no_  IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Core (
      rma_no_  IN NUMBER ) RETURN BOOLEAN
   IS
      CURSOR approve_not_allowed_line  IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_
         AND (credit_approver_id IS NULL)
         AND rowstate NOT IN ('Planned', 'Denied', 'Cancelled')
         AND qty_to_return = 0;
   
      CURSOR approve_not_allowed_charge  IS
         SELECT 1
         FROM RETURN_MATERIAL_CHARGE_TAB
         WHERE rma_no = rma_no_
         AND (credit_approver_id IS NULL)
         AND rowstate NOT IN ('Planned', 'Denied')
         AND charged_qty = 0;
   
      dummy_                NUMBER;
      approve_not_allowed_  BOOLEAN;
   BEGIN
   
      OPEN approve_not_allowed_line;
      FETCH approve_not_allowed_line INTO dummy_;
      approve_not_allowed_ := approve_not_allowed_line%FOUND;
      CLOSE approve_not_allowed_line;
   
      IF NOT approve_not_allowed_ THEN
         OPEN approve_not_allowed_charge;
         FETCH approve_not_allowed_charge INTO dummy_;
         approve_not_allowed_ := approve_not_allowed_charge%FOUND;
         CLOSE approve_not_allowed_charge;
      END IF;
      RETURN (NOT approve_not_allowed_);
   END Core;

BEGIN
   RETURN Core(rma_no_);
END Credit_Approve_Allowed___;


PROCEDURE Validate_Order_No___ (
   rma_no_         IN NUMBER,
   rma_contract_   IN VARCHAR2,
   rma_curr_code_  IN VARCHAR2,
   rma_customer_   IN VARCHAR2,
   order_no_       IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      rma_no_         IN NUMBER,
      rma_contract_   IN VARCHAR2,
      rma_curr_code_  IN VARCHAR2,
      rma_customer_   IN VARCHAR2,
      order_no_       IN VARCHAR2 )
   IS
      order_rec_      Customer_Order_API.Public_Rec;
      order_state_    VARCHAR2(20);
      dummy_          NUMBER;
   
      CURSOR check_different_order IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_
         AND  order_no IS NOT NULL
         AND order_no != order_no_
         AND rowstate NOT IN ('Cancelled', 'Denied');
   
      CURSOR exist_invalid_charge_line IS
         SELECT 1
         FROM   RETURN_MATERIAL_CHARGE_TAB
         WHERE ORDER_NO IS NOT NULL
         AND ORDER_NO != order_no_
         AND RMA_NO = rma_no_
         AND rowstate != 'Denied';
   
   BEGIN
      order_rec_   := Customer_Order_API.Get(order_no_);
      IF ((rma_contract_ != order_rec_.contract) OR (rma_curr_code_ != order_rec_.currency_code) OR (rma_customer_ != order_rec_.customer_no)) THEN
         Error_SYS.Record_General(lu_name_, 'INVALID_ORDER: This Customer Order does not match the information on the RMA. Customer, Site or Currency Code.');
      END IF;
   
      order_state_ := Customer_Order_API.Get_Objstate(order_no_);
      IF (order_state_ NOT IN ('Delivered', 'PartiallyDelivered', 'Invoiced')) THEN
         Error_SYS.Record_General(lu_name_, 'INVALID_ORDER_STATE: Only delivered orders can be connected to RMA.');
      END IF;
   
      IF NOT (Customer_Order_API.Valid_Ownership_Del_Line_Exist(order_no_)) THEN
         Error_SYS.Record_General(lu_name_, 'EXT_OWNED_LINE: There are no delivered company-owned or rental customer order lines in the entered customer order.');
      END IF;
   
      OPEN check_different_order;
      FETCH check_different_order INTO dummy_;
      IF (check_different_order%FOUND) THEN
         CLOSE check_different_order;
         Error_SYS.Record_General(lu_name_, 'CONN_TO_DIFF_ORDER: The customer order number defined in the RMA header must be the same as the one connected to the RMA line.');
      END IF;
      CLOSE check_different_order;
   
      OPEN exist_invalid_charge_line;
      FETCH exist_invalid_charge_line INTO dummy_;
      IF (exist_invalid_charge_line%FOUND) THEN
         CLOSE exist_invalid_charge_line;
         Error_SYS.Record_General(lu_name_, 'INVALID_CHARGE_LINE: Customer order number defined in the RMA header must be same as the one connected to the RMA charge line.');
      END IF;
      CLOSE exist_invalid_charge_line;
   
   END Core;

BEGIN
   Core(rma_no_, rma_contract_, rma_curr_code_, rma_customer_, order_no_);
END Validate_Order_No___;


PROCEDURE Validate_Shipment_Id___ (
   rma_no_         IN NUMBER,
   rma_contract_   IN VARCHAR2,
   rma_curr_code_  IN VARCHAR2,
   rma_customer_   IN VARCHAR2,
   shipment_id_    IN NUMBER )
IS
   
   PROCEDURE Core (
      rma_no_         IN NUMBER,
      rma_contract_   IN VARCHAR2,
      rma_curr_code_  IN VARCHAR2,
      rma_customer_   IN VARCHAR2,
      shipment_id_    IN NUMBER )
   IS
      shipment_rec_        Shipment_API.Public_Rec;
      shipment_state_      VARCHAR2(20);
   
      CURSOR get_line_order_no IS
         SELECT order_no
         FROM   RETURN_MATERIAL_LINE_TAB
         WHERE  rma_no = rma_no_
         AND    order_no IS NOT NULL
         AND    rowstate NOT IN ('Cancelled', 'Denied');
   BEGIN
      shipment_rec_ := Shipment_API.Get(shipment_id_);
      IF ((rma_contract_ != shipment_rec_.contract) OR (rma_customer_ != shipment_rec_.deliver_to_customer_no)) THEN
         Error_SYS.Record_General(lu_name_, 'INVALID_SHIPMENT: This Shipment does not match the information on the RMA. Deliver to Customer or Site.');
      END IF;
   
      shipment_state_ := Shipment_API.Get_State(shipment_id_);
      IF (shipment_state_ NOT IN ('Completed', 'Closed')) THEN
         Error_SYS.Record_General(lu_name_, 'INVALID_SHIPMENT_STATE: Only Complete or Closed shipments can be connected to RMA.');
      END IF;
   
      IF NOT (Shipment_API.Rma_Connection_Allowed(shipment_id_)) THEN
         Error_SYS.Record_General(lu_name_, 'NON_DELIV_SHIPMENT: There are no delivered company owned sales parts in this shipment.');
      END IF;
   
      FOR line_rec IN get_line_order_no LOOP
         IF NOT Shipment_Order_Line_API.Order_Exist_In_Shipment(shipment_id_, line_rec.order_no) THEN
            Error_SYS.Record_General(lu_name_, 'ORDER_NOT_EXIST: Customer order numbers entered in the RMA lines should belong to the shipment entered in the RMA header.');
         END IF;
      END LOOP;
   END Core;

BEGIN
   Core(rma_no_, rma_contract_, rma_curr_code_, rma_customer_, shipment_id_);
END Validate_Shipment_Id___;


PROCEDURE Exist_Return_To_Vendor_No___ (
   return_to_vendor_no_ IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      return_to_vendor_no_ IN VARCHAR2 )
   IS
   BEGIN
      $IF Component_Purch_SYS.INSTALLED $THEN
         Supplier_API.Exist(return_to_vendor_no_);
      $ELSE
         NULL;
      $END
   END Core;

BEGIN
   Core(return_to_vendor_no_);
END Exist_Return_To_Vendor_No___;


PROCEDURE Validate_Retn_To_Vendor_No___ (
   rma_no_               IN NUMBER,
   return_to_vendor_no_  IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      rma_no_               IN NUMBER,
      return_to_vendor_no_  IN VARCHAR2 )
   IS
      rec_                  RETURN_MATERIAL_TAB%ROWTYPE;
      ordrow_rec_           Customer_Order_Line_API.Public_Rec;
      -- Bug 126845, Introduced a new variable for the supplier of Purchase Order
      vendor_no_            VARCHAR2(20);
   
      CURSOR get_line IS
        SELECT order_no, line_no, rel_no, line_item_no
        FROM RETURN_MATERIAL_LINE_TAB
        WHERE rma_no = rma_no_;
   BEGIN
      rec_ := Get_Object_By_Keys___(rma_no_);
   
      IF return_to_vendor_no_ IS NOT NULL THEN
         Exist_Return_To_Vendor_No___(return_to_vendor_no_);
      END IF;
      IF (rec_.rowstate != 'Planned') THEN
          Error_SYS.Record_General(lu_name_, 'SUPPNOTALLOWUPDATE: The supplier can be modified only in the Planned status.');
      END IF;
      FOR line_rec_ IN get_line LOOP
         IF (line_rec_.order_no IS NOT NULL) THEN
            -- Bug 126845, get the supplier of the Customer Order connected Purchase Order.
            vendor_no_:= Customer_Order_Pur_Order_API.Get_PO_Vendor_No(NULL, line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
            IF (return_to_vendor_no_ != vendor_no_ AND rec_.return_to_contract IS NULL) THEN
               Error_SYS.Record_General (lu_name_, 'SUPPLIERNOTALLOWED: There are RMA lines which are connected to customer order lines which have not been directly delivered by this supplier.');
            END IF;
         END IF;
      END LOOP;
   END Core;

BEGIN
   Core(rma_no_, return_to_vendor_no_);
END Validate_Retn_To_Vendor_No___;


PROCEDURE Validate_Return_Addr_No___ (
   rma_no_               IN NUMBER,
   return_addr_no_       IN VARCHAR2,
   return_to_vendor_no_  IN VARCHAR2,
   return_to_contract_   IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      rma_no_               IN NUMBER,
      return_addr_no_       IN VARCHAR2,
      return_to_vendor_no_  IN VARCHAR2,
      return_to_contract_   IN VARCHAR2 )
   IS
      raise_error_    BOOLEAN := FALSE;
   
   BEGIN
   
      IF (return_to_contract_ IS NULL AND return_to_vendor_no_ IS NOT NULL) THEN
         -- return to external supplier
         IF (Supplier_Info_Address_API.Is_Type(return_to_vendor_no_, return_addr_no_, Address_Type_Code_API.Decode('DELIVERY')) = 'FALSE') THEN
            raise_error_ := TRUE;
         END IF;
      ELSE
         IF (Company_Address_Type_API.Check_Exist(Site_API.Get_Company(return_to_contract_), return_addr_no_, Address_Type_Code_API.Decode('DELIVERY')) = 'FALSE') THEN
             raise_error_ := TRUE;
         END IF;
      END IF;
   
      IF raise_error_ THEN
         Error_SYS.Record_General(lu_name_, 'NOTVALIDSUPADR: Return address ID :P1 is not a valid address.', return_addr_no_);
      END IF;
   END Core;

BEGIN
   Core(rma_no_, return_addr_no_, return_to_vendor_no_, return_to_contract_);
END Validate_Return_Addr_No___;


PROCEDURE Validate_Return_To_Contract___ (
   rma_no_               IN NUMBER,
   contract_             IN VARCHAR2,
   return_to_contract_   IN VARCHAR2)
IS
   
   PROCEDURE Core (
      rma_no_               IN NUMBER,
      contract_             IN VARCHAR2,
      return_to_contract_   IN VARCHAR2)
   IS
      ord_line_rec_  Customer_Order_line_API.Public_Rec;
      rec_           RETURN_MATERIAL_TAB%ROWTYPE;
   
      CURSOR get_line IS
         SELECT order_no, line_no, rel_no, line_item_no
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_;
   BEGIN
      rec_ := Get_Object_By_Keys___(rma_no_);
   
      IF (rec_.rowstate NOT IN ('Planned')) THEN
         Error_SYS.Record_General(lu_name_, 'RET_TO_SITE_UPDATE: The Return to Site field can be modified only in the Planned status.');
      END IF;
      IF (contract_ != NVL(return_to_contract_, Database_SYS.string_null_) AND Site_API.Get_Company(contract_) != Site_API.Get_Company(return_to_contract_)) THEN
         FOR line_rec_ IN get_line LOOP
            IF (line_rec_.order_no IS NOT NULL) THEN
               ord_line_rec_ := Customer_Order_line_API.Get(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
               IF (ord_line_rec_.supply_code = 'IPD'  AND ord_line_rec_.supply_site != return_to_contract_) THEN
                  Error_SYS.Record_General(lu_name_, 'SITE_COMPANY_DIFF: The supply site of the connected customer order and the return-to site must be same when RMA lines are connected to customer order lines that have been delivered directly.');
               END IF;
            END IF;
         END LOOP;
      END IF;
   END Core;

BEGIN
   Core(rma_no_, contract_, return_to_contract_);
END Validate_Return_To_Contract___;


PROCEDURE Validate_Ship_Via_Del_Term___(
   rma_no_  IN   VARCHAR2)
IS
   
   PROCEDURE Core(
      rma_no_  IN   VARCHAR2)
   IS
      dummy_   NUMBER;
   
      CURSOR get_line IS
         SELECT 1
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_
         AND   order_no IS NULL
         AND   rowstate NOT IN ('Planned', 'Denied', 'Cancelled' );
   BEGIN
      OPEN  get_line;
      FETCH get_line INTO dummy_;
         IF (get_line%FOUND) THEN
            CLOSE get_line;
             Error_SYS.Record_General(lu_name_ ,'SHIPVIADELTERMMANDETORY: Values must be defined for the ship-via and delivery terms when, the return from address is a single occurrence, the intrastat is applicable, and an RMA line exists that is not connected to a customer order line.');
         END IF;
      CLOSE get_line;
   END Core;

BEGIN
   Core(rma_no_);
END Validate_Ship_Via_Del_Term___;


PROCEDURE Modify_Supply_Site_Rma___ (
   rma_no_ IN NUMBER,
   attr_   IN OUT NOCOPY VARCHAR2,
   changed_rec_ IN Indicator_Rec,
   suppliy_site_rma_rec_ IN return_material_tab%ROWTYPE )
IS
   
   PROCEDURE Core (
      rma_no_ IN NUMBER,
      attr_   IN OUT NOCOPY VARCHAR2,
      changed_rec_ IN Indicator_Rec,
      suppliy_site_rma_rec_ IN return_material_tab%ROWTYPE )
   IS
      receipt_rma_no_ RETURN_MATERIAL_TAB.receipt_rma_no%TYPE;
      state_          RETURN_MATERIAL_TAB.rowstate%TYPE;
      newrec_         RETURN_MATERIAL_TAB%ROWTYPE;
      oldrec_         RETURN_MATERIAL_TAB%ROWTYPE;
      objid_          VARCHAR2(2000);
      objversion_     VARCHAR2(2000);
   BEGIN
      state_          := Get_Objstate(rma_no_);
      receipt_rma_no_ := Get_Receipt_Rma_No(rma_no_);
   
      IF ((receipt_rma_no_ IS NOT NULL) AND (state_ NOT IN ('Denied', 'Cancelled'))) THEN
         Get_Id_Version_By_Keys___(objid_, objversion_, receipt_rma_no_);
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
   
         IF changed_rec_.ship_addr_no THEN
            newrec_.ship_addr_no := suppliy_site_rma_rec_.ship_addr_no;
         END IF;
         IF changed_rec_.ship_addr_flag THEN
            newrec_.ship_addr_flag := suppliy_site_rma_rec_.ship_addr_flag;
         END IF;
         IF changed_rec_.ship_addr_country_code THEN
            newrec_.ship_addr_country_code := suppliy_site_rma_rec_.ship_addr_country_code;
         END IF;
         IF changed_rec_.ship_addr_name THEN
            newrec_.ship_addr_name := suppliy_site_rma_rec_.ship_addr_name;
         END IF;
         IF changed_rec_.ship_address1 THEN
            newrec_.ship_address1 := suppliy_site_rma_rec_.ship_address1;
         END IF;
         IF changed_rec_.ship_address2 THEN
            newrec_.ship_address2 := suppliy_site_rma_rec_.ship_address2;
         END IF;
         IF changed_rec_.ship_addr_zip_code THEN
            newrec_.ship_addr_zip_code := suppliy_site_rma_rec_.ship_addr_zip_code;
         END IF;
         IF changed_rec_.ship_addr_city THEN
            newrec_.ship_addr_city := suppliy_site_rma_rec_.ship_addr_city;
         END IF;
         IF changed_rec_.ship_addr_state THEN
            newrec_.ship_addr_state := suppliy_site_rma_rec_.ship_addr_state;
         END IF;
         IF changed_rec_.latest_return_date THEN
            newrec_.latest_return_date := suppliy_site_rma_rec_.latest_return_date;
         END IF;
         Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
      END IF;
   END Core;

BEGIN
   Core(rma_no_, attr_, changed_rec_, suppliy_site_rma_rec_);
END Modify_Supply_Site_Rma___;


PROCEDURE Restrict_Multi_Site_Update___ (
   newrec_  IN RETURN_MATERIAL_TAB%ROWTYPE,
   oldrec_  IN RETURN_MATERIAL_TAB%ROWTYPE )
IS
   
   PROCEDURE Core (
      newrec_  IN RETURN_MATERIAL_TAB%ROWTYPE,
      oldrec_  IN RETURN_MATERIAL_TAB%ROWTYPE )
   IS
   BEGIN
   
      IF (NVL(newrec_.return_to_vendor_no, Database_SYS.string_null_) != NVL(oldrec_.return_to_vendor_no, Database_SYS.string_null_) OR
          NVL(newrec_.return_to_contract, Database_SYS.string_null_)  != NVL(oldrec_.return_to_contract, Database_SYS.string_null_)  OR
          NVL(newrec_.return_addr_no, Database_SYS.string_null_)      != NVL(oldrec_.return_addr_no, Database_SYS.string_null_) OR
          NVL(newrec_.return_addr_flag, Database_SYS.string_null_)    != NVL(oldrec_.return_addr_flag, Database_SYS.string_null_)) THEN
         IF (newrec_.receipt_rma_no IS NOT NULL) THEN
            Error_SYS.Record_General (lu_name_, 'ORGRMAHEADNOTUPDATER: This RMA is associated with a receipt RMA. The modification is not allowed.');
         ELSIF (newrec_.originating_rma_no IS NOT NULL) THEN
            Error_SYS.Record_General (lu_name_, 'ORGRMAHEADNOTUPDATEO: This RMA is associated with a originating RMA. The modification is not allowed.');
         END IF;
      END IF;
   END Core;

BEGIN
   Core(newrec_, oldrec_);
END Restrict_Multi_Site_Update___;


PROCEDURE Modify_Rma_Line_Po_Info___ (
   rma_no_              IN NUMBER,
   return_to_contract_  IN VARCHAR2,
   return_to_vendor_no_ IN VARCHAR2 )
IS
   
   PROCEDURE Core (
      rma_no_              IN NUMBER,
      return_to_contract_  IN VARCHAR2,
      return_to_vendor_no_ IN VARCHAR2 )
   IS
   
      CURSOR get_rma_lines IS
         SELECT rma_line_no, order_no, line_no, rel_no, line_item_no
         FROM RETURN_MATERIAL_LINE_TAB
         WHERE rma_no = rma_no_
         AND   rowstate = 'Planned';
   
      co_line_rec_   Customer_Order_Line_API.Public_Rec;
      po_order_no_   VARCHAR2(12);
      po_line_no_    VARCHAR2(4);
      po_rel_no_     VARCHAR2(4);
      purchase_type_ VARCHAR2(25);
      -- Bug 126845, Declared a new vairable for the supplier in the Purchase Order.
      vendor_no_     VARCHAR2(20);
   
   BEGIN
   
      FOR line_rec_ IN get_rma_lines LOOP
         co_line_rec_ := Customer_Order_Line_API.Get(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
         IF (co_line_rec_.supply_code IN ('PD', 'IPD')) THEN
            -- Bug 126845, Get the supplier of the Customer Order connected Purchase Order.
            vendor_no_:= Customer_Order_Pur_Order_API.Get_PO_Vendor_No(NULL, line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
            IF ((vendor_no_ = return_to_vendor_no_) AND ((return_to_contract_ IS NULL) OR (return_to_contract_ = co_line_rec_.supply_site))) THEN
               Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_, po_line_no_, po_rel_no_, purchase_type_, line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
            ELSE
               po_order_no_ := NULL;
               po_line_no_ := NULL;
               po_rel_no_ := NULL;
            END IF;
            Return_Material_Line_API.Modify_Po_Info__(rma_no_, line_rec_.rma_line_no, po_order_no_, po_line_no_, po_rel_no_);
         END IF;
      END LOOP;
   END Core;

BEGIN
   Core(rma_no_, return_to_contract_, return_to_vendor_no_);
END Modify_Rma_Line_Po_Info___;


FUNCTION Build_Attr_For_New___ (
	attr_ IN  VARCHAR2) RETURN VARCHAR2
IS
   
   FUNCTION Core (
   	attr_ IN  VARCHAR2) RETURN VARCHAR2
   IS
      new_attr_             VARCHAR2(32000);
      ptr_                  NUMBER;
      name_                 VARCHAR2(30);
      value_                VARCHAR2(2000);
      contract_             RETURN_MATERIAL_TAB.contract%TYPE;
      customer_no_          RETURN_MATERIAL_TAB.customer_no%TYPE;
      currency_code_        RETURN_MATERIAL_TAB.currency_code%TYPE;
      vat_                  RETURN_MATERIAL_TAB.vat%TYPE;
      delivery_address_no_  RETURN_MATERIAL_TAB.ship_addr_no%TYPE;
      customer_no_addr_no_  RETURN_MATERIAL_TAB.customer_no_addr_no%TYPE;
      supply_country_       RETURN_MATERIAL.supply_country%TYPE;
      supply_country_db_    RETURN_MATERIAL_TAB.supply_country%TYPE;
      company_              VARCHAR2(20);
      return_from_customer_no_ RETURN_MATERIAL_TAB.return_from_customer_no%TYPE;
      use_price_incl_tax_db_   RETURN_MATERIAL_TAB.use_price_incl_tax%TYPE;
   BEGIN
   	-- Retrieve the default attribute values.
      Prepare_Insert___(new_attr_);
   
      contract_ := Client_SYS.Get_Item_Value('CONTRACT',attr_);
      customer_no_ := Client_SYS.Get_Item_Value('CUSTOMER_NO',attr_);
      return_from_customer_no_ := Client_SYS.Get_Item_Value('RETURN_FROM_CUSTOMER_NO',attr_);
      supply_country_db_ := Client_SYS.Get_Item_Value('SUPPLY_COUNTRY_DB',attr_);  
      IF supply_country_db_ IS NULL THEN
         supply_country_db_ :=  Company_Site_API.Get_Country_Db(contract_ );
      END IF;
      supply_country_ := ISO_Country_API.Decode(supply_country_db_);
      use_price_incl_tax_db_   := Client_SYS.Get_Item_Value('USE_PRICE_INCL_TAX_DB',attr_);
   
      IF (return_from_customer_no_ IS NULL) THEN
         return_from_customer_no_ := customer_no_;
      END IF;
      Client_SYS.Set_Item_Value('CUSTOMER_NO',customer_no_ , new_attr_);
      Client_SYS.Set_Item_Value('RETURN_FROM_CUSTOMER_NO', return_from_customer_no_ , new_attr_);
      Client_SYS.Set_Item_Value('CONTRACT',contract_ , new_attr_);
      Client_SYS.Set_Item_Value('SUPPLY_COUNTRY', supply_country_ , new_attr_);
   
      company_ := Site_API.Get_Company(contract_);
      Client_SYS.Set_Item_Value('USE_PRICE_INCL_TAX_DB', use_price_incl_tax_db_, new_attr_);
      Client_SYS.Set_Item_Value('DATE_REQUESTED',Site_API.Get_Site_Date(contract_), new_attr_);
      delivery_address_no_ := Client_SYS.Get_Item_Value('SHIP_ADDR_NO',attr_);
      IF (delivery_address_no_ IS NULL) THEN
        delivery_address_no_ := Cust_Ord_Customer_API.Get_Delivery_Address(return_from_customer_no_);
      END IF;
   
      IF ( Customer_Delivery_Tax_Info_API.Get_Vat(return_from_customer_no_, delivery_address_no_, company_, supply_country_db_) = 'TRUE') THEN
         vat_ := 'Y';
      ELSE
         vat_ := 'N';
      END IF;
   
      Client_SYS.Set_Item_Value('VAT_DB', vat_, new_attr_);
      Client_SYS.Set_Item_Value('TAX_LIABILITY', Customer_Delivery_Tax_Info_API.Get_Liability_Type_Db(return_from_customer_no_, delivery_address_no_, company_, supply_country_db_), new_attr_);
   
      currency_code_ := Client_SYS.Get_Item_Value('CURRENCY_CODE',attr_);
   
      IF (currency_code_ IS NULL) THEN
         Client_SYS.Set_Item_Value('CURRENCY_CODE',Cust_Ord_Customer_API.Get_Currency_Code(customer_no_), new_attr_);
      END IF;
   
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO', delivery_address_no_, new_attr_);
      customer_no_addr_no_ := Client_SYS.Get_Item_Value('CUSTOMER_NO_ADDR_NO',attr_);
      IF (customer_no_addr_no_ IS NULL) THEN
         customer_no_addr_no_ := Cust_Ord_Customer_API.Get_Document_Address(customer_no_);
      END IF;
      Client_SYS.Set_Item_Value('LANGUAGE_CODE',Cust_Ord_Customer_API.Get_Language_Code(customer_no_), new_attr_);
   
      --Replace the default attribute values with the ones passed in the inparameterstring.
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         Client_SYS.Set_Item_Value(name_, value_, new_attr_);
      END LOOP;
   
      -- Bug 103631, start
      Client_SYS.Set_Item_Value('CUSTOMER_NO_ADDR_NO',customer_no_addr_no_, new_attr_);
      -- Bug 103631, end
      
      RETURN new_attr_;
   END Core;

BEGIN
   RETURN Core(attr_);
END Build_Attr_For_New___;


FUNCTION Build_Attr_Supp_Rma_Head___ (
	   rec_                IN  RETURN_MATERIAL_TAB%ROWTYPE,
      demand_rma_no_      IN  NUMBER,
      demand_rma_line_no_ IN  NUMBER) RETURN VARCHAR2
IS
   
   FUNCTION Core (
   	   rec_                IN  RETURN_MATERIAL_TAB%ROWTYPE,
         demand_rma_no_      IN  NUMBER,
         demand_rma_line_no_ IN  NUMBER) RETURN VARCHAR2
   IS
      new_attr_              VARCHAR2(4000);
      rma_line_rec_          Return_Material_Line_API.Public_Rec;
      int_cust_order_no_     VARCHAR2(12);
      int_co_line_no_        VARCHAR2(4);
      int_co_rel_no_         VARCHAR2(4);
      int_co_line_item_no_   NUMBER;
      int_order_rec_         Customer_Order_API.Public_Rec;
      supply_country_db_     RETURN_MATERIAL_TAB.supply_country%TYPE;
      company_               VARCHAR2(20);
      vat_                   RETURN_MATERIAL_TAB.vat%TYPE;
      int_cust_ship_addr_    VARCHAR2(50);
      int_customer_no_       RETURN_MATERIAL_TAB.customer_no%TYPE;
      currency_code_         RETURN_MATERIAL_TAB.currency_code%TYPE;
      customer_rec_          Cust_Ord_Customer_API.Public_Rec;
      cust_no_credit_        RETURN_MATERIAL_TAB.customer_no_credit%TYPE;
      cust_credit_addr_no_   RETURN_MATERIAL_TAB.customer_no_credit_addr_no%TYPE;
      cust_doc_address_      RETURN_MATERIAL_TAB.customer_no_addr_no%TYPE;
      jinsui_invoice_db_     RETURN_MATERIAL_TAB.jinsui_invoice%TYPE;
      supply_code_db_        VARCHAR2(3);
   BEGIN
      Client_SYS.Clear_Attr(new_attr_);
      Client_SYS.Add_To_Attr('CONTRACT', rec_.return_to_contract, new_attr_);
      Client_SYS.Add_To_Attr('RETURN_TO_CONTRACT', rec_.return_to_contract, new_attr_);
      Client_SYS.Add_To_Attr('ORIGINATING_RMA_NO', demand_rma_no_, new_attr_);
      Client_SYS.Add_To_Attr('RETURN_APPROVER_ID', rec_.return_approver_id, new_attr_);
      Client_SYS.Add_To_Attr('LATEST_RETURN_DATE', rec_.latest_return_date, new_attr_);
   
      int_customer_no_ := Cust_Ord_Customer_API.Get_Customer_No_From_Contract(rec_.contract);
      Client_SYS.Add_To_Attr('CUSTOMER_NO', int_customer_no_, new_attr_);
      Client_SYS.Add_To_Attr('RETURN_FROM_CUSTOMER_NO', rec_.return_from_customer_no, new_attr_);
   
      rma_line_rec_ := return_Material_Line_API.Get(demand_rma_no_, demand_rma_line_no_);
      supply_code_db_ := Customer_Order_Line_API.Get_Supply_Code_Db(rma_line_rec_.order_no, rma_line_rec_.line_no, rma_line_rec_.rel_no, rma_line_rec_.line_item_no);
   
      IF ((rma_line_rec_.po_order_no IS NOT NULL) AND (supply_code_db_ IN ('IPD', 'IPT'))) THEN
         Customer_Order_Line_API.Get_Custord_From_Demand_Info(int_cust_order_no_, int_co_line_no_, int_co_rel_no_, int_co_line_item_no_, rma_line_rec_.po_order_no, rma_line_rec_.po_line_no, rma_line_rec_.po_rel_no, NULL, supply_code_db_);
         int_order_rec_ := Customer_Order_API.Get(int_cust_order_no_);
         currency_code_ := int_order_rec_.currency_code;
         cust_no_credit_ := int_order_rec_.customer_no_pay;
         cust_credit_addr_no_ := int_order_rec_.customer_no_pay_addr_no;
         cust_doc_address_ := NVL(int_order_rec_.bill_addr_no, Cust_Ord_Customer_API.Get_Document_Address(int_customer_no_));
         jinsui_invoice_db_ := int_order_rec_.jinsui_invoice;
      END IF;
      IF (int_cust_order_no_ IS NULL) THEN
         customer_rec_ := Cust_Ord_Customer_API.Get(int_customer_no_);
         currency_code_ := customer_rec_.currency_code;
         cust_doc_address_ := Cust_Ord_Customer_API.Get_Document_Address(int_customer_no_);
         jinsui_invoice_db_ := 'FALSE';
      END IF;
   
      Client_SYS.Add_To_Attr('CURRENCY_CODE', currency_code_, new_attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT', cust_no_credit_, new_attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO_CREDIT_ADDR_NO', cust_credit_addr_no_, new_attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_NO_ADDR_NO', cust_doc_address_, new_attr_);
      Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB', jinsui_invoice_db_, new_attr_);
      Client_SYS.Set_Item_Value('DATE_REQUESTED', Site_API.Get_Site_Date(rec_.return_to_contract), new_attr_);
      Client_SYS.Set_Item_Value('LANGUAGE_CODE', Cust_Ord_Customer_API.Get_Language_Code(int_customer_no_), new_attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', Cust_Ord_Customer_Address_API.Get_Intrastat_Exempt_Db(rec_.return_from_customer_no,rec_.ship_addr_no), new_attr_);
      Client_SYS.Add_To_Attr('RMA_REPORT_PRINTED_DB', 'NOT PRINTED', new_attr_);
   
      supply_country_db_ := Iso_Country_API.Encode(Company_Site_API.Get_Country(rec_.return_to_contract));
      Client_SYS.Set_Item_Value('SUPPLY_COUNTRY_DB', supply_country_db_, new_attr_);
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, new_attr_);
   
      company_ := Site_API.Get_Company(rec_.return_to_contract);
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX_DB', Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(int_customer_no_, company_), new_attr_);
      int_cust_ship_addr_ := Cust_Ord_Customer_API.Get_Delivery_Address(int_customer_no_);
      IF (Customer_Delivery_Tax_Info_API.Get_Vat(int_customer_no_, int_cust_ship_addr_, company_, supply_country_db_) = 'TRUE') THEN
         vat_ := 'Y';
      ELSE
         vat_ := 'N';
      END IF;
      Client_SYS.Set_Item_Value('VAT_DB', vat_, new_attr_);
      Client_SYS.Set_Item_Value('TAX_LIABILITY', NVL(Customer_Delivery_Tax_Info_API.Get_Liability_Type_Db(rec_.return_from_customer_no, rec_.ship_addr_no, company_, supply_country_db_), 'EXEMPT'), new_attr_);
   
      Client_SYS.Add_To_Attr('SHIP_ADDR_FLAG_DB', rec_.ship_addr_flag, new_attr_);
   
      IF (rec_.ship_addr_flag = 'Y') THEN
         Client_SYS.Add_To_Attr('SHIP_ADDRESS1', rec_.ship_address1, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDRESS2', rec_.ship_address2, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_ZIP_CODE', rec_.ship_addr_zip_code, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_CITY', rec_.ship_addr_city, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_STATE', rec_.ship_addr_state, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTY', rec_.ship_addr_county, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_COUNTRY_CODE', rec_.ship_Addr_country_code, new_attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_NAME', rec_.ship_addr_name, new_attr_);
      END IF;
      Client_SYS.Add_To_Attr('RETURN_ADDR_FLAG_DB', rec_.return_addr_flag, new_attr_);
      Client_SYS.Add_To_Attr('RETURN_ADDR_NO', rec_.return_addr_no, new_attr_);
      IF (rec_.return_addr_flag = 'Y') THEN
         Client_SYS.Add_To_Attr('RETURN_ADDRESS1', rec_.return_address1, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDRESS2', rec_.return_address2, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_ZIP_CODE', rec_.return_addr_zip_code, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_CITY', rec_.return_addr_city, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_STATE', rec_.return_addr_state, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTY', rec_.return_addr_county, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_COUNTRY_CODE', rec_.return_Addr_country_code, new_attr_);
         Client_SYS.Add_To_Attr('RETURN_ADDR_NAME', rec_.return_addr_name, new_attr_);
      END IF;
      RETURN new_attr_;
   END Core;

BEGIN
   RETURN Core(rec_, demand_rma_no_, demand_rma_line_no_);
END Build_Attr_Supp_Rma_Head___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Language_Refreshed
IS
   
   PROCEDURE Base
   IS
   BEGIN
      Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
   END Base;

BEGIN
   Base;
END Language_Refreshed;


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Return_Material_API;
